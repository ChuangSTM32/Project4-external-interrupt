
external interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034c4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000013b0  08003674  08003674  00013674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a24  08004a24  00020064  2**0
                  CONTENTS
  4 .ARM          00000008  08004a24  08004a24  00014a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a2c  08004a2c  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a2c  08004a2c  00014a2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a30  08004a30  00014a30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08004a34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020064  2**0
                  CONTENTS
 10 .bss          000005cc  20000064  20000064  00020064  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000630  20000630  00020064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 14 .debug_info   00008b58  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001e13  00000000  00000000  00028c2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000008c8  00000000  00000000  0002aa48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000697  00000000  00000000  0002b310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002386a  00000000  00000000  0002b9a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000d033  00000000  00000000  0004f211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d20b4  00000000  00000000  0005c244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000026c4  00000000  00000000  0012e2f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004a  00000000  00000000  001309bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000064 	.word	0x20000064
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800365c 	.word	0x0800365c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000068 	.word	0x20000068
 80001ec:	0800365c 	.word	0x0800365c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <Get_Num>:


uint32_t number = 0;

uint32_t Get_Num(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
	return number;
 8000590:	4b03      	ldr	r3, [pc, #12]	; (80005a0 <Get_Num+0x14>)
 8000592:	681b      	ldr	r3, [r3, #0]
}
 8000594:	4618      	mov	r0, r3
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	20000080 	.word	0x20000080

080005a4 <Plus_One>:

void Plus_One(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
	number++;
 80005a8:	4b04      	ldr	r3, [pc, #16]	; (80005bc <Plus_One+0x18>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	3301      	adds	r3, #1
 80005ae:	4a03      	ldr	r2, [pc, #12]	; (80005bc <Plus_One+0x18>)
 80005b0:	6013      	str	r3, [r2, #0]
}
 80005b2:	bf00      	nop
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr
 80005bc:	20000080 	.word	0x20000080

080005c0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b086      	sub	sp, #24
 80005c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c6:	1d3b      	adds	r3, r7, #4
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
 80005ce:	609a      	str	r2, [r3, #8]
 80005d0:	60da      	str	r2, [r3, #12]
 80005d2:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005d4:	2300      	movs	r3, #0
 80005d6:	603b      	str	r3, [r7, #0]
 80005d8:	4b12      	ldr	r3, [pc, #72]	; (8000624 <MX_GPIO_Init+0x64>)
 80005da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005dc:	4a11      	ldr	r2, [pc, #68]	; (8000624 <MX_GPIO_Init+0x64>)
 80005de:	f043 0302 	orr.w	r3, r3, #2
 80005e2:	6313      	str	r3, [r2, #48]	; 0x30
 80005e4:	4b0f      	ldr	r3, [pc, #60]	; (8000624 <MX_GPIO_Init+0x64>)
 80005e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e8:	f003 0302 	and.w	r3, r3, #2
 80005ec:	603b      	str	r3, [r7, #0]
 80005ee:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80005f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80005f4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005f6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80005fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80005fc:	2302      	movs	r3, #2
 80005fe:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000600:	1d3b      	adds	r3, r7, #4
 8000602:	4619      	mov	r1, r3
 8000604:	4808      	ldr	r0, [pc, #32]	; (8000628 <MX_GPIO_Init+0x68>)
 8000606:	f000 feaf 	bl	8001368 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 12, 0);
 800060a:	2200      	movs	r2, #0
 800060c:	210c      	movs	r1, #12
 800060e:	2028      	movs	r0, #40	; 0x28
 8000610:	f000 fe73 	bl	80012fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000614:	2028      	movs	r0, #40	; 0x28
 8000616:	f000 fe8c 	bl	8001332 <HAL_NVIC_EnableIRQ>

}
 800061a:	bf00      	nop
 800061c:	3718      	adds	r7, #24
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	40023800 	.word	0x40023800
 8000628:	40020400 	.word	0x40020400

0800062c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000630:	4b1b      	ldr	r3, [pc, #108]	; (80006a0 <MX_I2C1_Init+0x74>)
 8000632:	4a1c      	ldr	r2, [pc, #112]	; (80006a4 <MX_I2C1_Init+0x78>)
 8000634:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000636:	4b1a      	ldr	r3, [pc, #104]	; (80006a0 <MX_I2C1_Init+0x74>)
 8000638:	4a1b      	ldr	r2, [pc, #108]	; (80006a8 <MX_I2C1_Init+0x7c>)
 800063a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800063c:	4b18      	ldr	r3, [pc, #96]	; (80006a0 <MX_I2C1_Init+0x74>)
 800063e:	2200      	movs	r2, #0
 8000640:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000642:	4b17      	ldr	r3, [pc, #92]	; (80006a0 <MX_I2C1_Init+0x74>)
 8000644:	2200      	movs	r2, #0
 8000646:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000648:	4b15      	ldr	r3, [pc, #84]	; (80006a0 <MX_I2C1_Init+0x74>)
 800064a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800064e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000650:	4b13      	ldr	r3, [pc, #76]	; (80006a0 <MX_I2C1_Init+0x74>)
 8000652:	2200      	movs	r2, #0
 8000654:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000656:	4b12      	ldr	r3, [pc, #72]	; (80006a0 <MX_I2C1_Init+0x74>)
 8000658:	2200      	movs	r2, #0
 800065a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800065c:	4b10      	ldr	r3, [pc, #64]	; (80006a0 <MX_I2C1_Init+0x74>)
 800065e:	2200      	movs	r2, #0
 8000660:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000662:	4b0f      	ldr	r3, [pc, #60]	; (80006a0 <MX_I2C1_Init+0x74>)
 8000664:	2200      	movs	r2, #0
 8000666:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000668:	480d      	ldr	r0, [pc, #52]	; (80006a0 <MX_I2C1_Init+0x74>)
 800066a:	f001 f865 	bl	8001738 <HAL_I2C_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000674:	f000 f8f6 	bl	8000864 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000678:	2100      	movs	r1, #0
 800067a:	4809      	ldr	r0, [pc, #36]	; (80006a0 <MX_I2C1_Init+0x74>)
 800067c:	f001 fe27 	bl	80022ce <HAL_I2CEx_ConfigAnalogFilter>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000686:	f000 f8ed 	bl	8000864 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800068a:	2100      	movs	r1, #0
 800068c:	4804      	ldr	r0, [pc, #16]	; (80006a0 <MX_I2C1_Init+0x74>)
 800068e:	f001 fe5a 	bl	8002346 <HAL_I2CEx_ConfigDigitalFilter>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000698:	f000 f8e4 	bl	8000864 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800069c:	bf00      	nop
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	20000084 	.word	0x20000084
 80006a4:	40005400 	.word	0x40005400
 80006a8:	00061a80 	.word	0x00061a80

080006ac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b08a      	sub	sp, #40	; 0x28
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b4:	f107 0314 	add.w	r3, r7, #20
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]
 80006c2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a19      	ldr	r2, [pc, #100]	; (8000730 <HAL_I2C_MspInit+0x84>)
 80006ca:	4293      	cmp	r3, r2
 80006cc:	d12c      	bne.n	8000728 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	613b      	str	r3, [r7, #16]
 80006d2:	4b18      	ldr	r3, [pc, #96]	; (8000734 <HAL_I2C_MspInit+0x88>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	4a17      	ldr	r2, [pc, #92]	; (8000734 <HAL_I2C_MspInit+0x88>)
 80006d8:	f043 0302 	orr.w	r3, r3, #2
 80006dc:	6313      	str	r3, [r2, #48]	; 0x30
 80006de:	4b15      	ldr	r3, [pc, #84]	; (8000734 <HAL_I2C_MspInit+0x88>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	f003 0302 	and.w	r3, r3, #2
 80006e6:	613b      	str	r3, [r7, #16]
 80006e8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80006ea:	f44f 7340 	mov.w	r3, #768	; 0x300
 80006ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006f0:	2312      	movs	r3, #18
 80006f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f4:	2300      	movs	r3, #0
 80006f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006f8:	2303      	movs	r3, #3
 80006fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006fc:	2304      	movs	r3, #4
 80006fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000700:	f107 0314 	add.w	r3, r7, #20
 8000704:	4619      	mov	r1, r3
 8000706:	480c      	ldr	r0, [pc, #48]	; (8000738 <HAL_I2C_MspInit+0x8c>)
 8000708:	f000 fe2e 	bl	8001368 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800070c:	2300      	movs	r3, #0
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	4b08      	ldr	r3, [pc, #32]	; (8000734 <HAL_I2C_MspInit+0x88>)
 8000712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000714:	4a07      	ldr	r2, [pc, #28]	; (8000734 <HAL_I2C_MspInit+0x88>)
 8000716:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800071a:	6413      	str	r3, [r2, #64]	; 0x40
 800071c:	4b05      	ldr	r3, [pc, #20]	; (8000734 <HAL_I2C_MspInit+0x88>)
 800071e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000720:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000724:	60fb      	str	r3, [r7, #12]
 8000726:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000728:	bf00      	nop
 800072a:	3728      	adds	r7, #40	; 0x28
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	40005400 	.word	0x40005400
 8000734:	40023800 	.word	0x40023800
 8000738:	40020400 	.word	0x40020400

0800073c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000742:	f000 fc69 	bl	8001018 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000746:	f000 f81d 	bl	8000784 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800074a:	f7ff ff39 	bl	80005c0 <MX_GPIO_Init>
  MX_I2C1_Init();
 800074e:	f7ff ff6d 	bl	800062c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(20);
 8000752:	2014      	movs	r0, #20
 8000754:	f000 fcd2 	bl	80010fc <HAL_Delay>
  OLED_Init();
 8000758:	f000 f88a 	bl	8000870 <OLED_Init>
  OLED_ShowString(10, 0, "counter: ", &Font_16x26);
 800075c:	4b07      	ldr	r3, [pc, #28]	; (800077c <main+0x40>)
 800075e:	4a08      	ldr	r2, [pc, #32]	; (8000780 <main+0x44>)
 8000760:	2100      	movs	r1, #0
 8000762:	200a      	movs	r0, #10
 8000764:	f000 fa84 	bl	8000c70 <OLED_ShowString>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  state = HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_2);
	  uint32_t num = Get_Num();
 8000768:	f7ff ff10 	bl	800058c <Get_Num>
 800076c:	6078      	str	r0, [r7, #4]
	  OLED_ShowNum(20, 30, num, &Font_16x26);
 800076e:	4b03      	ldr	r3, [pc, #12]	; (800077c <main+0x40>)
 8000770:	687a      	ldr	r2, [r7, #4]
 8000772:	211e      	movs	r1, #30
 8000774:	2014      	movs	r0, #20
 8000776:	f000 faab 	bl	8000cd0 <OLED_ShowNum>
  {
 800077a:	e7f5      	b.n	8000768 <main+0x2c>
 800077c:	20000000 	.word	0x20000000
 8000780:	08003674 	.word	0x08003674

08000784 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b094      	sub	sp, #80	; 0x50
 8000788:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800078a:	f107 0320 	add.w	r3, r7, #32
 800078e:	2230      	movs	r2, #48	; 0x30
 8000790:	2100      	movs	r1, #0
 8000792:	4618      	mov	r0, r3
 8000794:	f002 fade 	bl	8002d54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000798:	f107 030c 	add.w	r3, r7, #12
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]
 80007a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a8:	2300      	movs	r3, #0
 80007aa:	60bb      	str	r3, [r7, #8]
 80007ac:	4b2b      	ldr	r3, [pc, #172]	; (800085c <SystemClock_Config+0xd8>)
 80007ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b0:	4a2a      	ldr	r2, [pc, #168]	; (800085c <SystemClock_Config+0xd8>)
 80007b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007b6:	6413      	str	r3, [r2, #64]	; 0x40
 80007b8:	4b28      	ldr	r3, [pc, #160]	; (800085c <SystemClock_Config+0xd8>)
 80007ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007c0:	60bb      	str	r3, [r7, #8]
 80007c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007c4:	2300      	movs	r3, #0
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	4b25      	ldr	r3, [pc, #148]	; (8000860 <SystemClock_Config+0xdc>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a24      	ldr	r2, [pc, #144]	; (8000860 <SystemClock_Config+0xdc>)
 80007ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007d2:	6013      	str	r3, [r2, #0]
 80007d4:	4b22      	ldr	r3, [pc, #136]	; (8000860 <SystemClock_Config+0xdc>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007dc:	607b      	str	r3, [r7, #4]
 80007de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007e0:	2302      	movs	r3, #2
 80007e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007e4:	2301      	movs	r3, #1
 80007e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007e8:	2310      	movs	r3, #16
 80007ea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ec:	2302      	movs	r3, #2
 80007ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007f0:	2300      	movs	r3, #0
 80007f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007f4:	2308      	movs	r3, #8
 80007f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80007f8:	23b4      	movs	r3, #180	; 0xb4
 80007fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007fc:	2302      	movs	r3, #2
 80007fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000800:	2304      	movs	r3, #4
 8000802:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000804:	f107 0320 	add.w	r3, r7, #32
 8000808:	4618      	mov	r0, r3
 800080a:	f001 fe2b 	bl	8002464 <HAL_RCC_OscConfig>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000814:	f000 f826 	bl	8000864 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000818:	f001 fdd4 	bl	80023c4 <HAL_PWREx_EnableOverDrive>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000822:	f000 f81f 	bl	8000864 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000826:	230f      	movs	r3, #15
 8000828:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800082a:	2302      	movs	r3, #2
 800082c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800082e:	2300      	movs	r3, #0
 8000830:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000832:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000836:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000838:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800083c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800083e:	f107 030c 	add.w	r3, r7, #12
 8000842:	2105      	movs	r1, #5
 8000844:	4618      	mov	r0, r3
 8000846:	f002 f885 	bl	8002954 <HAL_RCC_ClockConfig>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000850:	f000 f808 	bl	8000864 <Error_Handler>
  }
}
 8000854:	bf00      	nop
 8000856:	3750      	adds	r7, #80	; 0x50
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	40023800 	.word	0x40023800
 8000860:	40007000 	.word	0x40007000

08000864 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000868:	b672      	cpsid	i
}
 800086a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800086c:	e7fe      	b.n	800086c <Error_Handler+0x8>
	...

08000870 <OLED_Init>:
        }
    }
}


uint8_t OLED_Init(void) {
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0

	/* Init I2C */
	OLED_I2C_Init();
 8000876:	f000 fa49 	bl	8000d0c <OLED_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, OLED_I2C_ADDR, 1, 20000) != HAL_OK) {
 800087a:	f644 6320 	movw	r3, #20000	; 0x4e20
 800087e:	2201      	movs	r2, #1
 8000880:	2178      	movs	r1, #120	; 0x78
 8000882:	485b      	ldr	r0, [pc, #364]	; (80009f0 <OLED_Init+0x180>)
 8000884:	f001 f99a 	bl	8001bbc <HAL_I2C_IsDeviceReady>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <OLED_Init+0x22>
		/* Return false */
		return 0;
 800088e:	2300      	movs	r3, #0
 8000890:	e0a9      	b.n	80009e6 <OLED_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8000892:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000896:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000898:	e002      	b.n	80008a0 <OLED_Init+0x30>
		p--;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	3b01      	subs	r3, #1
 800089e:	607b      	str	r3, [r7, #4]
	while(p>0)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d1f9      	bne.n	800089a <OLED_Init+0x2a>

	/* Init LCD */
	OLED_WRITECOMMAND(0xAE); //display off
 80008a6:	22ae      	movs	r2, #174	; 0xae
 80008a8:	2100      	movs	r1, #0
 80008aa:	2078      	movs	r0, #120	; 0x78
 80008ac:	f000 faaa 	bl	8000e04 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 80008b0:	2220      	movs	r2, #32
 80008b2:	2100      	movs	r1, #0
 80008b4:	2078      	movs	r0, #120	; 0x78
 80008b6:	f000 faa5 	bl	8000e04 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80008ba:	2210      	movs	r2, #16
 80008bc:	2100      	movs	r1, #0
 80008be:	2078      	movs	r0, #120	; 0x78
 80008c0:	f000 faa0 	bl	8000e04 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80008c4:	22b0      	movs	r2, #176	; 0xb0
 80008c6:	2100      	movs	r1, #0
 80008c8:	2078      	movs	r0, #120	; 0x78
 80008ca:	f000 fa9b 	bl	8000e04 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80008ce:	22c8      	movs	r2, #200	; 0xc8
 80008d0:	2100      	movs	r1, #0
 80008d2:	2078      	movs	r0, #120	; 0x78
 80008d4:	f000 fa96 	bl	8000e04 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0x00); //---set low column address
 80008d8:	2200      	movs	r2, #0
 80008da:	2100      	movs	r1, #0
 80008dc:	2078      	movs	r0, #120	; 0x78
 80008de:	f000 fa91 	bl	8000e04 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0x10); //---set high column address
 80008e2:	2210      	movs	r2, #16
 80008e4:	2100      	movs	r1, #0
 80008e6:	2078      	movs	r0, #120	; 0x78
 80008e8:	f000 fa8c 	bl	8000e04 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0x40); //--set start line address
 80008ec:	2240      	movs	r2, #64	; 0x40
 80008ee:	2100      	movs	r1, #0
 80008f0:	2078      	movs	r0, #120	; 0x78
 80008f2:	f000 fa87 	bl	8000e04 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0x81); //--set contrast control register
 80008f6:	2281      	movs	r2, #129	; 0x81
 80008f8:	2100      	movs	r1, #0
 80008fa:	2078      	movs	r0, #120	; 0x78
 80008fc:	f000 fa82 	bl	8000e04 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0xFF);
 8000900:	22ff      	movs	r2, #255	; 0xff
 8000902:	2100      	movs	r1, #0
 8000904:	2078      	movs	r0, #120	; 0x78
 8000906:	f000 fa7d 	bl	8000e04 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800090a:	22a1      	movs	r2, #161	; 0xa1
 800090c:	2100      	movs	r1, #0
 800090e:	2078      	movs	r0, #120	; 0x78
 8000910:	f000 fa78 	bl	8000e04 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0xA6); //--set normal display
 8000914:	22a6      	movs	r2, #166	; 0xa6
 8000916:	2100      	movs	r1, #0
 8000918:	2078      	movs	r0, #120	; 0x78
 800091a:	f000 fa73 	bl	8000e04 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800091e:	22a8      	movs	r2, #168	; 0xa8
 8000920:	2100      	movs	r1, #0
 8000922:	2078      	movs	r0, #120	; 0x78
 8000924:	f000 fa6e 	bl	8000e04 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0x3F); //
 8000928:	223f      	movs	r2, #63	; 0x3f
 800092a:	2100      	movs	r1, #0
 800092c:	2078      	movs	r0, #120	; 0x78
 800092e:	f000 fa69 	bl	8000e04 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000932:	22a4      	movs	r2, #164	; 0xa4
 8000934:	2100      	movs	r1, #0
 8000936:	2078      	movs	r0, #120	; 0x78
 8000938:	f000 fa64 	bl	8000e04 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0xD3); //-set display offset
 800093c:	22d3      	movs	r2, #211	; 0xd3
 800093e:	2100      	movs	r1, #0
 8000940:	2078      	movs	r0, #120	; 0x78
 8000942:	f000 fa5f 	bl	8000e04 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0x00); //-not offset
 8000946:	2200      	movs	r2, #0
 8000948:	2100      	movs	r1, #0
 800094a:	2078      	movs	r0, #120	; 0x78
 800094c:	f000 fa5a 	bl	8000e04 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000950:	22d5      	movs	r2, #213	; 0xd5
 8000952:	2100      	movs	r1, #0
 8000954:	2078      	movs	r0, #120	; 0x78
 8000956:	f000 fa55 	bl	8000e04 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0xF0); //--set divide ratio
 800095a:	22f0      	movs	r2, #240	; 0xf0
 800095c:	2100      	movs	r1, #0
 800095e:	2078      	movs	r0, #120	; 0x78
 8000960:	f000 fa50 	bl	8000e04 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0xD9); //--set pre-charge period
 8000964:	22d9      	movs	r2, #217	; 0xd9
 8000966:	2100      	movs	r1, #0
 8000968:	2078      	movs	r0, #120	; 0x78
 800096a:	f000 fa4b 	bl	8000e04 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0x22); //
 800096e:	2222      	movs	r2, #34	; 0x22
 8000970:	2100      	movs	r1, #0
 8000972:	2078      	movs	r0, #120	; 0x78
 8000974:	f000 fa46 	bl	8000e04 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000978:	22da      	movs	r2, #218	; 0xda
 800097a:	2100      	movs	r1, #0
 800097c:	2078      	movs	r0, #120	; 0x78
 800097e:	f000 fa41 	bl	8000e04 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0x12);
 8000982:	2212      	movs	r2, #18
 8000984:	2100      	movs	r1, #0
 8000986:	2078      	movs	r0, #120	; 0x78
 8000988:	f000 fa3c 	bl	8000e04 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0xDB); //--set vcomh
 800098c:	22db      	movs	r2, #219	; 0xdb
 800098e:	2100      	movs	r1, #0
 8000990:	2078      	movs	r0, #120	; 0x78
 8000992:	f000 fa37 	bl	8000e04 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000996:	2220      	movs	r2, #32
 8000998:	2100      	movs	r1, #0
 800099a:	2078      	movs	r0, #120	; 0x78
 800099c:	f000 fa32 	bl	8000e04 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0x8D); //--set DC-DC enable
 80009a0:	228d      	movs	r2, #141	; 0x8d
 80009a2:	2100      	movs	r1, #0
 80009a4:	2078      	movs	r0, #120	; 0x78
 80009a6:	f000 fa2d 	bl	8000e04 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0x14); //
 80009aa:	2214      	movs	r2, #20
 80009ac:	2100      	movs	r1, #0
 80009ae:	2078      	movs	r0, #120	; 0x78
 80009b0:	f000 fa28 	bl	8000e04 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0xAF); //--turn on OLED panel
 80009b4:	22af      	movs	r2, #175	; 0xaf
 80009b6:	2100      	movs	r1, #0
 80009b8:	2078      	movs	r0, #120	; 0x78
 80009ba:	f000 fa23 	bl	8000e04 <OLED_I2C_Write>


	OLED_WRITECOMMAND(OLED_DEACTIVATE_SCROLL);
 80009be:	222e      	movs	r2, #46	; 0x2e
 80009c0:	2100      	movs	r1, #0
 80009c2:	2078      	movs	r0, #120	; 0x78
 80009c4:	f000 fa1e 	bl	8000e04 <OLED_I2C_Write>

	/* Clear screen */
	OLED_Fill(OLED_COLOR_BLACK);
 80009c8:	2000      	movs	r0, #0
 80009ca:	f000 f843 	bl	8000a54 <OLED_Fill>

	/* Update screen */
	OLED_UpdateScreen();
 80009ce:	f000 f813 	bl	80009f8 <OLED_UpdateScreen>

	/* Set default values */
	OLED.CurrentX = 0;
 80009d2:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <OLED_Init+0x184>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	801a      	strh	r2, [r3, #0]
	OLED.CurrentY = 0;
 80009d8:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <OLED_Init+0x184>)
 80009da:	2200      	movs	r2, #0
 80009dc:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	OLED.Initialized = 1;
 80009de:	4b05      	ldr	r3, [pc, #20]	; (80009f4 <OLED_Init+0x184>)
 80009e0:	2201      	movs	r2, #1
 80009e2:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 80009e4:	2301      	movs	r3, #1
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	20000084 	.word	0x20000084
 80009f4:	200004d8 	.word	0x200004d8

080009f8 <OLED_UpdateScreen>:

void OLED_UpdateScreen(void) {
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 80009fe:	2300      	movs	r3, #0
 8000a00:	71fb      	strb	r3, [r7, #7]
 8000a02:	e01d      	b.n	8000a40 <OLED_UpdateScreen+0x48>
		OLED_WRITECOMMAND(0xB0 + m);
 8000a04:	79fb      	ldrb	r3, [r7, #7]
 8000a06:	3b50      	subs	r3, #80	; 0x50
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	2078      	movs	r0, #120	; 0x78
 8000a10:	f000 f9f8 	bl	8000e04 <OLED_I2C_Write>
		OLED_WRITECOMMAND(0x00);
 8000a14:	2200      	movs	r2, #0
 8000a16:	2100      	movs	r1, #0
 8000a18:	2078      	movs	r0, #120	; 0x78
 8000a1a:	f000 f9f3 	bl	8000e04 <OLED_I2C_Write>
		OLED_WRITECOMMAND(0x10);
 8000a1e:	2210      	movs	r2, #16
 8000a20:	2100      	movs	r1, #0
 8000a22:	2078      	movs	r0, #120	; 0x78
 8000a24:	f000 f9ee 	bl	8000e04 <OLED_I2C_Write>

		/* Write multi data */
		OLED_I2C_WriteMulti(OLED_I2C_ADDR, 0x40, &OLED_Buffer[OLED_WIDTH * m], OLED_WIDTH);
 8000a28:	79fb      	ldrb	r3, [r7, #7]
 8000a2a:	01db      	lsls	r3, r3, #7
 8000a2c:	4a08      	ldr	r2, [pc, #32]	; (8000a50 <OLED_UpdateScreen+0x58>)
 8000a2e:	441a      	add	r2, r3
 8000a30:	2380      	movs	r3, #128	; 0x80
 8000a32:	2140      	movs	r1, #64	; 0x40
 8000a34:	2078      	movs	r0, #120	; 0x78
 8000a36:	f000 f97f 	bl	8000d38 <OLED_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	71fb      	strb	r3, [r7, #7]
 8000a40:	79fb      	ldrb	r3, [r7, #7]
 8000a42:	2b07      	cmp	r3, #7
 8000a44:	d9de      	bls.n	8000a04 <OLED_UpdateScreen+0xc>
	}
}
 8000a46:	bf00      	nop
 8000a48:	bf00      	nop
 8000a4a:	3708      	adds	r7, #8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	200000d8 	.word	0x200000d8

08000a54 <OLED_Fill>:
	for (i = 0; i < sizeof(OLED_Buffer); i++) {
		OLED_Buffer[i] = ~OLED_Buffer[i];
	}
}

void OLED_Fill(OLED_COLOR_t color) {
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(OLED_Buffer, (color == OLED_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(OLED_Buffer));
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d101      	bne.n	8000a68 <OLED_Fill+0x14>
 8000a64:	2300      	movs	r3, #0
 8000a66:	e000      	b.n	8000a6a <OLED_Fill+0x16>
 8000a68:	23ff      	movs	r3, #255	; 0xff
 8000a6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4803      	ldr	r0, [pc, #12]	; (8000a80 <OLED_Fill+0x2c>)
 8000a72:	f002 f96f 	bl	8002d54 <memset>
}
 8000a76:	bf00      	nop
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	200000d8 	.word	0x200000d8

08000a84 <OLED_DrawPixel>:

void OLED_DrawPixel(uint16_t x, uint16_t y, OLED_COLOR_t color) {
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	80fb      	strh	r3, [r7, #6]
 8000a8e:	460b      	mov	r3, r1
 8000a90:	80bb      	strh	r3, [r7, #4]
 8000a92:	4613      	mov	r3, r2
 8000a94:	70fb      	strb	r3, [r7, #3]
	if (
 8000a96:	88fb      	ldrh	r3, [r7, #6]
 8000a98:	2b7f      	cmp	r3, #127	; 0x7f
 8000a9a:	d848      	bhi.n	8000b2e <OLED_DrawPixel+0xaa>
		x >= OLED_WIDTH ||
 8000a9c:	88bb      	ldrh	r3, [r7, #4]
 8000a9e:	2b3f      	cmp	r3, #63	; 0x3f
 8000aa0:	d845      	bhi.n	8000b2e <OLED_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (OLED.Inverted) {
 8000aa2:	4b26      	ldr	r3, [pc, #152]	; (8000b3c <OLED_DrawPixel+0xb8>)
 8000aa4:	791b      	ldrb	r3, [r3, #4]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d006      	beq.n	8000ab8 <OLED_DrawPixel+0x34>
		color = (OLED_COLOR_t)!color;
 8000aaa:	78fb      	ldrb	r3, [r7, #3]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	bf0c      	ite	eq
 8000ab0:	2301      	moveq	r3, #1
 8000ab2:	2300      	movne	r3, #0
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == OLED_COLOR_WHITE) {
 8000ab8:	78fb      	ldrb	r3, [r7, #3]
 8000aba:	2b01      	cmp	r3, #1
 8000abc:	d11a      	bne.n	8000af4 <OLED_DrawPixel+0x70>
		OLED_Buffer[x + (y / 8) * OLED_WIDTH] |= 1 << (y % 8);
 8000abe:	88fa      	ldrh	r2, [r7, #6]
 8000ac0:	88bb      	ldrh	r3, [r7, #4]
 8000ac2:	08db      	lsrs	r3, r3, #3
 8000ac4:	b298      	uxth	r0, r3
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	01db      	lsls	r3, r3, #7
 8000aca:	4413      	add	r3, r2
 8000acc:	4a1c      	ldr	r2, [pc, #112]	; (8000b40 <OLED_DrawPixel+0xbc>)
 8000ace:	5cd3      	ldrb	r3, [r2, r3]
 8000ad0:	b25a      	sxtb	r2, r3
 8000ad2:	88bb      	ldrh	r3, [r7, #4]
 8000ad4:	f003 0307 	and.w	r3, r3, #7
 8000ad8:	2101      	movs	r1, #1
 8000ada:	fa01 f303 	lsl.w	r3, r1, r3
 8000ade:	b25b      	sxtb	r3, r3
 8000ae0:	4313      	orrs	r3, r2
 8000ae2:	b259      	sxtb	r1, r3
 8000ae4:	88fa      	ldrh	r2, [r7, #6]
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	01db      	lsls	r3, r3, #7
 8000aea:	4413      	add	r3, r2
 8000aec:	b2c9      	uxtb	r1, r1
 8000aee:	4a14      	ldr	r2, [pc, #80]	; (8000b40 <OLED_DrawPixel+0xbc>)
 8000af0:	54d1      	strb	r1, [r2, r3]
 8000af2:	e01d      	b.n	8000b30 <OLED_DrawPixel+0xac>
	} else {
		OLED_Buffer[x + (y / 8) * OLED_WIDTH] &= ~(1 << (y % 8));
 8000af4:	88fa      	ldrh	r2, [r7, #6]
 8000af6:	88bb      	ldrh	r3, [r7, #4]
 8000af8:	08db      	lsrs	r3, r3, #3
 8000afa:	b298      	uxth	r0, r3
 8000afc:	4603      	mov	r3, r0
 8000afe:	01db      	lsls	r3, r3, #7
 8000b00:	4413      	add	r3, r2
 8000b02:	4a0f      	ldr	r2, [pc, #60]	; (8000b40 <OLED_DrawPixel+0xbc>)
 8000b04:	5cd3      	ldrb	r3, [r2, r3]
 8000b06:	b25a      	sxtb	r2, r3
 8000b08:	88bb      	ldrh	r3, [r7, #4]
 8000b0a:	f003 0307 	and.w	r3, r3, #7
 8000b0e:	2101      	movs	r1, #1
 8000b10:	fa01 f303 	lsl.w	r3, r1, r3
 8000b14:	b25b      	sxtb	r3, r3
 8000b16:	43db      	mvns	r3, r3
 8000b18:	b25b      	sxtb	r3, r3
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	b259      	sxtb	r1, r3
 8000b1e:	88fa      	ldrh	r2, [r7, #6]
 8000b20:	4603      	mov	r3, r0
 8000b22:	01db      	lsls	r3, r3, #7
 8000b24:	4413      	add	r3, r2
 8000b26:	b2c9      	uxtb	r1, r1
 8000b28:	4a05      	ldr	r2, [pc, #20]	; (8000b40 <OLED_DrawPixel+0xbc>)
 8000b2a:	54d1      	strb	r1, [r2, r3]
 8000b2c:	e000      	b.n	8000b30 <OLED_DrawPixel+0xac>
		return;
 8000b2e:	bf00      	nop
	}
}
 8000b30:	370c      	adds	r7, #12
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	200004d8 	.word	0x200004d8
 8000b40:	200000d8 	.word	0x200000d8

08000b44 <OLED_SetCursor>:

void OLED_SetCursor(uint16_t x, uint16_t y) {
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	460a      	mov	r2, r1
 8000b4e:	80fb      	strh	r3, [r7, #6]
 8000b50:	4613      	mov	r3, r2
 8000b52:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	OLED.CurrentX = x;
 8000b54:	4a05      	ldr	r2, [pc, #20]	; (8000b6c <OLED_SetCursor+0x28>)
 8000b56:	88fb      	ldrh	r3, [r7, #6]
 8000b58:	8013      	strh	r3, [r2, #0]
	OLED.CurrentY = y;
 8000b5a:	4a04      	ldr	r2, [pc, #16]	; (8000b6c <OLED_SetCursor+0x28>)
 8000b5c:	88bb      	ldrh	r3, [r7, #4]
 8000b5e:	8053      	strh	r3, [r2, #2]
}
 8000b60:	bf00      	nop
 8000b62:	370c      	adds	r7, #12
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr
 8000b6c:	200004d8 	.word	0x200004d8

08000b70 <OLED_ShowChar>:

char OLED_ShowChar(char ch, FontDef_t* Font, OLED_COLOR_t color) {
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b086      	sub	sp, #24
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	6039      	str	r1, [r7, #0]
 8000b7a:	71fb      	strb	r3, [r7, #7]
 8000b7c:	4613      	mov	r3, r2
 8000b7e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
			OLED_WIDTH <= (OLED.CurrentX + Font->FontWidth) ||
 8000b80:	4b3a      	ldr	r3, [pc, #232]	; (8000c6c <OLED_ShowChar+0xfc>)
 8000b82:	881b      	ldrh	r3, [r3, #0]
 8000b84:	461a      	mov	r2, r3
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	4413      	add	r3, r2
	if (
 8000b8c:	2b7f      	cmp	r3, #127	; 0x7f
 8000b8e:	dc07      	bgt.n	8000ba0 <OLED_ShowChar+0x30>
			OLED_HEIGHT <= (OLED.CurrentY + Font->FontHeight)
 8000b90:	4b36      	ldr	r3, [pc, #216]	; (8000c6c <OLED_ShowChar+0xfc>)
 8000b92:	885b      	ldrh	r3, [r3, #2]
 8000b94:	461a      	mov	r2, r3
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	785b      	ldrb	r3, [r3, #1]
 8000b9a:	4413      	add	r3, r2
			OLED_WIDTH <= (OLED.CurrentX + Font->FontWidth) ||
 8000b9c:	2b3f      	cmp	r3, #63	; 0x3f
 8000b9e:	dd01      	ble.n	8000ba4 <OLED_ShowChar+0x34>
	) {
		/* Error */
		return 0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	e05e      	b.n	8000c62 <OLED_ShowChar+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	617b      	str	r3, [r7, #20]
 8000ba8:	e04b      	b.n	8000c42 <OLED_ShowChar+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	685a      	ldr	r2, [r3, #4]
 8000bae:	79fb      	ldrb	r3, [r7, #7]
 8000bb0:	3b20      	subs	r3, #32
 8000bb2:	6839      	ldr	r1, [r7, #0]
 8000bb4:	7849      	ldrb	r1, [r1, #1]
 8000bb6:	fb01 f303 	mul.w	r3, r1, r3
 8000bba:	4619      	mov	r1, r3
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	440b      	add	r3, r1
 8000bc0:	005b      	lsls	r3, r3, #1
 8000bc2:	4413      	add	r3, r2
 8000bc4:	881b      	ldrh	r3, [r3, #0]
 8000bc6:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000bc8:	2300      	movs	r3, #0
 8000bca:	613b      	str	r3, [r7, #16]
 8000bcc:	e030      	b.n	8000c30 <OLED_ShowChar+0xc0>
			if ((b << j) & 0x8000) {
 8000bce:	68fa      	ldr	r2, [r7, #12]
 8000bd0:	693b      	ldr	r3, [r7, #16]
 8000bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d010      	beq.n	8000c00 <OLED_ShowChar+0x90>
				OLED_DrawPixel(OLED.CurrentX + j, (OLED.CurrentY + i), (OLED_COLOR_t) color);
 8000bde:	4b23      	ldr	r3, [pc, #140]	; (8000c6c <OLED_ShowChar+0xfc>)
 8000be0:	881a      	ldrh	r2, [r3, #0]
 8000be2:	693b      	ldr	r3, [r7, #16]
 8000be4:	b29b      	uxth	r3, r3
 8000be6:	4413      	add	r3, r2
 8000be8:	b298      	uxth	r0, r3
 8000bea:	4b20      	ldr	r3, [pc, #128]	; (8000c6c <OLED_ShowChar+0xfc>)
 8000bec:	885a      	ldrh	r2, [r3, #2]
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	b29b      	uxth	r3, r3
 8000bf2:	4413      	add	r3, r2
 8000bf4:	b29b      	uxth	r3, r3
 8000bf6:	79ba      	ldrb	r2, [r7, #6]
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	f7ff ff43 	bl	8000a84 <OLED_DrawPixel>
 8000bfe:	e014      	b.n	8000c2a <OLED_ShowChar+0xba>
			} else {
				OLED_DrawPixel(OLED.CurrentX + j, (OLED.CurrentY + i), (OLED_COLOR_t)!color);
 8000c00:	4b1a      	ldr	r3, [pc, #104]	; (8000c6c <OLED_ShowChar+0xfc>)
 8000c02:	881a      	ldrh	r2, [r3, #0]
 8000c04:	693b      	ldr	r3, [r7, #16]
 8000c06:	b29b      	uxth	r3, r3
 8000c08:	4413      	add	r3, r2
 8000c0a:	b298      	uxth	r0, r3
 8000c0c:	4b17      	ldr	r3, [pc, #92]	; (8000c6c <OLED_ShowChar+0xfc>)
 8000c0e:	885a      	ldrh	r2, [r3, #2]
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	b29b      	uxth	r3, r3
 8000c14:	4413      	add	r3, r2
 8000c16:	b299      	uxth	r1, r3
 8000c18:	79bb      	ldrb	r3, [r7, #6]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	bf0c      	ite	eq
 8000c1e:	2301      	moveq	r3, #1
 8000c20:	2300      	movne	r3, #0
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	461a      	mov	r2, r3
 8000c26:	f7ff ff2d 	bl	8000a84 <OLED_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000c2a:	693b      	ldr	r3, [r7, #16]
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	613b      	str	r3, [r7, #16]
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	461a      	mov	r2, r3
 8000c36:	693b      	ldr	r3, [r7, #16]
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d3c8      	bcc.n	8000bce <OLED_ShowChar+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	3301      	adds	r3, #1
 8000c40:	617b      	str	r3, [r7, #20]
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	785b      	ldrb	r3, [r3, #1]
 8000c46:	461a      	mov	r2, r3
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d3ad      	bcc.n	8000baa <OLED_ShowChar+0x3a>
			}
		}
	}

	/* Increase pointer */
	OLED.CurrentX += Font->FontWidth;
 8000c4e:	4b07      	ldr	r3, [pc, #28]	; (8000c6c <OLED_ShowChar+0xfc>)
 8000c50:	881a      	ldrh	r2, [r3, #0]
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	b29b      	uxth	r3, r3
 8000c58:	4413      	add	r3, r2
 8000c5a:	b29a      	uxth	r2, r3
 8000c5c:	4b03      	ldr	r3, [pc, #12]	; (8000c6c <OLED_ShowChar+0xfc>)
 8000c5e:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8000c60:	79fb      	ldrb	r3, [r7, #7]
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3718      	adds	r7, #24
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	200004d8 	.word	0x200004d8

08000c70 <OLED_ShowString>:

char OLED_ShowString(uint16_t x, uint16_t y, char* str, FontDef_t* Font) {
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	60ba      	str	r2, [r7, #8]
 8000c78:	607b      	str	r3, [r7, #4]
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	81fb      	strh	r3, [r7, #14]
 8000c7e:	460b      	mov	r3, r1
 8000c80:	81bb      	strh	r3, [r7, #12]
	OLED_SetCursor(x, y);
 8000c82:	89ba      	ldrh	r2, [r7, #12]
 8000c84:	89fb      	ldrh	r3, [r7, #14]
 8000c86:	4611      	mov	r1, r2
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff ff5b 	bl	8000b44 <OLED_SetCursor>

	/* Write characters */
	while (*str) {
 8000c8e:	e012      	b.n	8000cb6 <OLED_ShowString+0x46>
		/* Write character by character */
		if (OLED_ShowChar(*str, Font, OLED_COLOR_WHITE) != *str) {
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	2201      	movs	r2, #1
 8000c96:	6879      	ldr	r1, [r7, #4]
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff ff69 	bl	8000b70 <OLED_ShowChar>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	68bb      	ldr	r3, [r7, #8]
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	429a      	cmp	r2, r3
 8000ca8:	d002      	beq.n	8000cb0 <OLED_ShowString+0x40>
			/* Return error */
			return *str;
 8000caa:	68bb      	ldr	r3, [r7, #8]
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	e00a      	b.n	8000cc6 <OLED_ShowString+0x56>
		}

		/* Increase string pointer */
		str++;
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	60bb      	str	r3, [r7, #8]
	while (*str) {
 8000cb6:	68bb      	ldr	r3, [r7, #8]
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d1e8      	bne.n	8000c90 <OLED_ShowString+0x20>
	}

	OLED_UpdateScreen();
 8000cbe:	f7ff fe9b 	bl	80009f8 <OLED_UpdateScreen>

	/* Everything OK, zero should be returned */
	return *str;
 8000cc2:	68bb      	ldr	r3, [r7, #8]
 8000cc4:	781b      	ldrb	r3, [r3, #0]
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3710      	adds	r7, #16
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
	...

08000cd0 <OLED_ShowNum>:

void OLED_ShowNum(uint16_t x, uint16_t y, uint32_t Number, FontDef_t* Font)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b088      	sub	sp, #32
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	60ba      	str	r2, [r7, #8]
 8000cd8:	607b      	str	r3, [r7, #4]
 8000cda:	4603      	mov	r3, r0
 8000cdc:	81fb      	strh	r3, [r7, #14]
 8000cde:	460b      	mov	r3, r1
 8000ce0:	81bb      	strh	r3, [r7, #12]
	char str[12];
	snprintf(str, sizeof(str), "%lu", Number);
 8000ce2:	f107 0014 	add.w	r0, r7, #20
 8000ce6:	68bb      	ldr	r3, [r7, #8]
 8000ce8:	4a07      	ldr	r2, [pc, #28]	; (8000d08 <OLED_ShowNum+0x38>)
 8000cea:	210c      	movs	r1, #12
 8000cec:	f001 fffe 	bl	8002cec <sniprintf>
	OLED_ShowString(x, y, str, Font);
 8000cf0:	f107 0214 	add.w	r2, r7, #20
 8000cf4:	89b9      	ldrh	r1, [r7, #12]
 8000cf6:	89f8      	ldrh	r0, [r7, #14]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	f7ff ffb9 	bl	8000c70 <OLED_ShowString>
}
 8000cfe:	bf00      	nop
 8000d00:	3720      	adds	r7, #32
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	08003680 	.word	0x08003680

08000d0c <OLED_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void OLED_I2C_Init() {
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000d12:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <OLED_I2C_Init+0x28>)
 8000d14:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000d16:	e002      	b.n	8000d1e <OLED_I2C_Init+0x12>
		p--;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	3b01      	subs	r3, #1
 8000d1c:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d1f9      	bne.n	8000d18 <OLED_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000d24:	bf00      	nop
 8000d26:	bf00      	nop
 8000d28:	370c      	adds	r7, #12
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	0003d090 	.word	0x0003d090

08000d38 <OLED_I2C_WriteMulti>:

void OLED_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000d38:	b590      	push	{r4, r7, lr}
 8000d3a:	b0c7      	sub	sp, #284	; 0x11c
 8000d3c:	af02      	add	r7, sp, #8
 8000d3e:	4604      	mov	r4, r0
 8000d40:	4608      	mov	r0, r1
 8000d42:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8000d46:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8000d4a:	600a      	str	r2, [r1, #0]
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000d52:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000d56:	4622      	mov	r2, r4
 8000d58:	701a      	strb	r2, [r3, #0]
 8000d5a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000d5e:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8000d62:	4602      	mov	r2, r0
 8000d64:	701a      	strb	r2, [r3, #0]
 8000d66:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000d6a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000d6e:	460a      	mov	r2, r1
 8000d70:	801a      	strh	r2, [r3, #0]
	uint8_t dt[256];
	dt[0] = reg;
 8000d72:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000d76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000d7a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000d7e:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8000d82:	7812      	ldrb	r2, [r2, #0]
 8000d84:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 0; i < count; i++)
 8000d86:	2300      	movs	r3, #0
 8000d88:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000d8c:	e015      	b.n	8000dba <OLED_I2C_WriteMulti+0x82>
		dt[i+1] = data[i];
 8000d8e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000d92:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000d96:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8000d9a:	6812      	ldr	r2, [r2, #0]
 8000d9c:	441a      	add	r2, r3
 8000d9e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000da2:	3301      	adds	r3, #1
 8000da4:	7811      	ldrb	r1, [r2, #0]
 8000da6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000daa:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8000dae:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < count; i++)
 8000db0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000db4:	3301      	adds	r3, #1
 8000db6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000dba:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000dbe:	b29b      	uxth	r3, r3
 8000dc0:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000dc4:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000dc8:	8812      	ldrh	r2, [r2, #0]
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	d8df      	bhi.n	8000d8e <OLED_I2C_WriteMulti+0x56>
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8000dce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000dd2:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	b299      	uxth	r1, r3
 8000dda:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000dde:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000de2:	881b      	ldrh	r3, [r3, #0]
 8000de4:	3301      	adds	r3, #1
 8000de6:	b29b      	uxth	r3, r3
 8000de8:	f107 020c 	add.w	r2, r7, #12
 8000dec:	200a      	movs	r0, #10
 8000dee:	9000      	str	r0, [sp, #0]
 8000df0:	4803      	ldr	r0, [pc, #12]	; (8000e00 <OLED_I2C_WriteMulti+0xc8>)
 8000df2:	f000 fde5 	bl	80019c0 <HAL_I2C_Master_Transmit>
}
 8000df6:	bf00      	nop
 8000df8:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd90      	pop	{r4, r7, pc}
 8000e00:	20000084 	.word	0x20000084

08000e04 <OLED_I2C_Write>:


void OLED_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b086      	sub	sp, #24
 8000e08:	af02      	add	r7, sp, #8
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	71fb      	strb	r3, [r7, #7]
 8000e0e:	460b      	mov	r3, r1
 8000e10:	71bb      	strb	r3, [r7, #6]
 8000e12:	4613      	mov	r3, r2
 8000e14:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000e16:	79bb      	ldrb	r3, [r7, #6]
 8000e18:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000e1a:	797b      	ldrb	r3, [r7, #5]
 8000e1c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8000e1e:	79fb      	ldrb	r3, [r7, #7]
 8000e20:	b299      	uxth	r1, r3
 8000e22:	f107 020c 	add.w	r2, r7, #12
 8000e26:	230a      	movs	r3, #10
 8000e28:	9300      	str	r3, [sp, #0]
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	4803      	ldr	r0, [pc, #12]	; (8000e3c <OLED_I2C_Write+0x38>)
 8000e2e:	f000 fdc7 	bl	80019c0 <HAL_I2C_Master_Transmit>
}
 8000e32:	bf00      	nop
 8000e34:	3710      	adds	r7, #16
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20000084 	.word	0x20000084

08000e40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	607b      	str	r3, [r7, #4]
 8000e4a:	4b10      	ldr	r3, [pc, #64]	; (8000e8c <HAL_MspInit+0x4c>)
 8000e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4e:	4a0f      	ldr	r2, [pc, #60]	; (8000e8c <HAL_MspInit+0x4c>)
 8000e50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e54:	6453      	str	r3, [r2, #68]	; 0x44
 8000e56:	4b0d      	ldr	r3, [pc, #52]	; (8000e8c <HAL_MspInit+0x4c>)
 8000e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e5e:	607b      	str	r3, [r7, #4]
 8000e60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	603b      	str	r3, [r7, #0]
 8000e66:	4b09      	ldr	r3, [pc, #36]	; (8000e8c <HAL_MspInit+0x4c>)
 8000e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6a:	4a08      	ldr	r2, [pc, #32]	; (8000e8c <HAL_MspInit+0x4c>)
 8000e6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e70:	6413      	str	r3, [r2, #64]	; 0x40
 8000e72:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <HAL_MspInit+0x4c>)
 8000e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e7a:	603b      	str	r3, [r7, #0]
 8000e7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	370c      	adds	r7, #12
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	40023800 	.word	0x40023800

08000e90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e94:	e7fe      	b.n	8000e94 <NMI_Handler+0x4>

08000e96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e96:	b480      	push	{r7}
 8000e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e9a:	e7fe      	b.n	8000e9a <HardFault_Handler+0x4>

08000e9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ea0:	e7fe      	b.n	8000ea0 <MemManage_Handler+0x4>

08000ea2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ea6:	e7fe      	b.n	8000ea6 <BusFault_Handler+0x4>

08000ea8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eac:	e7fe      	b.n	8000eac <UsageFault_Handler+0x4>

08000eae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr

08000eca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr

08000ed8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000edc:	f000 f8ee 	bl	80010bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ee0:	bf00      	nop
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_11) != RESET) {
 8000eea:	4b10      	ldr	r3, [pc, #64]	; (8000f2c <EXTI15_10_IRQHandler+0x48>)
 8000eec:	695b      	ldr	r3, [r3, #20]
 8000eee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d012      	beq.n	8000f1c <EXTI15_10_IRQHandler+0x38>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_11);
 8000ef6:	4b0d      	ldr	r3, [pc, #52]	; (8000f2c <EXTI15_10_IRQHandler+0x48>)
 8000ef8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000efc:	615a      	str	r2, [r3, #20]
		HAL_Delay(1);
 8000efe:	2001      	movs	r0, #1
 8000f00:	f000 f8fc 	bl	80010fc <HAL_Delay>
		GPIO_PinState num = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11);
 8000f04:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f08:	4809      	ldr	r0, [pc, #36]	; (8000f30 <EXTI15_10_IRQHandler+0x4c>)
 8000f0a:	f000 fbd9 	bl	80016c0 <HAL_GPIO_ReadPin>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	71fb      	strb	r3, [r7, #7]
		if (num == GPIO_PIN_SET) {
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d101      	bne.n	8000f1c <EXTI15_10_IRQHandler+0x38>
			Plus_One();
 8000f18:	f7ff fb44 	bl	80005a4 <Plus_One>
		}
	}

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8000f1c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000f20:	f000 fbe6 	bl	80016f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f24:	bf00      	nop
 8000f26:	3708      	adds	r7, #8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	40013c00 	.word	0x40013c00
 8000f30:	40020400 	.word	0x40020400

08000f34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b086      	sub	sp, #24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f3c:	4a14      	ldr	r2, [pc, #80]	; (8000f90 <_sbrk+0x5c>)
 8000f3e:	4b15      	ldr	r3, [pc, #84]	; (8000f94 <_sbrk+0x60>)
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f48:	4b13      	ldr	r3, [pc, #76]	; (8000f98 <_sbrk+0x64>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d102      	bne.n	8000f56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f50:	4b11      	ldr	r3, [pc, #68]	; (8000f98 <_sbrk+0x64>)
 8000f52:	4a12      	ldr	r2, [pc, #72]	; (8000f9c <_sbrk+0x68>)
 8000f54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f56:	4b10      	ldr	r3, [pc, #64]	; (8000f98 <_sbrk+0x64>)
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d207      	bcs.n	8000f74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f64:	f001 fefe 	bl	8002d64 <__errno>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	220c      	movs	r2, #12
 8000f6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f72:	e009      	b.n	8000f88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f74:	4b08      	ldr	r3, [pc, #32]	; (8000f98 <_sbrk+0x64>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f7a:	4b07      	ldr	r3, [pc, #28]	; (8000f98 <_sbrk+0x64>)
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4413      	add	r3, r2
 8000f82:	4a05      	ldr	r2, [pc, #20]	; (8000f98 <_sbrk+0x64>)
 8000f84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f86:	68fb      	ldr	r3, [r7, #12]
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3718      	adds	r7, #24
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	20030000 	.word	0x20030000
 8000f94:	00000400 	.word	0x00000400
 8000f98:	200004e0 	.word	0x200004e0
 8000f9c:	20000630 	.word	0x20000630

08000fa0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fa4:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <SystemInit+0x20>)
 8000fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000faa:	4a05      	ldr	r2, [pc, #20]	; (8000fc0 <SystemInit+0x20>)
 8000fac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	e000ed00 	.word	0xe000ed00

08000fc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000fc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ffc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fc8:	f7ff ffea 	bl	8000fa0 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fcc:	480c      	ldr	r0, [pc, #48]	; (8001000 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fce:	490d      	ldr	r1, [pc, #52]	; (8001004 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fd0:	4a0d      	ldr	r2, [pc, #52]	; (8001008 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fd4:	e002      	b.n	8000fdc <LoopCopyDataInit>

08000fd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fda:	3304      	adds	r3, #4

08000fdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fe0:	d3f9      	bcc.n	8000fd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fe2:	4a0a      	ldr	r2, [pc, #40]	; (800100c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fe4:	4c0a      	ldr	r4, [pc, #40]	; (8001010 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fe6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fe8:	e001      	b.n	8000fee <LoopFillZerobss>

08000fea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fec:	3204      	adds	r2, #4

08000fee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ff0:	d3fb      	bcc.n	8000fea <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000ff2:	f001 febd 	bl	8002d70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ff6:	f7ff fba1 	bl	800073c <main>
  bx  lr    
 8000ffa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000ffc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001000:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001004:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001008:	08004a34 	.word	0x08004a34
  ldr r2, =_sbss
 800100c:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001010:	20000630 	.word	0x20000630

08001014 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001014:	e7fe      	b.n	8001014 <ADC_IRQHandler>
	...

08001018 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800101c:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <HAL_Init+0x40>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a0d      	ldr	r2, [pc, #52]	; (8001058 <HAL_Init+0x40>)
 8001022:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001026:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001028:	4b0b      	ldr	r3, [pc, #44]	; (8001058 <HAL_Init+0x40>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a0a      	ldr	r2, [pc, #40]	; (8001058 <HAL_Init+0x40>)
 800102e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001032:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001034:	4b08      	ldr	r3, [pc, #32]	; (8001058 <HAL_Init+0x40>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a07      	ldr	r2, [pc, #28]	; (8001058 <HAL_Init+0x40>)
 800103a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800103e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001040:	2003      	movs	r0, #3
 8001042:	f000 f94f 	bl	80012e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001046:	2005      	movs	r0, #5
 8001048:	f000 f808 	bl	800105c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800104c:	f7ff fef8 	bl	8000e40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001050:	2300      	movs	r3, #0
}
 8001052:	4618      	mov	r0, r3
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40023c00 	.word	0x40023c00

0800105c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001064:	4b12      	ldr	r3, [pc, #72]	; (80010b0 <HAL_InitTick+0x54>)
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	4b12      	ldr	r3, [pc, #72]	; (80010b4 <HAL_InitTick+0x58>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	4619      	mov	r1, r3
 800106e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001072:	fbb3 f3f1 	udiv	r3, r3, r1
 8001076:	fbb2 f3f3 	udiv	r3, r2, r3
 800107a:	4618      	mov	r0, r3
 800107c:	f000 f967 	bl	800134e <HAL_SYSTICK_Config>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e00e      	b.n	80010a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2b0f      	cmp	r3, #15
 800108e:	d80a      	bhi.n	80010a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001090:	2200      	movs	r2, #0
 8001092:	6879      	ldr	r1, [r7, #4]
 8001094:	f04f 30ff 	mov.w	r0, #4294967295
 8001098:	f000 f92f 	bl	80012fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800109c:	4a06      	ldr	r2, [pc, #24]	; (80010b8 <HAL_InitTick+0x5c>)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010a2:	2300      	movs	r3, #0
 80010a4:	e000      	b.n	80010a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	20000008 	.word	0x20000008
 80010b4:	20000010 	.word	0x20000010
 80010b8:	2000000c 	.word	0x2000000c

080010bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010c0:	4b06      	ldr	r3, [pc, #24]	; (80010dc <HAL_IncTick+0x20>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	461a      	mov	r2, r3
 80010c6:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <HAL_IncTick+0x24>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4413      	add	r3, r2
 80010cc:	4a04      	ldr	r2, [pc, #16]	; (80010e0 <HAL_IncTick+0x24>)
 80010ce:	6013      	str	r3, [r2, #0]
}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	20000010 	.word	0x20000010
 80010e0:	200004e4 	.word	0x200004e4

080010e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  return uwTick;
 80010e8:	4b03      	ldr	r3, [pc, #12]	; (80010f8 <HAL_GetTick+0x14>)
 80010ea:	681b      	ldr	r3, [r3, #0]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	200004e4 	.word	0x200004e4

080010fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001104:	f7ff ffee 	bl	80010e4 <HAL_GetTick>
 8001108:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001114:	d005      	beq.n	8001122 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001116:	4b0a      	ldr	r3, [pc, #40]	; (8001140 <HAL_Delay+0x44>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	461a      	mov	r2, r3
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	4413      	add	r3, r2
 8001120:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001122:	bf00      	nop
 8001124:	f7ff ffde 	bl	80010e4 <HAL_GetTick>
 8001128:	4602      	mov	r2, r0
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	68fa      	ldr	r2, [r7, #12]
 8001130:	429a      	cmp	r2, r3
 8001132:	d8f7      	bhi.n	8001124 <HAL_Delay+0x28>
  {
  }
}
 8001134:	bf00      	nop
 8001136:	bf00      	nop
 8001138:	3710      	adds	r7, #16
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	20000010 	.word	0x20000010

08001144 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f003 0307 	and.w	r3, r3, #7
 8001152:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001154:	4b0c      	ldr	r3, [pc, #48]	; (8001188 <__NVIC_SetPriorityGrouping+0x44>)
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800115a:	68ba      	ldr	r2, [r7, #8]
 800115c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001160:	4013      	ands	r3, r2
 8001162:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800116c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001170:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001174:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001176:	4a04      	ldr	r2, [pc, #16]	; (8001188 <__NVIC_SetPriorityGrouping+0x44>)
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	60d3      	str	r3, [r2, #12]
}
 800117c:	bf00      	nop
 800117e:	3714      	adds	r7, #20
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	e000ed00 	.word	0xe000ed00

0800118c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001190:	4b04      	ldr	r3, [pc, #16]	; (80011a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	0a1b      	lsrs	r3, r3, #8
 8001196:	f003 0307 	and.w	r3, r3, #7
}
 800119a:	4618      	mov	r0, r3
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	db0b      	blt.n	80011d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	f003 021f 	and.w	r2, r3, #31
 80011c0:	4907      	ldr	r1, [pc, #28]	; (80011e0 <__NVIC_EnableIRQ+0x38>)
 80011c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c6:	095b      	lsrs	r3, r3, #5
 80011c8:	2001      	movs	r0, #1
 80011ca:	fa00 f202 	lsl.w	r2, r0, r2
 80011ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011d2:	bf00      	nop
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	e000e100 	.word	0xe000e100

080011e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	6039      	str	r1, [r7, #0]
 80011ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	db0a      	blt.n	800120e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	b2da      	uxtb	r2, r3
 80011fc:	490c      	ldr	r1, [pc, #48]	; (8001230 <__NVIC_SetPriority+0x4c>)
 80011fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001202:	0112      	lsls	r2, r2, #4
 8001204:	b2d2      	uxtb	r2, r2
 8001206:	440b      	add	r3, r1
 8001208:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800120c:	e00a      	b.n	8001224 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	b2da      	uxtb	r2, r3
 8001212:	4908      	ldr	r1, [pc, #32]	; (8001234 <__NVIC_SetPriority+0x50>)
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	f003 030f 	and.w	r3, r3, #15
 800121a:	3b04      	subs	r3, #4
 800121c:	0112      	lsls	r2, r2, #4
 800121e:	b2d2      	uxtb	r2, r2
 8001220:	440b      	add	r3, r1
 8001222:	761a      	strb	r2, [r3, #24]
}
 8001224:	bf00      	nop
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	e000e100 	.word	0xe000e100
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001238:	b480      	push	{r7}
 800123a:	b089      	sub	sp, #36	; 0x24
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	f003 0307 	and.w	r3, r3, #7
 800124a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	f1c3 0307 	rsb	r3, r3, #7
 8001252:	2b04      	cmp	r3, #4
 8001254:	bf28      	it	cs
 8001256:	2304      	movcs	r3, #4
 8001258:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	3304      	adds	r3, #4
 800125e:	2b06      	cmp	r3, #6
 8001260:	d902      	bls.n	8001268 <NVIC_EncodePriority+0x30>
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	3b03      	subs	r3, #3
 8001266:	e000      	b.n	800126a <NVIC_EncodePriority+0x32>
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800126c:	f04f 32ff 	mov.w	r2, #4294967295
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	43da      	mvns	r2, r3
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	401a      	ands	r2, r3
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001280:	f04f 31ff 	mov.w	r1, #4294967295
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	fa01 f303 	lsl.w	r3, r1, r3
 800128a:	43d9      	mvns	r1, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001290:	4313      	orrs	r3, r2
         );
}
 8001292:	4618      	mov	r0, r3
 8001294:	3724      	adds	r7, #36	; 0x24
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
	...

080012a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	3b01      	subs	r3, #1
 80012ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012b0:	d301      	bcc.n	80012b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012b2:	2301      	movs	r3, #1
 80012b4:	e00f      	b.n	80012d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012b6:	4a0a      	ldr	r2, [pc, #40]	; (80012e0 <SysTick_Config+0x40>)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	3b01      	subs	r3, #1
 80012bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012be:	210f      	movs	r1, #15
 80012c0:	f04f 30ff 	mov.w	r0, #4294967295
 80012c4:	f7ff ff8e 	bl	80011e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012c8:	4b05      	ldr	r3, [pc, #20]	; (80012e0 <SysTick_Config+0x40>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ce:	4b04      	ldr	r3, [pc, #16]	; (80012e0 <SysTick_Config+0x40>)
 80012d0:	2207      	movs	r2, #7
 80012d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	e000e010 	.word	0xe000e010

080012e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f7ff ff29 	bl	8001144 <__NVIC_SetPriorityGrouping>
}
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b086      	sub	sp, #24
 80012fe:	af00      	add	r7, sp, #0
 8001300:	4603      	mov	r3, r0
 8001302:	60b9      	str	r1, [r7, #8]
 8001304:	607a      	str	r2, [r7, #4]
 8001306:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001308:	2300      	movs	r3, #0
 800130a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800130c:	f7ff ff3e 	bl	800118c <__NVIC_GetPriorityGrouping>
 8001310:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	68b9      	ldr	r1, [r7, #8]
 8001316:	6978      	ldr	r0, [r7, #20]
 8001318:	f7ff ff8e 	bl	8001238 <NVIC_EncodePriority>
 800131c:	4602      	mov	r2, r0
 800131e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001322:	4611      	mov	r1, r2
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff ff5d 	bl	80011e4 <__NVIC_SetPriority>
}
 800132a:	bf00      	nop
 800132c:	3718      	adds	r7, #24
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b082      	sub	sp, #8
 8001336:	af00      	add	r7, sp, #0
 8001338:	4603      	mov	r3, r0
 800133a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800133c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff ff31 	bl	80011a8 <__NVIC_EnableIRQ>
}
 8001346:	bf00      	nop
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	b082      	sub	sp, #8
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f7ff ffa2 	bl	80012a0 <SysTick_Config>
 800135c:	4603      	mov	r3, r0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
	...

08001368 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001368:	b480      	push	{r7}
 800136a:	b089      	sub	sp, #36	; 0x24
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001372:	2300      	movs	r3, #0
 8001374:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001376:	2300      	movs	r3, #0
 8001378:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800137a:	2300      	movs	r3, #0
 800137c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800137e:	2300      	movs	r3, #0
 8001380:	61fb      	str	r3, [r7, #28]
 8001382:	e177      	b.n	8001674 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001384:	2201      	movs	r2, #1
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	697a      	ldr	r2, [r7, #20]
 8001394:	4013      	ands	r3, r2
 8001396:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	429a      	cmp	r2, r3
 800139e:	f040 8166 	bne.w	800166e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f003 0303 	and.w	r3, r3, #3
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d005      	beq.n	80013ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d130      	bne.n	800141c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	2203      	movs	r2, #3
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	43db      	mvns	r3, r3
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	4013      	ands	r3, r2
 80013d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	68da      	ldr	r2, [r3, #12]
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013f0:	2201      	movs	r2, #1
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	43db      	mvns	r3, r3
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	4013      	ands	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	091b      	lsrs	r3, r3, #4
 8001406:	f003 0201 	and.w	r2, r3, #1
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	4313      	orrs	r3, r2
 8001414:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f003 0303 	and.w	r3, r3, #3
 8001424:	2b03      	cmp	r3, #3
 8001426:	d017      	beq.n	8001458 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	2203      	movs	r2, #3
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	43db      	mvns	r3, r3
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	4013      	ands	r3, r2
 800143e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	689a      	ldr	r2, [r3, #8]
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	4313      	orrs	r3, r2
 8001450:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f003 0303 	and.w	r3, r3, #3
 8001460:	2b02      	cmp	r3, #2
 8001462:	d123      	bne.n	80014ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	08da      	lsrs	r2, r3, #3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	3208      	adds	r2, #8
 800146c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001470:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	f003 0307 	and.w	r3, r3, #7
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	220f      	movs	r2, #15
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	43db      	mvns	r3, r3
 8001482:	69ba      	ldr	r2, [r7, #24]
 8001484:	4013      	ands	r3, r2
 8001486:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	691a      	ldr	r2, [r3, #16]
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	f003 0307 	and.w	r3, r3, #7
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	4313      	orrs	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	08da      	lsrs	r2, r3, #3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	3208      	adds	r2, #8
 80014a6:	69b9      	ldr	r1, [r7, #24]
 80014a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	2203      	movs	r2, #3
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	43db      	mvns	r3, r3
 80014be:	69ba      	ldr	r2, [r7, #24]
 80014c0:	4013      	ands	r3, r2
 80014c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f003 0203 	and.w	r2, r3, #3
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	f000 80c0 	beq.w	800166e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	4b66      	ldr	r3, [pc, #408]	; (800168c <HAL_GPIO_Init+0x324>)
 80014f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f6:	4a65      	ldr	r2, [pc, #404]	; (800168c <HAL_GPIO_Init+0x324>)
 80014f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014fc:	6453      	str	r3, [r2, #68]	; 0x44
 80014fe:	4b63      	ldr	r3, [pc, #396]	; (800168c <HAL_GPIO_Init+0x324>)
 8001500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001502:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800150a:	4a61      	ldr	r2, [pc, #388]	; (8001690 <HAL_GPIO_Init+0x328>)
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	089b      	lsrs	r3, r3, #2
 8001510:	3302      	adds	r3, #2
 8001512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001516:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	f003 0303 	and.w	r3, r3, #3
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	220f      	movs	r2, #15
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	43db      	mvns	r3, r3
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	4013      	ands	r3, r2
 800152c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a58      	ldr	r2, [pc, #352]	; (8001694 <HAL_GPIO_Init+0x32c>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d037      	beq.n	80015a6 <HAL_GPIO_Init+0x23e>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a57      	ldr	r2, [pc, #348]	; (8001698 <HAL_GPIO_Init+0x330>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d031      	beq.n	80015a2 <HAL_GPIO_Init+0x23a>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a56      	ldr	r2, [pc, #344]	; (800169c <HAL_GPIO_Init+0x334>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d02b      	beq.n	800159e <HAL_GPIO_Init+0x236>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a55      	ldr	r2, [pc, #340]	; (80016a0 <HAL_GPIO_Init+0x338>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d025      	beq.n	800159a <HAL_GPIO_Init+0x232>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a54      	ldr	r2, [pc, #336]	; (80016a4 <HAL_GPIO_Init+0x33c>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d01f      	beq.n	8001596 <HAL_GPIO_Init+0x22e>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a53      	ldr	r2, [pc, #332]	; (80016a8 <HAL_GPIO_Init+0x340>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d019      	beq.n	8001592 <HAL_GPIO_Init+0x22a>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a52      	ldr	r2, [pc, #328]	; (80016ac <HAL_GPIO_Init+0x344>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d013      	beq.n	800158e <HAL_GPIO_Init+0x226>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a51      	ldr	r2, [pc, #324]	; (80016b0 <HAL_GPIO_Init+0x348>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d00d      	beq.n	800158a <HAL_GPIO_Init+0x222>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a50      	ldr	r2, [pc, #320]	; (80016b4 <HAL_GPIO_Init+0x34c>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d007      	beq.n	8001586 <HAL_GPIO_Init+0x21e>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a4f      	ldr	r2, [pc, #316]	; (80016b8 <HAL_GPIO_Init+0x350>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d101      	bne.n	8001582 <HAL_GPIO_Init+0x21a>
 800157e:	2309      	movs	r3, #9
 8001580:	e012      	b.n	80015a8 <HAL_GPIO_Init+0x240>
 8001582:	230a      	movs	r3, #10
 8001584:	e010      	b.n	80015a8 <HAL_GPIO_Init+0x240>
 8001586:	2308      	movs	r3, #8
 8001588:	e00e      	b.n	80015a8 <HAL_GPIO_Init+0x240>
 800158a:	2307      	movs	r3, #7
 800158c:	e00c      	b.n	80015a8 <HAL_GPIO_Init+0x240>
 800158e:	2306      	movs	r3, #6
 8001590:	e00a      	b.n	80015a8 <HAL_GPIO_Init+0x240>
 8001592:	2305      	movs	r3, #5
 8001594:	e008      	b.n	80015a8 <HAL_GPIO_Init+0x240>
 8001596:	2304      	movs	r3, #4
 8001598:	e006      	b.n	80015a8 <HAL_GPIO_Init+0x240>
 800159a:	2303      	movs	r3, #3
 800159c:	e004      	b.n	80015a8 <HAL_GPIO_Init+0x240>
 800159e:	2302      	movs	r3, #2
 80015a0:	e002      	b.n	80015a8 <HAL_GPIO_Init+0x240>
 80015a2:	2301      	movs	r3, #1
 80015a4:	e000      	b.n	80015a8 <HAL_GPIO_Init+0x240>
 80015a6:	2300      	movs	r3, #0
 80015a8:	69fa      	ldr	r2, [r7, #28]
 80015aa:	f002 0203 	and.w	r2, r2, #3
 80015ae:	0092      	lsls	r2, r2, #2
 80015b0:	4093      	lsls	r3, r2
 80015b2:	69ba      	ldr	r2, [r7, #24]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015b8:	4935      	ldr	r1, [pc, #212]	; (8001690 <HAL_GPIO_Init+0x328>)
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	089b      	lsrs	r3, r3, #2
 80015be:	3302      	adds	r3, #2
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015c6:	4b3d      	ldr	r3, [pc, #244]	; (80016bc <HAL_GPIO_Init+0x354>)
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	43db      	mvns	r3, r3
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	4013      	ands	r3, r2
 80015d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d003      	beq.n	80015ea <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80015e2:	69ba      	ldr	r2, [r7, #24]
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015ea:	4a34      	ldr	r2, [pc, #208]	; (80016bc <HAL_GPIO_Init+0x354>)
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015f0:	4b32      	ldr	r3, [pc, #200]	; (80016bc <HAL_GPIO_Init+0x354>)
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	43db      	mvns	r3, r3
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	4013      	ands	r3, r2
 80015fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001608:	2b00      	cmp	r3, #0
 800160a:	d003      	beq.n	8001614 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	4313      	orrs	r3, r2
 8001612:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001614:	4a29      	ldr	r2, [pc, #164]	; (80016bc <HAL_GPIO_Init+0x354>)
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800161a:	4b28      	ldr	r3, [pc, #160]	; (80016bc <HAL_GPIO_Init+0x354>)
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	43db      	mvns	r3, r3
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	4013      	ands	r3, r2
 8001628:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d003      	beq.n	800163e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	4313      	orrs	r3, r2
 800163c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800163e:	4a1f      	ldr	r2, [pc, #124]	; (80016bc <HAL_GPIO_Init+0x354>)
 8001640:	69bb      	ldr	r3, [r7, #24]
 8001642:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001644:	4b1d      	ldr	r3, [pc, #116]	; (80016bc <HAL_GPIO_Init+0x354>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	43db      	mvns	r3, r3
 800164e:	69ba      	ldr	r2, [r7, #24]
 8001650:	4013      	ands	r3, r2
 8001652:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800165c:	2b00      	cmp	r3, #0
 800165e:	d003      	beq.n	8001668 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	4313      	orrs	r3, r2
 8001666:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001668:	4a14      	ldr	r2, [pc, #80]	; (80016bc <HAL_GPIO_Init+0x354>)
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	3301      	adds	r3, #1
 8001672:	61fb      	str	r3, [r7, #28]
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	2b0f      	cmp	r3, #15
 8001678:	f67f ae84 	bls.w	8001384 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800167c:	bf00      	nop
 800167e:	bf00      	nop
 8001680:	3724      	adds	r7, #36	; 0x24
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	40023800 	.word	0x40023800
 8001690:	40013800 	.word	0x40013800
 8001694:	40020000 	.word	0x40020000
 8001698:	40020400 	.word	0x40020400
 800169c:	40020800 	.word	0x40020800
 80016a0:	40020c00 	.word	0x40020c00
 80016a4:	40021000 	.word	0x40021000
 80016a8:	40021400 	.word	0x40021400
 80016ac:	40021800 	.word	0x40021800
 80016b0:	40021c00 	.word	0x40021c00
 80016b4:	40022000 	.word	0x40022000
 80016b8:	40022400 	.word	0x40022400
 80016bc:	40013c00 	.word	0x40013c00

080016c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b085      	sub	sp, #20
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	460b      	mov	r3, r1
 80016ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	691a      	ldr	r2, [r3, #16]
 80016d0:	887b      	ldrh	r3, [r7, #2]
 80016d2:	4013      	ands	r3, r2
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d002      	beq.n	80016de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016d8:	2301      	movs	r3, #1
 80016da:	73fb      	strb	r3, [r7, #15]
 80016dc:	e001      	b.n	80016e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016de:	2300      	movs	r3, #0
 80016e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3714      	adds	r7, #20
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	4603      	mov	r3, r0
 80016f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80016fa:	4b08      	ldr	r3, [pc, #32]	; (800171c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016fc:	695a      	ldr	r2, [r3, #20]
 80016fe:	88fb      	ldrh	r3, [r7, #6]
 8001700:	4013      	ands	r3, r2
 8001702:	2b00      	cmp	r3, #0
 8001704:	d006      	beq.n	8001714 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001706:	4a05      	ldr	r2, [pc, #20]	; (800171c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001708:	88fb      	ldrh	r3, [r7, #6]
 800170a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800170c:	88fb      	ldrh	r3, [r7, #6]
 800170e:	4618      	mov	r0, r3
 8001710:	f000 f806 	bl	8001720 <HAL_GPIO_EXTI_Callback>
  }
}
 8001714:	bf00      	nop
 8001716:	3708      	adds	r7, #8
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	40013c00 	.word	0x40013c00

08001720 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	4603      	mov	r3, r0
 8001728:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800172a:	bf00      	nop
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
	...

08001738 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d101      	bne.n	800174a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e12b      	b.n	80019a2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001750:	b2db      	uxtb	r3, r3
 8001752:	2b00      	cmp	r3, #0
 8001754:	d106      	bne.n	8001764 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2200      	movs	r2, #0
 800175a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f7fe ffa4 	bl	80006ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2224      	movs	r2, #36	; 0x24
 8001768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f022 0201 	bic.w	r2, r2, #1
 800177a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800178a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800179a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800179c:	f001 fa92 	bl	8002cc4 <HAL_RCC_GetPCLK1Freq>
 80017a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	4a81      	ldr	r2, [pc, #516]	; (80019ac <HAL_I2C_Init+0x274>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d807      	bhi.n	80017bc <HAL_I2C_Init+0x84>
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	4a80      	ldr	r2, [pc, #512]	; (80019b0 <HAL_I2C_Init+0x278>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	bf94      	ite	ls
 80017b4:	2301      	movls	r3, #1
 80017b6:	2300      	movhi	r3, #0
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	e006      	b.n	80017ca <HAL_I2C_Init+0x92>
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	4a7d      	ldr	r2, [pc, #500]	; (80019b4 <HAL_I2C_Init+0x27c>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	bf94      	ite	ls
 80017c4:	2301      	movls	r3, #1
 80017c6:	2300      	movhi	r3, #0
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e0e7      	b.n	80019a2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	4a78      	ldr	r2, [pc, #480]	; (80019b8 <HAL_I2C_Init+0x280>)
 80017d6:	fba2 2303 	umull	r2, r3, r2, r3
 80017da:	0c9b      	lsrs	r3, r3, #18
 80017dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	68ba      	ldr	r2, [r7, #8]
 80017ee:	430a      	orrs	r2, r1
 80017f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	6a1b      	ldr	r3, [r3, #32]
 80017f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	4a6a      	ldr	r2, [pc, #424]	; (80019ac <HAL_I2C_Init+0x274>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d802      	bhi.n	800180c <HAL_I2C_Init+0xd4>
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	3301      	adds	r3, #1
 800180a:	e009      	b.n	8001820 <HAL_I2C_Init+0xe8>
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001812:	fb02 f303 	mul.w	r3, r2, r3
 8001816:	4a69      	ldr	r2, [pc, #420]	; (80019bc <HAL_I2C_Init+0x284>)
 8001818:	fba2 2303 	umull	r2, r3, r2, r3
 800181c:	099b      	lsrs	r3, r3, #6
 800181e:	3301      	adds	r3, #1
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	6812      	ldr	r2, [r2, #0]
 8001824:	430b      	orrs	r3, r1
 8001826:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	69db      	ldr	r3, [r3, #28]
 800182e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001832:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	495c      	ldr	r1, [pc, #368]	; (80019ac <HAL_I2C_Init+0x274>)
 800183c:	428b      	cmp	r3, r1
 800183e:	d819      	bhi.n	8001874 <HAL_I2C_Init+0x13c>
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	1e59      	subs	r1, r3, #1
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	fbb1 f3f3 	udiv	r3, r1, r3
 800184e:	1c59      	adds	r1, r3, #1
 8001850:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001854:	400b      	ands	r3, r1
 8001856:	2b00      	cmp	r3, #0
 8001858:	d00a      	beq.n	8001870 <HAL_I2C_Init+0x138>
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	1e59      	subs	r1, r3, #1
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	fbb1 f3f3 	udiv	r3, r1, r3
 8001868:	3301      	adds	r3, #1
 800186a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800186e:	e051      	b.n	8001914 <HAL_I2C_Init+0x1dc>
 8001870:	2304      	movs	r3, #4
 8001872:	e04f      	b.n	8001914 <HAL_I2C_Init+0x1dc>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d111      	bne.n	80018a0 <HAL_I2C_Init+0x168>
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	1e58      	subs	r0, r3, #1
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6859      	ldr	r1, [r3, #4]
 8001884:	460b      	mov	r3, r1
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	440b      	add	r3, r1
 800188a:	fbb0 f3f3 	udiv	r3, r0, r3
 800188e:	3301      	adds	r3, #1
 8001890:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001894:	2b00      	cmp	r3, #0
 8001896:	bf0c      	ite	eq
 8001898:	2301      	moveq	r3, #1
 800189a:	2300      	movne	r3, #0
 800189c:	b2db      	uxtb	r3, r3
 800189e:	e012      	b.n	80018c6 <HAL_I2C_Init+0x18e>
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	1e58      	subs	r0, r3, #1
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6859      	ldr	r1, [r3, #4]
 80018a8:	460b      	mov	r3, r1
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	440b      	add	r3, r1
 80018ae:	0099      	lsls	r1, r3, #2
 80018b0:	440b      	add	r3, r1
 80018b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80018b6:	3301      	adds	r3, #1
 80018b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018bc:	2b00      	cmp	r3, #0
 80018be:	bf0c      	ite	eq
 80018c0:	2301      	moveq	r3, #1
 80018c2:	2300      	movne	r3, #0
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <HAL_I2C_Init+0x196>
 80018ca:	2301      	movs	r3, #1
 80018cc:	e022      	b.n	8001914 <HAL_I2C_Init+0x1dc>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d10e      	bne.n	80018f4 <HAL_I2C_Init+0x1bc>
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	1e58      	subs	r0, r3, #1
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6859      	ldr	r1, [r3, #4]
 80018de:	460b      	mov	r3, r1
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	440b      	add	r3, r1
 80018e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80018e8:	3301      	adds	r3, #1
 80018ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018f2:	e00f      	b.n	8001914 <HAL_I2C_Init+0x1dc>
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	1e58      	subs	r0, r3, #1
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6859      	ldr	r1, [r3, #4]
 80018fc:	460b      	mov	r3, r1
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	440b      	add	r3, r1
 8001902:	0099      	lsls	r1, r3, #2
 8001904:	440b      	add	r3, r1
 8001906:	fbb0 f3f3 	udiv	r3, r0, r3
 800190a:	3301      	adds	r3, #1
 800190c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001910:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001914:	6879      	ldr	r1, [r7, #4]
 8001916:	6809      	ldr	r1, [r1, #0]
 8001918:	4313      	orrs	r3, r2
 800191a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	69da      	ldr	r2, [r3, #28]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6a1b      	ldr	r3, [r3, #32]
 800192e:	431a      	orrs	r2, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	430a      	orrs	r2, r1
 8001936:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001942:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	6911      	ldr	r1, [r2, #16]
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	68d2      	ldr	r2, [r2, #12]
 800194e:	4311      	orrs	r1, r2
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	6812      	ldr	r2, [r2, #0]
 8001954:	430b      	orrs	r3, r1
 8001956:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	695a      	ldr	r2, [r3, #20]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	699b      	ldr	r3, [r3, #24]
 800196a:	431a      	orrs	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	430a      	orrs	r2, r1
 8001972:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f042 0201 	orr.w	r2, r2, #1
 8001982:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2200      	movs	r2, #0
 8001988:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2220      	movs	r2, #32
 800198e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2200      	movs	r2, #0
 8001996:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2200      	movs	r2, #0
 800199c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3710      	adds	r7, #16
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	000186a0 	.word	0x000186a0
 80019b0:	001e847f 	.word	0x001e847f
 80019b4:	003d08ff 	.word	0x003d08ff
 80019b8:	431bde83 	.word	0x431bde83
 80019bc:	10624dd3 	.word	0x10624dd3

080019c0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b088      	sub	sp, #32
 80019c4:	af02      	add	r7, sp, #8
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	607a      	str	r2, [r7, #4]
 80019ca:	461a      	mov	r2, r3
 80019cc:	460b      	mov	r3, r1
 80019ce:	817b      	strh	r3, [r7, #10]
 80019d0:	4613      	mov	r3, r2
 80019d2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80019d4:	f7ff fb86 	bl	80010e4 <HAL_GetTick>
 80019d8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	2b20      	cmp	r3, #32
 80019e4:	f040 80e0 	bne.w	8001ba8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	9300      	str	r3, [sp, #0]
 80019ec:	2319      	movs	r3, #25
 80019ee:	2201      	movs	r2, #1
 80019f0:	4970      	ldr	r1, [pc, #448]	; (8001bb4 <HAL_I2C_Master_Transmit+0x1f4>)
 80019f2:	68f8      	ldr	r0, [r7, #12]
 80019f4:	f000 fa92 	bl	8001f1c <I2C_WaitOnFlagUntilTimeout>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80019fe:	2302      	movs	r3, #2
 8001a00:	e0d3      	b.n	8001baa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d101      	bne.n	8001a10 <HAL_I2C_Master_Transmit+0x50>
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	e0cc      	b.n	8001baa <HAL_I2C_Master_Transmit+0x1ea>
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2201      	movs	r2, #1
 8001a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d007      	beq.n	8001a36 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f042 0201 	orr.w	r2, r2, #1
 8001a34:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a44:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2221      	movs	r2, #33	; 0x21
 8001a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2210      	movs	r2, #16
 8001a52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	893a      	ldrh	r2, [r7, #8]
 8001a66:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	4a50      	ldr	r2, [pc, #320]	; (8001bb8 <HAL_I2C_Master_Transmit+0x1f8>)
 8001a76:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001a78:	8979      	ldrh	r1, [r7, #10]
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	6a3a      	ldr	r2, [r7, #32]
 8001a7e:	68f8      	ldr	r0, [r7, #12]
 8001a80:	f000 f9ca 	bl	8001e18 <I2C_MasterRequestWrite>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e08d      	b.n	8001baa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a8e:	2300      	movs	r3, #0
 8001a90:	613b      	str	r3, [r7, #16]
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	695b      	ldr	r3, [r3, #20]
 8001a98:	613b      	str	r3, [r7, #16]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	613b      	str	r3, [r7, #16]
 8001aa2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001aa4:	e066      	b.n	8001b74 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001aa6:	697a      	ldr	r2, [r7, #20]
 8001aa8:	6a39      	ldr	r1, [r7, #32]
 8001aaa:	68f8      	ldr	r0, [r7, #12]
 8001aac:	f000 fb50 	bl	8002150 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d00d      	beq.n	8001ad2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aba:	2b04      	cmp	r3, #4
 8001abc:	d107      	bne.n	8001ace <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001acc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e06b      	b.n	8001baa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad6:	781a      	ldrb	r2, [r3, #0]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae2:	1c5a      	adds	r2, r3, #1
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	3b01      	subs	r3, #1
 8001af0:	b29a      	uxth	r2, r3
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001afa:	3b01      	subs	r3, #1
 8001afc:	b29a      	uxth	r2, r3
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	695b      	ldr	r3, [r3, #20]
 8001b08:	f003 0304 	and.w	r3, r3, #4
 8001b0c:	2b04      	cmp	r3, #4
 8001b0e:	d11b      	bne.n	8001b48 <HAL_I2C_Master_Transmit+0x188>
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d017      	beq.n	8001b48 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1c:	781a      	ldrb	r2, [r3, #0]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b28:	1c5a      	adds	r2, r3, #1
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	3b01      	subs	r3, #1
 8001b36:	b29a      	uxth	r2, r3
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b40:	3b01      	subs	r3, #1
 8001b42:	b29a      	uxth	r2, r3
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b48:	697a      	ldr	r2, [r7, #20]
 8001b4a:	6a39      	ldr	r1, [r7, #32]
 8001b4c:	68f8      	ldr	r0, [r7, #12]
 8001b4e:	f000 fb47 	bl	80021e0 <I2C_WaitOnBTFFlagUntilTimeout>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d00d      	beq.n	8001b74 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5c:	2b04      	cmp	r3, #4
 8001b5e:	d107      	bne.n	8001b70 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b6e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e01a      	b.n	8001baa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d194      	bne.n	8001aa6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2220      	movs	r2, #32
 8001b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2200      	movs	r2, #0
 8001b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	e000      	b.n	8001baa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001ba8:	2302      	movs	r3, #2
  }
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3718      	adds	r7, #24
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	00100002 	.word	0x00100002
 8001bb8:	ffff0000 	.word	0xffff0000

08001bbc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b08a      	sub	sp, #40	; 0x28
 8001bc0:	af02      	add	r7, sp, #8
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	607a      	str	r2, [r7, #4]
 8001bc6:	603b      	str	r3, [r7, #0]
 8001bc8:	460b      	mov	r3, r1
 8001bca:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001bcc:	f7ff fa8a 	bl	80010e4 <HAL_GetTick>
 8001bd0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	2b20      	cmp	r3, #32
 8001be0:	f040 8111 	bne.w	8001e06 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	9300      	str	r3, [sp, #0]
 8001be8:	2319      	movs	r3, #25
 8001bea:	2201      	movs	r2, #1
 8001bec:	4988      	ldr	r1, [pc, #544]	; (8001e10 <HAL_I2C_IsDeviceReady+0x254>)
 8001bee:	68f8      	ldr	r0, [r7, #12]
 8001bf0:	f000 f994 	bl	8001f1c <I2C_WaitOnFlagUntilTimeout>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	e104      	b.n	8001e08 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d101      	bne.n	8001c0c <HAL_I2C_IsDeviceReady+0x50>
 8001c08:	2302      	movs	r3, #2
 8001c0a:	e0fd      	b.n	8001e08 <HAL_I2C_IsDeviceReady+0x24c>
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d007      	beq.n	8001c32 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f042 0201 	orr.w	r2, r2, #1
 8001c30:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c40:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2224      	movs	r2, #36	; 0x24
 8001c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	4a70      	ldr	r2, [pc, #448]	; (8001e14 <HAL_I2C_IsDeviceReady+0x258>)
 8001c54:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c64:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	9300      	str	r3, [sp, #0]
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001c72:	68f8      	ldr	r0, [r7, #12]
 8001c74:	f000 f952 	bl	8001f1c <I2C_WaitOnFlagUntilTimeout>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d00d      	beq.n	8001c9a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c8c:	d103      	bne.n	8001c96 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c94:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e0b6      	b.n	8001e08 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001c9a:	897b      	ldrh	r3, [r7, #10]
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001ca8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001caa:	f7ff fa1b 	bl	80010e4 <HAL_GetTick>
 8001cae:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	695b      	ldr	r3, [r3, #20]
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	bf0c      	ite	eq
 8001cbe:	2301      	moveq	r3, #1
 8001cc0:	2300      	movne	r3, #0
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	695b      	ldr	r3, [r3, #20]
 8001ccc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cd4:	bf0c      	ite	eq
 8001cd6:	2301      	moveq	r3, #1
 8001cd8:	2300      	movne	r3, #0
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001cde:	e025      	b.n	8001d2c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001ce0:	f7ff fa00 	bl	80010e4 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	683a      	ldr	r2, [r7, #0]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d302      	bcc.n	8001cf6 <HAL_I2C_IsDeviceReady+0x13a>
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d103      	bne.n	8001cfe <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	22a0      	movs	r2, #160	; 0xa0
 8001cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	695b      	ldr	r3, [r3, #20]
 8001d04:	f003 0302 	and.w	r3, r3, #2
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	bf0c      	ite	eq
 8001d0c:	2301      	moveq	r3, #1
 8001d0e:	2300      	movne	r3, #0
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	695b      	ldr	r3, [r3, #20]
 8001d1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d22:	bf0c      	ite	eq
 8001d24:	2301      	moveq	r3, #1
 8001d26:	2300      	movne	r3, #0
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	2ba0      	cmp	r3, #160	; 0xa0
 8001d36:	d005      	beq.n	8001d44 <HAL_I2C_IsDeviceReady+0x188>
 8001d38:	7dfb      	ldrb	r3, [r7, #23]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d102      	bne.n	8001d44 <HAL_I2C_IsDeviceReady+0x188>
 8001d3e:	7dbb      	ldrb	r3, [r7, #22]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d0cd      	beq.n	8001ce0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2220      	movs	r2, #32
 8001d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	695b      	ldr	r3, [r3, #20]
 8001d52:	f003 0302 	and.w	r3, r3, #2
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d129      	bne.n	8001dae <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d68:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	613b      	str	r3, [r7, #16]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	695b      	ldr	r3, [r3, #20]
 8001d74:	613b      	str	r3, [r7, #16]
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	699b      	ldr	r3, [r3, #24]
 8001d7c:	613b      	str	r3, [r7, #16]
 8001d7e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	9300      	str	r3, [sp, #0]
 8001d84:	2319      	movs	r3, #25
 8001d86:	2201      	movs	r2, #1
 8001d88:	4921      	ldr	r1, [pc, #132]	; (8001e10 <HAL_I2C_IsDeviceReady+0x254>)
 8001d8a:	68f8      	ldr	r0, [r7, #12]
 8001d8c:	f000 f8c6 	bl	8001f1c <I2C_WaitOnFlagUntilTimeout>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e036      	b.n	8001e08 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2220      	movs	r2, #32
 8001d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001daa:	2300      	movs	r3, #0
 8001dac:	e02c      	b.n	8001e08 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dbc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001dc6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	9300      	str	r3, [sp, #0]
 8001dcc:	2319      	movs	r3, #25
 8001dce:	2201      	movs	r2, #1
 8001dd0:	490f      	ldr	r1, [pc, #60]	; (8001e10 <HAL_I2C_IsDeviceReady+0x254>)
 8001dd2:	68f8      	ldr	r0, [r7, #12]
 8001dd4:	f000 f8a2 	bl	8001f1c <I2C_WaitOnFlagUntilTimeout>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e012      	b.n	8001e08 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	3301      	adds	r3, #1
 8001de6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	f4ff af32 	bcc.w	8001c56 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2220      	movs	r2, #32
 8001df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e000      	b.n	8001e08 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001e06:	2302      	movs	r3, #2
  }
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3720      	adds	r7, #32
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	00100002 	.word	0x00100002
 8001e14:	ffff0000 	.word	0xffff0000

08001e18 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b088      	sub	sp, #32
 8001e1c:	af02      	add	r7, sp, #8
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	607a      	str	r2, [r7, #4]
 8001e22:	603b      	str	r3, [r7, #0]
 8001e24:	460b      	mov	r3, r1
 8001e26:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e2c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	2b08      	cmp	r3, #8
 8001e32:	d006      	beq.n	8001e42 <I2C_MasterRequestWrite+0x2a>
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d003      	beq.n	8001e42 <I2C_MasterRequestWrite+0x2a>
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001e40:	d108      	bne.n	8001e54 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e50:	601a      	str	r2, [r3, #0]
 8001e52:	e00b      	b.n	8001e6c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e58:	2b12      	cmp	r3, #18
 8001e5a:	d107      	bne.n	8001e6c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e6a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	9300      	str	r3, [sp, #0]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2200      	movs	r2, #0
 8001e74:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e78:	68f8      	ldr	r0, [r7, #12]
 8001e7a:	f000 f84f 	bl	8001f1c <I2C_WaitOnFlagUntilTimeout>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d00d      	beq.n	8001ea0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e92:	d103      	bne.n	8001e9c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e9a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e035      	b.n	8001f0c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	691b      	ldr	r3, [r3, #16]
 8001ea4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001ea8:	d108      	bne.n	8001ebc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001eaa:	897b      	ldrh	r3, [r7, #10]
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	461a      	mov	r2, r3
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001eb8:	611a      	str	r2, [r3, #16]
 8001eba:	e01b      	b.n	8001ef4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001ebc:	897b      	ldrh	r3, [r7, #10]
 8001ebe:	11db      	asrs	r3, r3, #7
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	f003 0306 	and.w	r3, r3, #6
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	f063 030f 	orn	r3, r3, #15
 8001ecc:	b2da      	uxtb	r2, r3
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	490e      	ldr	r1, [pc, #56]	; (8001f14 <I2C_MasterRequestWrite+0xfc>)
 8001eda:	68f8      	ldr	r0, [r7, #12]
 8001edc:	f000 f898 	bl	8002010 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e010      	b.n	8001f0c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001eea:	897b      	ldrh	r3, [r7, #10]
 8001eec:	b2da      	uxtb	r2, r3
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	4907      	ldr	r1, [pc, #28]	; (8001f18 <I2C_MasterRequestWrite+0x100>)
 8001efa:	68f8      	ldr	r0, [r7, #12]
 8001efc:	f000 f888 	bl	8002010 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e000      	b.n	8001f0c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001f0a:	2300      	movs	r3, #0
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3718      	adds	r7, #24
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	00010008 	.word	0x00010008
 8001f18:	00010002 	.word	0x00010002

08001f1c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	603b      	str	r3, [r7, #0]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f2c:	e048      	b.n	8001fc0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f34:	d044      	beq.n	8001fc0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f36:	f7ff f8d5 	bl	80010e4 <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	683a      	ldr	r2, [r7, #0]
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d302      	bcc.n	8001f4c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d139      	bne.n	8001fc0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	0c1b      	lsrs	r3, r3, #16
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d10d      	bne.n	8001f72 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	695b      	ldr	r3, [r3, #20]
 8001f5c:	43da      	mvns	r2, r3
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	4013      	ands	r3, r2
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	bf0c      	ite	eq
 8001f68:	2301      	moveq	r3, #1
 8001f6a:	2300      	movne	r3, #0
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	461a      	mov	r2, r3
 8001f70:	e00c      	b.n	8001f8c <I2C_WaitOnFlagUntilTimeout+0x70>
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	699b      	ldr	r3, [r3, #24]
 8001f78:	43da      	mvns	r2, r3
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	bf0c      	ite	eq
 8001f84:	2301      	moveq	r3, #1
 8001f86:	2300      	movne	r3, #0
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	79fb      	ldrb	r3, [r7, #7]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d116      	bne.n	8001fc0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2200      	movs	r2, #0
 8001f96:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2220      	movs	r2, #32
 8001f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fac:	f043 0220 	orr.w	r2, r3, #32
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e023      	b.n	8002008 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	0c1b      	lsrs	r3, r3, #16
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d10d      	bne.n	8001fe6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	695b      	ldr	r3, [r3, #20]
 8001fd0:	43da      	mvns	r2, r3
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	bf0c      	ite	eq
 8001fdc:	2301      	moveq	r3, #1
 8001fde:	2300      	movne	r3, #0
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	e00c      	b.n	8002000 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	43da      	mvns	r2, r3
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	bf0c      	ite	eq
 8001ff8:	2301      	moveq	r3, #1
 8001ffa:	2300      	movne	r3, #0
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	461a      	mov	r2, r3
 8002000:	79fb      	ldrb	r3, [r7, #7]
 8002002:	429a      	cmp	r2, r3
 8002004:	d093      	beq.n	8001f2e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002006:	2300      	movs	r3, #0
}
 8002008:	4618      	mov	r0, r3
 800200a:	3710      	adds	r7, #16
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}

08002010 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	60b9      	str	r1, [r7, #8]
 800201a:	607a      	str	r2, [r7, #4]
 800201c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800201e:	e071      	b.n	8002104 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	695b      	ldr	r3, [r3, #20]
 8002026:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800202a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800202e:	d123      	bne.n	8002078 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800203e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002048:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2200      	movs	r2, #0
 800204e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2220      	movs	r2, #32
 8002054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2200      	movs	r2, #0
 800205c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002064:	f043 0204 	orr.w	r2, r3, #4
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2200      	movs	r2, #0
 8002070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e067      	b.n	8002148 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800207e:	d041      	beq.n	8002104 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002080:	f7ff f830 	bl	80010e4 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	429a      	cmp	r2, r3
 800208e:	d302      	bcc.n	8002096 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d136      	bne.n	8002104 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	0c1b      	lsrs	r3, r3, #16
 800209a:	b2db      	uxtb	r3, r3
 800209c:	2b01      	cmp	r3, #1
 800209e:	d10c      	bne.n	80020ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	695b      	ldr	r3, [r3, #20]
 80020a6:	43da      	mvns	r2, r3
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	4013      	ands	r3, r2
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	bf14      	ite	ne
 80020b2:	2301      	movne	r3, #1
 80020b4:	2300      	moveq	r3, #0
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	e00b      	b.n	80020d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	699b      	ldr	r3, [r3, #24]
 80020c0:	43da      	mvns	r2, r3
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	4013      	ands	r3, r2
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	bf14      	ite	ne
 80020cc:	2301      	movne	r3, #1
 80020ce:	2300      	moveq	r3, #0
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d016      	beq.n	8002104 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2200      	movs	r2, #0
 80020da:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2220      	movs	r2, #32
 80020e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2200      	movs	r2, #0
 80020e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f0:	f043 0220 	orr.w	r2, r3, #32
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2200      	movs	r2, #0
 80020fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e021      	b.n	8002148 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	0c1b      	lsrs	r3, r3, #16
 8002108:	b2db      	uxtb	r3, r3
 800210a:	2b01      	cmp	r3, #1
 800210c:	d10c      	bne.n	8002128 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	695b      	ldr	r3, [r3, #20]
 8002114:	43da      	mvns	r2, r3
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	4013      	ands	r3, r2
 800211a:	b29b      	uxth	r3, r3
 800211c:	2b00      	cmp	r3, #0
 800211e:	bf14      	ite	ne
 8002120:	2301      	movne	r3, #1
 8002122:	2300      	moveq	r3, #0
 8002124:	b2db      	uxtb	r3, r3
 8002126:	e00b      	b.n	8002140 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	699b      	ldr	r3, [r3, #24]
 800212e:	43da      	mvns	r2, r3
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	4013      	ands	r3, r2
 8002134:	b29b      	uxth	r3, r3
 8002136:	2b00      	cmp	r3, #0
 8002138:	bf14      	ite	ne
 800213a:	2301      	movne	r3, #1
 800213c:	2300      	moveq	r3, #0
 800213e:	b2db      	uxtb	r3, r3
 8002140:	2b00      	cmp	r3, #0
 8002142:	f47f af6d 	bne.w	8002020 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002146:	2300      	movs	r3, #0
}
 8002148:	4618      	mov	r0, r3
 800214a:	3710      	adds	r7, #16
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}

08002150 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	60b9      	str	r1, [r7, #8]
 800215a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800215c:	e034      	b.n	80021c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800215e:	68f8      	ldr	r0, [r7, #12]
 8002160:	f000 f886 	bl	8002270 <I2C_IsAcknowledgeFailed>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e034      	b.n	80021d8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002174:	d028      	beq.n	80021c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002176:	f7fe ffb5 	bl	80010e4 <HAL_GetTick>
 800217a:	4602      	mov	r2, r0
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	68ba      	ldr	r2, [r7, #8]
 8002182:	429a      	cmp	r2, r3
 8002184:	d302      	bcc.n	800218c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d11d      	bne.n	80021c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	695b      	ldr	r3, [r3, #20]
 8002192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002196:	2b80      	cmp	r3, #128	; 0x80
 8002198:	d016      	beq.n	80021c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2200      	movs	r2, #0
 800219e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2220      	movs	r2, #32
 80021a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2200      	movs	r2, #0
 80021ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b4:	f043 0220 	orr.w	r2, r3, #32
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2200      	movs	r2, #0
 80021c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e007      	b.n	80021d8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	695b      	ldr	r3, [r3, #20]
 80021ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021d2:	2b80      	cmp	r3, #128	; 0x80
 80021d4:	d1c3      	bne.n	800215e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80021d6:	2300      	movs	r3, #0
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3710      	adds	r7, #16
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}

080021e0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	60b9      	str	r1, [r7, #8]
 80021ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80021ec:	e034      	b.n	8002258 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80021ee:	68f8      	ldr	r0, [r7, #12]
 80021f0:	f000 f83e 	bl	8002270 <I2C_IsAcknowledgeFailed>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e034      	b.n	8002268 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002204:	d028      	beq.n	8002258 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002206:	f7fe ff6d 	bl	80010e4 <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	68ba      	ldr	r2, [r7, #8]
 8002212:	429a      	cmp	r2, r3
 8002214:	d302      	bcc.n	800221c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d11d      	bne.n	8002258 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	695b      	ldr	r3, [r3, #20]
 8002222:	f003 0304 	and.w	r3, r3, #4
 8002226:	2b04      	cmp	r3, #4
 8002228:	d016      	beq.n	8002258 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2200      	movs	r2, #0
 800222e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2220      	movs	r2, #32
 8002234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2200      	movs	r2, #0
 800223c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002244:	f043 0220 	orr.w	r2, r3, #32
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2200      	movs	r2, #0
 8002250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e007      	b.n	8002268 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	695b      	ldr	r3, [r3, #20]
 800225e:	f003 0304 	and.w	r3, r3, #4
 8002262:	2b04      	cmp	r3, #4
 8002264:	d1c3      	bne.n	80021ee <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002266:	2300      	movs	r3, #0
}
 8002268:	4618      	mov	r0, r3
 800226a:	3710      	adds	r7, #16
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	695b      	ldr	r3, [r3, #20]
 800227e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002282:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002286:	d11b      	bne.n	80022c0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002290:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2220      	movs	r2, #32
 800229c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ac:	f043 0204 	orr.w	r2, r3, #4
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e000      	b.n	80022c2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	370c      	adds	r7, #12
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr

080022ce <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80022ce:	b480      	push	{r7}
 80022d0:	b083      	sub	sp, #12
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
 80022d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	2b20      	cmp	r3, #32
 80022e2:	d129      	bne.n	8002338 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2224      	movs	r2, #36	; 0x24
 80022e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f022 0201 	bic.w	r2, r2, #1
 80022fa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f022 0210 	bic.w	r2, r2, #16
 800230a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	683a      	ldr	r2, [r7, #0]
 8002318:	430a      	orrs	r2, r1
 800231a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f042 0201 	orr.w	r2, r2, #1
 800232a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2220      	movs	r2, #32
 8002330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002334:	2300      	movs	r3, #0
 8002336:	e000      	b.n	800233a <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002338:	2302      	movs	r3, #2
  }
}
 800233a:	4618      	mov	r0, r3
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr

08002346 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002346:	b480      	push	{r7}
 8002348:	b085      	sub	sp, #20
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
 800234e:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002350:	2300      	movs	r3, #0
 8002352:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800235a:	b2db      	uxtb	r3, r3
 800235c:	2b20      	cmp	r3, #32
 800235e:	d12a      	bne.n	80023b6 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2224      	movs	r2, #36	; 0x24
 8002364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f022 0201 	bic.w	r2, r2, #1
 8002376:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237e:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8002380:	89fb      	ldrh	r3, [r7, #14]
 8002382:	f023 030f 	bic.w	r3, r3, #15
 8002386:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	b29a      	uxth	r2, r3
 800238c:	89fb      	ldrh	r3, [r7, #14]
 800238e:	4313      	orrs	r3, r2
 8002390:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	89fa      	ldrh	r2, [r7, #14]
 8002398:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f042 0201 	orr.w	r2, r2, #1
 80023a8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2220      	movs	r2, #32
 80023ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80023b2:	2300      	movs	r3, #0
 80023b4:	e000      	b.n	80023b8 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80023b6:	2302      	movs	r3, #2
  }
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3714      	adds	r7, #20
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80023ca:	2300      	movs	r3, #0
 80023cc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80023ce:	2300      	movs	r3, #0
 80023d0:	603b      	str	r3, [r7, #0]
 80023d2:	4b20      	ldr	r3, [pc, #128]	; (8002454 <HAL_PWREx_EnableOverDrive+0x90>)
 80023d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d6:	4a1f      	ldr	r2, [pc, #124]	; (8002454 <HAL_PWREx_EnableOverDrive+0x90>)
 80023d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023dc:	6413      	str	r3, [r2, #64]	; 0x40
 80023de:	4b1d      	ldr	r3, [pc, #116]	; (8002454 <HAL_PWREx_EnableOverDrive+0x90>)
 80023e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e6:	603b      	str	r3, [r7, #0]
 80023e8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80023ea:	4b1b      	ldr	r3, [pc, #108]	; (8002458 <HAL_PWREx_EnableOverDrive+0x94>)
 80023ec:	2201      	movs	r2, #1
 80023ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023f0:	f7fe fe78 	bl	80010e4 <HAL_GetTick>
 80023f4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80023f6:	e009      	b.n	800240c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80023f8:	f7fe fe74 	bl	80010e4 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002406:	d901      	bls.n	800240c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e01f      	b.n	800244c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800240c:	4b13      	ldr	r3, [pc, #76]	; (800245c <HAL_PWREx_EnableOverDrive+0x98>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002414:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002418:	d1ee      	bne.n	80023f8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800241a:	4b11      	ldr	r3, [pc, #68]	; (8002460 <HAL_PWREx_EnableOverDrive+0x9c>)
 800241c:	2201      	movs	r2, #1
 800241e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002420:	f7fe fe60 	bl	80010e4 <HAL_GetTick>
 8002424:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002426:	e009      	b.n	800243c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002428:	f7fe fe5c 	bl	80010e4 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002436:	d901      	bls.n	800243c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e007      	b.n	800244c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800243c:	4b07      	ldr	r3, [pc, #28]	; (800245c <HAL_PWREx_EnableOverDrive+0x98>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002444:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002448:	d1ee      	bne.n	8002428 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800244a:	2300      	movs	r3, #0
}
 800244c:	4618      	mov	r0, r3
 800244e:	3708      	adds	r7, #8
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	40023800 	.word	0x40023800
 8002458:	420e0040 	.word	0x420e0040
 800245c:	40007000 	.word	0x40007000
 8002460:	420e0044 	.word	0x420e0044

08002464 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b086      	sub	sp, #24
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d101      	bne.n	8002476 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e267      	b.n	8002946 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	2b00      	cmp	r3, #0
 8002480:	d075      	beq.n	800256e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002482:	4b88      	ldr	r3, [pc, #544]	; (80026a4 <HAL_RCC_OscConfig+0x240>)
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	f003 030c 	and.w	r3, r3, #12
 800248a:	2b04      	cmp	r3, #4
 800248c:	d00c      	beq.n	80024a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800248e:	4b85      	ldr	r3, [pc, #532]	; (80026a4 <HAL_RCC_OscConfig+0x240>)
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002496:	2b08      	cmp	r3, #8
 8002498:	d112      	bne.n	80024c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800249a:	4b82      	ldr	r3, [pc, #520]	; (80026a4 <HAL_RCC_OscConfig+0x240>)
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024a6:	d10b      	bne.n	80024c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024a8:	4b7e      	ldr	r3, [pc, #504]	; (80026a4 <HAL_RCC_OscConfig+0x240>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d05b      	beq.n	800256c <HAL_RCC_OscConfig+0x108>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d157      	bne.n	800256c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e242      	b.n	8002946 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024c8:	d106      	bne.n	80024d8 <HAL_RCC_OscConfig+0x74>
 80024ca:	4b76      	ldr	r3, [pc, #472]	; (80026a4 <HAL_RCC_OscConfig+0x240>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a75      	ldr	r2, [pc, #468]	; (80026a4 <HAL_RCC_OscConfig+0x240>)
 80024d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024d4:	6013      	str	r3, [r2, #0]
 80024d6:	e01d      	b.n	8002514 <HAL_RCC_OscConfig+0xb0>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024e0:	d10c      	bne.n	80024fc <HAL_RCC_OscConfig+0x98>
 80024e2:	4b70      	ldr	r3, [pc, #448]	; (80026a4 <HAL_RCC_OscConfig+0x240>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a6f      	ldr	r2, [pc, #444]	; (80026a4 <HAL_RCC_OscConfig+0x240>)
 80024e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024ec:	6013      	str	r3, [r2, #0]
 80024ee:	4b6d      	ldr	r3, [pc, #436]	; (80026a4 <HAL_RCC_OscConfig+0x240>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a6c      	ldr	r2, [pc, #432]	; (80026a4 <HAL_RCC_OscConfig+0x240>)
 80024f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024f8:	6013      	str	r3, [r2, #0]
 80024fa:	e00b      	b.n	8002514 <HAL_RCC_OscConfig+0xb0>
 80024fc:	4b69      	ldr	r3, [pc, #420]	; (80026a4 <HAL_RCC_OscConfig+0x240>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a68      	ldr	r2, [pc, #416]	; (80026a4 <HAL_RCC_OscConfig+0x240>)
 8002502:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002506:	6013      	str	r3, [r2, #0]
 8002508:	4b66      	ldr	r3, [pc, #408]	; (80026a4 <HAL_RCC_OscConfig+0x240>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a65      	ldr	r2, [pc, #404]	; (80026a4 <HAL_RCC_OscConfig+0x240>)
 800250e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002512:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d013      	beq.n	8002544 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800251c:	f7fe fde2 	bl	80010e4 <HAL_GetTick>
 8002520:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002522:	e008      	b.n	8002536 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002524:	f7fe fdde 	bl	80010e4 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2b64      	cmp	r3, #100	; 0x64
 8002530:	d901      	bls.n	8002536 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e207      	b.n	8002946 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002536:	4b5b      	ldr	r3, [pc, #364]	; (80026a4 <HAL_RCC_OscConfig+0x240>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d0f0      	beq.n	8002524 <HAL_RCC_OscConfig+0xc0>
 8002542:	e014      	b.n	800256e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002544:	f7fe fdce 	bl	80010e4 <HAL_GetTick>
 8002548:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800254a:	e008      	b.n	800255e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800254c:	f7fe fdca 	bl	80010e4 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b64      	cmp	r3, #100	; 0x64
 8002558:	d901      	bls.n	800255e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e1f3      	b.n	8002946 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800255e:	4b51      	ldr	r3, [pc, #324]	; (80026a4 <HAL_RCC_OscConfig+0x240>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d1f0      	bne.n	800254c <HAL_RCC_OscConfig+0xe8>
 800256a:	e000      	b.n	800256e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800256c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0302 	and.w	r3, r3, #2
 8002576:	2b00      	cmp	r3, #0
 8002578:	d063      	beq.n	8002642 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800257a:	4b4a      	ldr	r3, [pc, #296]	; (80026a4 <HAL_RCC_OscConfig+0x240>)
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f003 030c 	and.w	r3, r3, #12
 8002582:	2b00      	cmp	r3, #0
 8002584:	d00b      	beq.n	800259e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002586:	4b47      	ldr	r3, [pc, #284]	; (80026a4 <HAL_RCC_OscConfig+0x240>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800258e:	2b08      	cmp	r3, #8
 8002590:	d11c      	bne.n	80025cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002592:	4b44      	ldr	r3, [pc, #272]	; (80026a4 <HAL_RCC_OscConfig+0x240>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d116      	bne.n	80025cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800259e:	4b41      	ldr	r3, [pc, #260]	; (80026a4 <HAL_RCC_OscConfig+0x240>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d005      	beq.n	80025b6 <HAL_RCC_OscConfig+0x152>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d001      	beq.n	80025b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e1c7      	b.n	8002946 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025b6:	4b3b      	ldr	r3, [pc, #236]	; (80026a4 <HAL_RCC_OscConfig+0x240>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	00db      	lsls	r3, r3, #3
 80025c4:	4937      	ldr	r1, [pc, #220]	; (80026a4 <HAL_RCC_OscConfig+0x240>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ca:	e03a      	b.n	8002642 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d020      	beq.n	8002616 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025d4:	4b34      	ldr	r3, [pc, #208]	; (80026a8 <HAL_RCC_OscConfig+0x244>)
 80025d6:	2201      	movs	r2, #1
 80025d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025da:	f7fe fd83 	bl	80010e4 <HAL_GetTick>
 80025de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025e0:	e008      	b.n	80025f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025e2:	f7fe fd7f 	bl	80010e4 <HAL_GetTick>
 80025e6:	4602      	mov	r2, r0
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d901      	bls.n	80025f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	e1a8      	b.n	8002946 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025f4:	4b2b      	ldr	r3, [pc, #172]	; (80026a4 <HAL_RCC_OscConfig+0x240>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0302 	and.w	r3, r3, #2
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d0f0      	beq.n	80025e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002600:	4b28      	ldr	r3, [pc, #160]	; (80026a4 <HAL_RCC_OscConfig+0x240>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	691b      	ldr	r3, [r3, #16]
 800260c:	00db      	lsls	r3, r3, #3
 800260e:	4925      	ldr	r1, [pc, #148]	; (80026a4 <HAL_RCC_OscConfig+0x240>)
 8002610:	4313      	orrs	r3, r2
 8002612:	600b      	str	r3, [r1, #0]
 8002614:	e015      	b.n	8002642 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002616:	4b24      	ldr	r3, [pc, #144]	; (80026a8 <HAL_RCC_OscConfig+0x244>)
 8002618:	2200      	movs	r2, #0
 800261a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800261c:	f7fe fd62 	bl	80010e4 <HAL_GetTick>
 8002620:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002622:	e008      	b.n	8002636 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002624:	f7fe fd5e 	bl	80010e4 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b02      	cmp	r3, #2
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e187      	b.n	8002946 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002636:	4b1b      	ldr	r3, [pc, #108]	; (80026a4 <HAL_RCC_OscConfig+0x240>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1f0      	bne.n	8002624 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0308 	and.w	r3, r3, #8
 800264a:	2b00      	cmp	r3, #0
 800264c:	d036      	beq.n	80026bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d016      	beq.n	8002684 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002656:	4b15      	ldr	r3, [pc, #84]	; (80026ac <HAL_RCC_OscConfig+0x248>)
 8002658:	2201      	movs	r2, #1
 800265a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800265c:	f7fe fd42 	bl	80010e4 <HAL_GetTick>
 8002660:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002662:	e008      	b.n	8002676 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002664:	f7fe fd3e 	bl	80010e4 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b02      	cmp	r3, #2
 8002670:	d901      	bls.n	8002676 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e167      	b.n	8002946 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002676:	4b0b      	ldr	r3, [pc, #44]	; (80026a4 <HAL_RCC_OscConfig+0x240>)
 8002678:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d0f0      	beq.n	8002664 <HAL_RCC_OscConfig+0x200>
 8002682:	e01b      	b.n	80026bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002684:	4b09      	ldr	r3, [pc, #36]	; (80026ac <HAL_RCC_OscConfig+0x248>)
 8002686:	2200      	movs	r2, #0
 8002688:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800268a:	f7fe fd2b 	bl	80010e4 <HAL_GetTick>
 800268e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002690:	e00e      	b.n	80026b0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002692:	f7fe fd27 	bl	80010e4 <HAL_GetTick>
 8002696:	4602      	mov	r2, r0
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	2b02      	cmp	r3, #2
 800269e:	d907      	bls.n	80026b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	e150      	b.n	8002946 <HAL_RCC_OscConfig+0x4e2>
 80026a4:	40023800 	.word	0x40023800
 80026a8:	42470000 	.word	0x42470000
 80026ac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026b0:	4b88      	ldr	r3, [pc, #544]	; (80028d4 <HAL_RCC_OscConfig+0x470>)
 80026b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026b4:	f003 0302 	and.w	r3, r3, #2
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d1ea      	bne.n	8002692 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0304 	and.w	r3, r3, #4
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	f000 8097 	beq.w	80027f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026ca:	2300      	movs	r3, #0
 80026cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026ce:	4b81      	ldr	r3, [pc, #516]	; (80028d4 <HAL_RCC_OscConfig+0x470>)
 80026d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d10f      	bne.n	80026fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026da:	2300      	movs	r3, #0
 80026dc:	60bb      	str	r3, [r7, #8]
 80026de:	4b7d      	ldr	r3, [pc, #500]	; (80028d4 <HAL_RCC_OscConfig+0x470>)
 80026e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e2:	4a7c      	ldr	r2, [pc, #496]	; (80028d4 <HAL_RCC_OscConfig+0x470>)
 80026e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026e8:	6413      	str	r3, [r2, #64]	; 0x40
 80026ea:	4b7a      	ldr	r3, [pc, #488]	; (80028d4 <HAL_RCC_OscConfig+0x470>)
 80026ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026f2:	60bb      	str	r3, [r7, #8]
 80026f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026f6:	2301      	movs	r3, #1
 80026f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026fa:	4b77      	ldr	r3, [pc, #476]	; (80028d8 <HAL_RCC_OscConfig+0x474>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002702:	2b00      	cmp	r3, #0
 8002704:	d118      	bne.n	8002738 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002706:	4b74      	ldr	r3, [pc, #464]	; (80028d8 <HAL_RCC_OscConfig+0x474>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a73      	ldr	r2, [pc, #460]	; (80028d8 <HAL_RCC_OscConfig+0x474>)
 800270c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002710:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002712:	f7fe fce7 	bl	80010e4 <HAL_GetTick>
 8002716:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002718:	e008      	b.n	800272c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800271a:	f7fe fce3 	bl	80010e4 <HAL_GetTick>
 800271e:	4602      	mov	r2, r0
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	2b02      	cmp	r3, #2
 8002726:	d901      	bls.n	800272c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	e10c      	b.n	8002946 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800272c:	4b6a      	ldr	r3, [pc, #424]	; (80028d8 <HAL_RCC_OscConfig+0x474>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002734:	2b00      	cmp	r3, #0
 8002736:	d0f0      	beq.n	800271a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	2b01      	cmp	r3, #1
 800273e:	d106      	bne.n	800274e <HAL_RCC_OscConfig+0x2ea>
 8002740:	4b64      	ldr	r3, [pc, #400]	; (80028d4 <HAL_RCC_OscConfig+0x470>)
 8002742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002744:	4a63      	ldr	r2, [pc, #396]	; (80028d4 <HAL_RCC_OscConfig+0x470>)
 8002746:	f043 0301 	orr.w	r3, r3, #1
 800274a:	6713      	str	r3, [r2, #112]	; 0x70
 800274c:	e01c      	b.n	8002788 <HAL_RCC_OscConfig+0x324>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	2b05      	cmp	r3, #5
 8002754:	d10c      	bne.n	8002770 <HAL_RCC_OscConfig+0x30c>
 8002756:	4b5f      	ldr	r3, [pc, #380]	; (80028d4 <HAL_RCC_OscConfig+0x470>)
 8002758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800275a:	4a5e      	ldr	r2, [pc, #376]	; (80028d4 <HAL_RCC_OscConfig+0x470>)
 800275c:	f043 0304 	orr.w	r3, r3, #4
 8002760:	6713      	str	r3, [r2, #112]	; 0x70
 8002762:	4b5c      	ldr	r3, [pc, #368]	; (80028d4 <HAL_RCC_OscConfig+0x470>)
 8002764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002766:	4a5b      	ldr	r2, [pc, #364]	; (80028d4 <HAL_RCC_OscConfig+0x470>)
 8002768:	f043 0301 	orr.w	r3, r3, #1
 800276c:	6713      	str	r3, [r2, #112]	; 0x70
 800276e:	e00b      	b.n	8002788 <HAL_RCC_OscConfig+0x324>
 8002770:	4b58      	ldr	r3, [pc, #352]	; (80028d4 <HAL_RCC_OscConfig+0x470>)
 8002772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002774:	4a57      	ldr	r2, [pc, #348]	; (80028d4 <HAL_RCC_OscConfig+0x470>)
 8002776:	f023 0301 	bic.w	r3, r3, #1
 800277a:	6713      	str	r3, [r2, #112]	; 0x70
 800277c:	4b55      	ldr	r3, [pc, #340]	; (80028d4 <HAL_RCC_OscConfig+0x470>)
 800277e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002780:	4a54      	ldr	r2, [pc, #336]	; (80028d4 <HAL_RCC_OscConfig+0x470>)
 8002782:	f023 0304 	bic.w	r3, r3, #4
 8002786:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d015      	beq.n	80027bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002790:	f7fe fca8 	bl	80010e4 <HAL_GetTick>
 8002794:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002796:	e00a      	b.n	80027ae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002798:	f7fe fca4 	bl	80010e4 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e0cb      	b.n	8002946 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ae:	4b49      	ldr	r3, [pc, #292]	; (80028d4 <HAL_RCC_OscConfig+0x470>)
 80027b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d0ee      	beq.n	8002798 <HAL_RCC_OscConfig+0x334>
 80027ba:	e014      	b.n	80027e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027bc:	f7fe fc92 	bl	80010e4 <HAL_GetTick>
 80027c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027c2:	e00a      	b.n	80027da <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027c4:	f7fe fc8e 	bl	80010e4 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d901      	bls.n	80027da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e0b5      	b.n	8002946 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027da:	4b3e      	ldr	r3, [pc, #248]	; (80028d4 <HAL_RCC_OscConfig+0x470>)
 80027dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027de:	f003 0302 	and.w	r3, r3, #2
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d1ee      	bne.n	80027c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027e6:	7dfb      	ldrb	r3, [r7, #23]
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d105      	bne.n	80027f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027ec:	4b39      	ldr	r3, [pc, #228]	; (80028d4 <HAL_RCC_OscConfig+0x470>)
 80027ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f0:	4a38      	ldr	r2, [pc, #224]	; (80028d4 <HAL_RCC_OscConfig+0x470>)
 80027f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027f6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	699b      	ldr	r3, [r3, #24]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	f000 80a1 	beq.w	8002944 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002802:	4b34      	ldr	r3, [pc, #208]	; (80028d4 <HAL_RCC_OscConfig+0x470>)
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f003 030c 	and.w	r3, r3, #12
 800280a:	2b08      	cmp	r3, #8
 800280c:	d05c      	beq.n	80028c8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	699b      	ldr	r3, [r3, #24]
 8002812:	2b02      	cmp	r3, #2
 8002814:	d141      	bne.n	800289a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002816:	4b31      	ldr	r3, [pc, #196]	; (80028dc <HAL_RCC_OscConfig+0x478>)
 8002818:	2200      	movs	r2, #0
 800281a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800281c:	f7fe fc62 	bl	80010e4 <HAL_GetTick>
 8002820:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002822:	e008      	b.n	8002836 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002824:	f7fe fc5e 	bl	80010e4 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	2b02      	cmp	r3, #2
 8002830:	d901      	bls.n	8002836 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e087      	b.n	8002946 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002836:	4b27      	ldr	r3, [pc, #156]	; (80028d4 <HAL_RCC_OscConfig+0x470>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d1f0      	bne.n	8002824 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	69da      	ldr	r2, [r3, #28]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a1b      	ldr	r3, [r3, #32]
 800284a:	431a      	orrs	r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002850:	019b      	lsls	r3, r3, #6
 8002852:	431a      	orrs	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002858:	085b      	lsrs	r3, r3, #1
 800285a:	3b01      	subs	r3, #1
 800285c:	041b      	lsls	r3, r3, #16
 800285e:	431a      	orrs	r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002864:	061b      	lsls	r3, r3, #24
 8002866:	491b      	ldr	r1, [pc, #108]	; (80028d4 <HAL_RCC_OscConfig+0x470>)
 8002868:	4313      	orrs	r3, r2
 800286a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800286c:	4b1b      	ldr	r3, [pc, #108]	; (80028dc <HAL_RCC_OscConfig+0x478>)
 800286e:	2201      	movs	r2, #1
 8002870:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002872:	f7fe fc37 	bl	80010e4 <HAL_GetTick>
 8002876:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002878:	e008      	b.n	800288c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800287a:	f7fe fc33 	bl	80010e4 <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	2b02      	cmp	r3, #2
 8002886:	d901      	bls.n	800288c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	e05c      	b.n	8002946 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800288c:	4b11      	ldr	r3, [pc, #68]	; (80028d4 <HAL_RCC_OscConfig+0x470>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d0f0      	beq.n	800287a <HAL_RCC_OscConfig+0x416>
 8002898:	e054      	b.n	8002944 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800289a:	4b10      	ldr	r3, [pc, #64]	; (80028dc <HAL_RCC_OscConfig+0x478>)
 800289c:	2200      	movs	r2, #0
 800289e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a0:	f7fe fc20 	bl	80010e4 <HAL_GetTick>
 80028a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028a6:	e008      	b.n	80028ba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028a8:	f7fe fc1c 	bl	80010e4 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e045      	b.n	8002946 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ba:	4b06      	ldr	r3, [pc, #24]	; (80028d4 <HAL_RCC_OscConfig+0x470>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d1f0      	bne.n	80028a8 <HAL_RCC_OscConfig+0x444>
 80028c6:	e03d      	b.n	8002944 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	699b      	ldr	r3, [r3, #24]
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d107      	bne.n	80028e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e038      	b.n	8002946 <HAL_RCC_OscConfig+0x4e2>
 80028d4:	40023800 	.word	0x40023800
 80028d8:	40007000 	.word	0x40007000
 80028dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028e0:	4b1b      	ldr	r3, [pc, #108]	; (8002950 <HAL_RCC_OscConfig+0x4ec>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d028      	beq.n	8002940 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d121      	bne.n	8002940 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002906:	429a      	cmp	r2, r3
 8002908:	d11a      	bne.n	8002940 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800290a:	68fa      	ldr	r2, [r7, #12]
 800290c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002910:	4013      	ands	r3, r2
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002916:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002918:	4293      	cmp	r3, r2
 800291a:	d111      	bne.n	8002940 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002926:	085b      	lsrs	r3, r3, #1
 8002928:	3b01      	subs	r3, #1
 800292a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800292c:	429a      	cmp	r2, r3
 800292e:	d107      	bne.n	8002940 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800293a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800293c:	429a      	cmp	r2, r3
 800293e:	d001      	beq.n	8002944 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e000      	b.n	8002946 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3718      	adds	r7, #24
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	40023800 	.word	0x40023800

08002954 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d101      	bne.n	8002968 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e0cc      	b.n	8002b02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002968:	4b68      	ldr	r3, [pc, #416]	; (8002b0c <HAL_RCC_ClockConfig+0x1b8>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 030f 	and.w	r3, r3, #15
 8002970:	683a      	ldr	r2, [r7, #0]
 8002972:	429a      	cmp	r2, r3
 8002974:	d90c      	bls.n	8002990 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002976:	4b65      	ldr	r3, [pc, #404]	; (8002b0c <HAL_RCC_ClockConfig+0x1b8>)
 8002978:	683a      	ldr	r2, [r7, #0]
 800297a:	b2d2      	uxtb	r2, r2
 800297c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800297e:	4b63      	ldr	r3, [pc, #396]	; (8002b0c <HAL_RCC_ClockConfig+0x1b8>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 030f 	and.w	r3, r3, #15
 8002986:	683a      	ldr	r2, [r7, #0]
 8002988:	429a      	cmp	r2, r3
 800298a:	d001      	beq.n	8002990 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e0b8      	b.n	8002b02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0302 	and.w	r3, r3, #2
 8002998:	2b00      	cmp	r3, #0
 800299a:	d020      	beq.n	80029de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0304 	and.w	r3, r3, #4
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d005      	beq.n	80029b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029a8:	4b59      	ldr	r3, [pc, #356]	; (8002b10 <HAL_RCC_ClockConfig+0x1bc>)
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	4a58      	ldr	r2, [pc, #352]	; (8002b10 <HAL_RCC_ClockConfig+0x1bc>)
 80029ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80029b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0308 	and.w	r3, r3, #8
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d005      	beq.n	80029cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029c0:	4b53      	ldr	r3, [pc, #332]	; (8002b10 <HAL_RCC_ClockConfig+0x1bc>)
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	4a52      	ldr	r2, [pc, #328]	; (8002b10 <HAL_RCC_ClockConfig+0x1bc>)
 80029c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029cc:	4b50      	ldr	r3, [pc, #320]	; (8002b10 <HAL_RCC_ClockConfig+0x1bc>)
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	494d      	ldr	r1, [pc, #308]	; (8002b10 <HAL_RCC_ClockConfig+0x1bc>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0301 	and.w	r3, r3, #1
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d044      	beq.n	8002a74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d107      	bne.n	8002a02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029f2:	4b47      	ldr	r3, [pc, #284]	; (8002b10 <HAL_RCC_ClockConfig+0x1bc>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d119      	bne.n	8002a32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e07f      	b.n	8002b02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d003      	beq.n	8002a12 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a0e:	2b03      	cmp	r3, #3
 8002a10:	d107      	bne.n	8002a22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a12:	4b3f      	ldr	r3, [pc, #252]	; (8002b10 <HAL_RCC_ClockConfig+0x1bc>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d109      	bne.n	8002a32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e06f      	b.n	8002b02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a22:	4b3b      	ldr	r3, [pc, #236]	; (8002b10 <HAL_RCC_ClockConfig+0x1bc>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0302 	and.w	r3, r3, #2
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d101      	bne.n	8002a32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e067      	b.n	8002b02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a32:	4b37      	ldr	r3, [pc, #220]	; (8002b10 <HAL_RCC_ClockConfig+0x1bc>)
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f023 0203 	bic.w	r2, r3, #3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	4934      	ldr	r1, [pc, #208]	; (8002b10 <HAL_RCC_ClockConfig+0x1bc>)
 8002a40:	4313      	orrs	r3, r2
 8002a42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a44:	f7fe fb4e 	bl	80010e4 <HAL_GetTick>
 8002a48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a4a:	e00a      	b.n	8002a62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a4c:	f7fe fb4a 	bl	80010e4 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d901      	bls.n	8002a62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e04f      	b.n	8002b02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a62:	4b2b      	ldr	r3, [pc, #172]	; (8002b10 <HAL_RCC_ClockConfig+0x1bc>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f003 020c 	and.w	r2, r3, #12
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d1eb      	bne.n	8002a4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a74:	4b25      	ldr	r3, [pc, #148]	; (8002b0c <HAL_RCC_ClockConfig+0x1b8>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 030f 	and.w	r3, r3, #15
 8002a7c:	683a      	ldr	r2, [r7, #0]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d20c      	bcs.n	8002a9c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a82:	4b22      	ldr	r3, [pc, #136]	; (8002b0c <HAL_RCC_ClockConfig+0x1b8>)
 8002a84:	683a      	ldr	r2, [r7, #0]
 8002a86:	b2d2      	uxtb	r2, r2
 8002a88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a8a:	4b20      	ldr	r3, [pc, #128]	; (8002b0c <HAL_RCC_ClockConfig+0x1b8>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 030f 	and.w	r3, r3, #15
 8002a92:	683a      	ldr	r2, [r7, #0]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d001      	beq.n	8002a9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e032      	b.n	8002b02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0304 	and.w	r3, r3, #4
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d008      	beq.n	8002aba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002aa8:	4b19      	ldr	r3, [pc, #100]	; (8002b10 <HAL_RCC_ClockConfig+0x1bc>)
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	4916      	ldr	r1, [pc, #88]	; (8002b10 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0308 	and.w	r3, r3, #8
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d009      	beq.n	8002ada <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ac6:	4b12      	ldr	r3, [pc, #72]	; (8002b10 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	00db      	lsls	r3, r3, #3
 8002ad4:	490e      	ldr	r1, [pc, #56]	; (8002b10 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ada:	f000 f821 	bl	8002b20 <HAL_RCC_GetSysClockFreq>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	4b0b      	ldr	r3, [pc, #44]	; (8002b10 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	091b      	lsrs	r3, r3, #4
 8002ae6:	f003 030f 	and.w	r3, r3, #15
 8002aea:	490a      	ldr	r1, [pc, #40]	; (8002b14 <HAL_RCC_ClockConfig+0x1c0>)
 8002aec:	5ccb      	ldrb	r3, [r1, r3]
 8002aee:	fa22 f303 	lsr.w	r3, r2, r3
 8002af2:	4a09      	ldr	r2, [pc, #36]	; (8002b18 <HAL_RCC_ClockConfig+0x1c4>)
 8002af4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002af6:	4b09      	ldr	r3, [pc, #36]	; (8002b1c <HAL_RCC_ClockConfig+0x1c8>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7fe faae 	bl	800105c <HAL_InitTick>

  return HAL_OK;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3710      	adds	r7, #16
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	40023c00 	.word	0x40023c00
 8002b10:	40023800 	.word	0x40023800
 8002b14:	080049d8 	.word	0x080049d8
 8002b18:	20000008 	.word	0x20000008
 8002b1c:	2000000c 	.word	0x2000000c

08002b20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b24:	b090      	sub	sp, #64	; 0x40
 8002b26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	637b      	str	r3, [r7, #52]	; 0x34
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b30:	2300      	movs	r3, #0
 8002b32:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002b34:	2300      	movs	r3, #0
 8002b36:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b38:	4b59      	ldr	r3, [pc, #356]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f003 030c 	and.w	r3, r3, #12
 8002b40:	2b08      	cmp	r3, #8
 8002b42:	d00d      	beq.n	8002b60 <HAL_RCC_GetSysClockFreq+0x40>
 8002b44:	2b08      	cmp	r3, #8
 8002b46:	f200 80a1 	bhi.w	8002c8c <HAL_RCC_GetSysClockFreq+0x16c>
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d002      	beq.n	8002b54 <HAL_RCC_GetSysClockFreq+0x34>
 8002b4e:	2b04      	cmp	r3, #4
 8002b50:	d003      	beq.n	8002b5a <HAL_RCC_GetSysClockFreq+0x3a>
 8002b52:	e09b      	b.n	8002c8c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b54:	4b53      	ldr	r3, [pc, #332]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002b56:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002b58:	e09b      	b.n	8002c92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b5a:	4b53      	ldr	r3, [pc, #332]	; (8002ca8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b5c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002b5e:	e098      	b.n	8002c92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b60:	4b4f      	ldr	r3, [pc, #316]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b68:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b6a:	4b4d      	ldr	r3, [pc, #308]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d028      	beq.n	8002bc8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b76:	4b4a      	ldr	r3, [pc, #296]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	099b      	lsrs	r3, r3, #6
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	623b      	str	r3, [r7, #32]
 8002b80:	627a      	str	r2, [r7, #36]	; 0x24
 8002b82:	6a3b      	ldr	r3, [r7, #32]
 8002b84:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002b88:	2100      	movs	r1, #0
 8002b8a:	4b47      	ldr	r3, [pc, #284]	; (8002ca8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b8c:	fb03 f201 	mul.w	r2, r3, r1
 8002b90:	2300      	movs	r3, #0
 8002b92:	fb00 f303 	mul.w	r3, r0, r3
 8002b96:	4413      	add	r3, r2
 8002b98:	4a43      	ldr	r2, [pc, #268]	; (8002ca8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b9a:	fba0 1202 	umull	r1, r2, r0, r2
 8002b9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ba0:	460a      	mov	r2, r1
 8002ba2:	62ba      	str	r2, [r7, #40]	; 0x28
 8002ba4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ba6:	4413      	add	r3, r2
 8002ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bac:	2200      	movs	r2, #0
 8002bae:	61bb      	str	r3, [r7, #24]
 8002bb0:	61fa      	str	r2, [r7, #28]
 8002bb2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bb6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002bba:	f7fd fb69 	bl	8000290 <__aeabi_uldivmod>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	460b      	mov	r3, r1
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bc6:	e053      	b.n	8002c70 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bc8:	4b35      	ldr	r3, [pc, #212]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	099b      	lsrs	r3, r3, #6
 8002bce:	2200      	movs	r2, #0
 8002bd0:	613b      	str	r3, [r7, #16]
 8002bd2:	617a      	str	r2, [r7, #20]
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002bda:	f04f 0b00 	mov.w	fp, #0
 8002bde:	4652      	mov	r2, sl
 8002be0:	465b      	mov	r3, fp
 8002be2:	f04f 0000 	mov.w	r0, #0
 8002be6:	f04f 0100 	mov.w	r1, #0
 8002bea:	0159      	lsls	r1, r3, #5
 8002bec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bf0:	0150      	lsls	r0, r2, #5
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	ebb2 080a 	subs.w	r8, r2, sl
 8002bfa:	eb63 090b 	sbc.w	r9, r3, fp
 8002bfe:	f04f 0200 	mov.w	r2, #0
 8002c02:	f04f 0300 	mov.w	r3, #0
 8002c06:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002c0a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002c0e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002c12:	ebb2 0408 	subs.w	r4, r2, r8
 8002c16:	eb63 0509 	sbc.w	r5, r3, r9
 8002c1a:	f04f 0200 	mov.w	r2, #0
 8002c1e:	f04f 0300 	mov.w	r3, #0
 8002c22:	00eb      	lsls	r3, r5, #3
 8002c24:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c28:	00e2      	lsls	r2, r4, #3
 8002c2a:	4614      	mov	r4, r2
 8002c2c:	461d      	mov	r5, r3
 8002c2e:	eb14 030a 	adds.w	r3, r4, sl
 8002c32:	603b      	str	r3, [r7, #0]
 8002c34:	eb45 030b 	adc.w	r3, r5, fp
 8002c38:	607b      	str	r3, [r7, #4]
 8002c3a:	f04f 0200 	mov.w	r2, #0
 8002c3e:	f04f 0300 	mov.w	r3, #0
 8002c42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c46:	4629      	mov	r1, r5
 8002c48:	028b      	lsls	r3, r1, #10
 8002c4a:	4621      	mov	r1, r4
 8002c4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c50:	4621      	mov	r1, r4
 8002c52:	028a      	lsls	r2, r1, #10
 8002c54:	4610      	mov	r0, r2
 8002c56:	4619      	mov	r1, r3
 8002c58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	60bb      	str	r3, [r7, #8]
 8002c5e:	60fa      	str	r2, [r7, #12]
 8002c60:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c64:	f7fd fb14 	bl	8000290 <__aeabi_uldivmod>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	460b      	mov	r3, r1
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c70:	4b0b      	ldr	r3, [pc, #44]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	0c1b      	lsrs	r3, r3, #16
 8002c76:	f003 0303 	and.w	r3, r3, #3
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	005b      	lsls	r3, r3, #1
 8002c7e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002c80:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c88:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c8a:	e002      	b.n	8002c92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c8c:	4b05      	ldr	r3, [pc, #20]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002c8e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3740      	adds	r7, #64	; 0x40
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c9e:	bf00      	nop
 8002ca0:	40023800 	.word	0x40023800
 8002ca4:	00f42400 	.word	0x00f42400
 8002ca8:	017d7840 	.word	0x017d7840

08002cac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cb0:	4b03      	ldr	r3, [pc, #12]	; (8002cc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	20000008 	.word	0x20000008

08002cc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002cc8:	f7ff fff0 	bl	8002cac <HAL_RCC_GetHCLKFreq>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	4b05      	ldr	r3, [pc, #20]	; (8002ce4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	0a9b      	lsrs	r3, r3, #10
 8002cd4:	f003 0307 	and.w	r3, r3, #7
 8002cd8:	4903      	ldr	r1, [pc, #12]	; (8002ce8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cda:	5ccb      	ldrb	r3, [r1, r3]
 8002cdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	40023800 	.word	0x40023800
 8002ce8:	080049e8 	.word	0x080049e8

08002cec <sniprintf>:
 8002cec:	b40c      	push	{r2, r3}
 8002cee:	b530      	push	{r4, r5, lr}
 8002cf0:	4b17      	ldr	r3, [pc, #92]	; (8002d50 <sniprintf+0x64>)
 8002cf2:	1e0c      	subs	r4, r1, #0
 8002cf4:	681d      	ldr	r5, [r3, #0]
 8002cf6:	b09d      	sub	sp, #116	; 0x74
 8002cf8:	da08      	bge.n	8002d0c <sniprintf+0x20>
 8002cfa:	238b      	movs	r3, #139	; 0x8b
 8002cfc:	602b      	str	r3, [r5, #0]
 8002cfe:	f04f 30ff 	mov.w	r0, #4294967295
 8002d02:	b01d      	add	sp, #116	; 0x74
 8002d04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002d08:	b002      	add	sp, #8
 8002d0a:	4770      	bx	lr
 8002d0c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8002d10:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002d14:	bf14      	ite	ne
 8002d16:	f104 33ff 	addne.w	r3, r4, #4294967295
 8002d1a:	4623      	moveq	r3, r4
 8002d1c:	9304      	str	r3, [sp, #16]
 8002d1e:	9307      	str	r3, [sp, #28]
 8002d20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d24:	9002      	str	r0, [sp, #8]
 8002d26:	9006      	str	r0, [sp, #24]
 8002d28:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002d2c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002d2e:	ab21      	add	r3, sp, #132	; 0x84
 8002d30:	a902      	add	r1, sp, #8
 8002d32:	4628      	mov	r0, r5
 8002d34:	9301      	str	r3, [sp, #4]
 8002d36:	f000 f993 	bl	8003060 <_svfiprintf_r>
 8002d3a:	1c43      	adds	r3, r0, #1
 8002d3c:	bfbc      	itt	lt
 8002d3e:	238b      	movlt	r3, #139	; 0x8b
 8002d40:	602b      	strlt	r3, [r5, #0]
 8002d42:	2c00      	cmp	r4, #0
 8002d44:	d0dd      	beq.n	8002d02 <sniprintf+0x16>
 8002d46:	9b02      	ldr	r3, [sp, #8]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	701a      	strb	r2, [r3, #0]
 8002d4c:	e7d9      	b.n	8002d02 <sniprintf+0x16>
 8002d4e:	bf00      	nop
 8002d50:	20000060 	.word	0x20000060

08002d54 <memset>:
 8002d54:	4402      	add	r2, r0
 8002d56:	4603      	mov	r3, r0
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d100      	bne.n	8002d5e <memset+0xa>
 8002d5c:	4770      	bx	lr
 8002d5e:	f803 1b01 	strb.w	r1, [r3], #1
 8002d62:	e7f9      	b.n	8002d58 <memset+0x4>

08002d64 <__errno>:
 8002d64:	4b01      	ldr	r3, [pc, #4]	; (8002d6c <__errno+0x8>)
 8002d66:	6818      	ldr	r0, [r3, #0]
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	20000060 	.word	0x20000060

08002d70 <__libc_init_array>:
 8002d70:	b570      	push	{r4, r5, r6, lr}
 8002d72:	4d0d      	ldr	r5, [pc, #52]	; (8002da8 <__libc_init_array+0x38>)
 8002d74:	4c0d      	ldr	r4, [pc, #52]	; (8002dac <__libc_init_array+0x3c>)
 8002d76:	1b64      	subs	r4, r4, r5
 8002d78:	10a4      	asrs	r4, r4, #2
 8002d7a:	2600      	movs	r6, #0
 8002d7c:	42a6      	cmp	r6, r4
 8002d7e:	d109      	bne.n	8002d94 <__libc_init_array+0x24>
 8002d80:	4d0b      	ldr	r5, [pc, #44]	; (8002db0 <__libc_init_array+0x40>)
 8002d82:	4c0c      	ldr	r4, [pc, #48]	; (8002db4 <__libc_init_array+0x44>)
 8002d84:	f000 fc6a 	bl	800365c <_init>
 8002d88:	1b64      	subs	r4, r4, r5
 8002d8a:	10a4      	asrs	r4, r4, #2
 8002d8c:	2600      	movs	r6, #0
 8002d8e:	42a6      	cmp	r6, r4
 8002d90:	d105      	bne.n	8002d9e <__libc_init_array+0x2e>
 8002d92:	bd70      	pop	{r4, r5, r6, pc}
 8002d94:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d98:	4798      	blx	r3
 8002d9a:	3601      	adds	r6, #1
 8002d9c:	e7ee      	b.n	8002d7c <__libc_init_array+0xc>
 8002d9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002da2:	4798      	blx	r3
 8002da4:	3601      	adds	r6, #1
 8002da6:	e7f2      	b.n	8002d8e <__libc_init_array+0x1e>
 8002da8:	08004a2c 	.word	0x08004a2c
 8002dac:	08004a2c 	.word	0x08004a2c
 8002db0:	08004a2c 	.word	0x08004a2c
 8002db4:	08004a30 	.word	0x08004a30

08002db8 <__retarget_lock_acquire_recursive>:
 8002db8:	4770      	bx	lr

08002dba <__retarget_lock_release_recursive>:
 8002dba:	4770      	bx	lr

08002dbc <_free_r>:
 8002dbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002dbe:	2900      	cmp	r1, #0
 8002dc0:	d044      	beq.n	8002e4c <_free_r+0x90>
 8002dc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002dc6:	9001      	str	r0, [sp, #4]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	f1a1 0404 	sub.w	r4, r1, #4
 8002dce:	bfb8      	it	lt
 8002dd0:	18e4      	addlt	r4, r4, r3
 8002dd2:	f000 f8df 	bl	8002f94 <__malloc_lock>
 8002dd6:	4a1e      	ldr	r2, [pc, #120]	; (8002e50 <_free_r+0x94>)
 8002dd8:	9801      	ldr	r0, [sp, #4]
 8002dda:	6813      	ldr	r3, [r2, #0]
 8002ddc:	b933      	cbnz	r3, 8002dec <_free_r+0x30>
 8002dde:	6063      	str	r3, [r4, #4]
 8002de0:	6014      	str	r4, [r2, #0]
 8002de2:	b003      	add	sp, #12
 8002de4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002de8:	f000 b8da 	b.w	8002fa0 <__malloc_unlock>
 8002dec:	42a3      	cmp	r3, r4
 8002dee:	d908      	bls.n	8002e02 <_free_r+0x46>
 8002df0:	6825      	ldr	r5, [r4, #0]
 8002df2:	1961      	adds	r1, r4, r5
 8002df4:	428b      	cmp	r3, r1
 8002df6:	bf01      	itttt	eq
 8002df8:	6819      	ldreq	r1, [r3, #0]
 8002dfa:	685b      	ldreq	r3, [r3, #4]
 8002dfc:	1949      	addeq	r1, r1, r5
 8002dfe:	6021      	streq	r1, [r4, #0]
 8002e00:	e7ed      	b.n	8002dde <_free_r+0x22>
 8002e02:	461a      	mov	r2, r3
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	b10b      	cbz	r3, 8002e0c <_free_r+0x50>
 8002e08:	42a3      	cmp	r3, r4
 8002e0a:	d9fa      	bls.n	8002e02 <_free_r+0x46>
 8002e0c:	6811      	ldr	r1, [r2, #0]
 8002e0e:	1855      	adds	r5, r2, r1
 8002e10:	42a5      	cmp	r5, r4
 8002e12:	d10b      	bne.n	8002e2c <_free_r+0x70>
 8002e14:	6824      	ldr	r4, [r4, #0]
 8002e16:	4421      	add	r1, r4
 8002e18:	1854      	adds	r4, r2, r1
 8002e1a:	42a3      	cmp	r3, r4
 8002e1c:	6011      	str	r1, [r2, #0]
 8002e1e:	d1e0      	bne.n	8002de2 <_free_r+0x26>
 8002e20:	681c      	ldr	r4, [r3, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	6053      	str	r3, [r2, #4]
 8002e26:	440c      	add	r4, r1
 8002e28:	6014      	str	r4, [r2, #0]
 8002e2a:	e7da      	b.n	8002de2 <_free_r+0x26>
 8002e2c:	d902      	bls.n	8002e34 <_free_r+0x78>
 8002e2e:	230c      	movs	r3, #12
 8002e30:	6003      	str	r3, [r0, #0]
 8002e32:	e7d6      	b.n	8002de2 <_free_r+0x26>
 8002e34:	6825      	ldr	r5, [r4, #0]
 8002e36:	1961      	adds	r1, r4, r5
 8002e38:	428b      	cmp	r3, r1
 8002e3a:	bf04      	itt	eq
 8002e3c:	6819      	ldreq	r1, [r3, #0]
 8002e3e:	685b      	ldreq	r3, [r3, #4]
 8002e40:	6063      	str	r3, [r4, #4]
 8002e42:	bf04      	itt	eq
 8002e44:	1949      	addeq	r1, r1, r5
 8002e46:	6021      	streq	r1, [r4, #0]
 8002e48:	6054      	str	r4, [r2, #4]
 8002e4a:	e7ca      	b.n	8002de2 <_free_r+0x26>
 8002e4c:	b003      	add	sp, #12
 8002e4e:	bd30      	pop	{r4, r5, pc}
 8002e50:	20000628 	.word	0x20000628

08002e54 <sbrk_aligned>:
 8002e54:	b570      	push	{r4, r5, r6, lr}
 8002e56:	4e0e      	ldr	r6, [pc, #56]	; (8002e90 <sbrk_aligned+0x3c>)
 8002e58:	460c      	mov	r4, r1
 8002e5a:	6831      	ldr	r1, [r6, #0]
 8002e5c:	4605      	mov	r5, r0
 8002e5e:	b911      	cbnz	r1, 8002e66 <sbrk_aligned+0x12>
 8002e60:	f000 fba6 	bl	80035b0 <_sbrk_r>
 8002e64:	6030      	str	r0, [r6, #0]
 8002e66:	4621      	mov	r1, r4
 8002e68:	4628      	mov	r0, r5
 8002e6a:	f000 fba1 	bl	80035b0 <_sbrk_r>
 8002e6e:	1c43      	adds	r3, r0, #1
 8002e70:	d00a      	beq.n	8002e88 <sbrk_aligned+0x34>
 8002e72:	1cc4      	adds	r4, r0, #3
 8002e74:	f024 0403 	bic.w	r4, r4, #3
 8002e78:	42a0      	cmp	r0, r4
 8002e7a:	d007      	beq.n	8002e8c <sbrk_aligned+0x38>
 8002e7c:	1a21      	subs	r1, r4, r0
 8002e7e:	4628      	mov	r0, r5
 8002e80:	f000 fb96 	bl	80035b0 <_sbrk_r>
 8002e84:	3001      	adds	r0, #1
 8002e86:	d101      	bne.n	8002e8c <sbrk_aligned+0x38>
 8002e88:	f04f 34ff 	mov.w	r4, #4294967295
 8002e8c:	4620      	mov	r0, r4
 8002e8e:	bd70      	pop	{r4, r5, r6, pc}
 8002e90:	2000062c 	.word	0x2000062c

08002e94 <_malloc_r>:
 8002e94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002e98:	1ccd      	adds	r5, r1, #3
 8002e9a:	f025 0503 	bic.w	r5, r5, #3
 8002e9e:	3508      	adds	r5, #8
 8002ea0:	2d0c      	cmp	r5, #12
 8002ea2:	bf38      	it	cc
 8002ea4:	250c      	movcc	r5, #12
 8002ea6:	2d00      	cmp	r5, #0
 8002ea8:	4607      	mov	r7, r0
 8002eaa:	db01      	blt.n	8002eb0 <_malloc_r+0x1c>
 8002eac:	42a9      	cmp	r1, r5
 8002eae:	d905      	bls.n	8002ebc <_malloc_r+0x28>
 8002eb0:	230c      	movs	r3, #12
 8002eb2:	603b      	str	r3, [r7, #0]
 8002eb4:	2600      	movs	r6, #0
 8002eb6:	4630      	mov	r0, r6
 8002eb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002ebc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002f90 <_malloc_r+0xfc>
 8002ec0:	f000 f868 	bl	8002f94 <__malloc_lock>
 8002ec4:	f8d8 3000 	ldr.w	r3, [r8]
 8002ec8:	461c      	mov	r4, r3
 8002eca:	bb5c      	cbnz	r4, 8002f24 <_malloc_r+0x90>
 8002ecc:	4629      	mov	r1, r5
 8002ece:	4638      	mov	r0, r7
 8002ed0:	f7ff ffc0 	bl	8002e54 <sbrk_aligned>
 8002ed4:	1c43      	adds	r3, r0, #1
 8002ed6:	4604      	mov	r4, r0
 8002ed8:	d155      	bne.n	8002f86 <_malloc_r+0xf2>
 8002eda:	f8d8 4000 	ldr.w	r4, [r8]
 8002ede:	4626      	mov	r6, r4
 8002ee0:	2e00      	cmp	r6, #0
 8002ee2:	d145      	bne.n	8002f70 <_malloc_r+0xdc>
 8002ee4:	2c00      	cmp	r4, #0
 8002ee6:	d048      	beq.n	8002f7a <_malloc_r+0xe6>
 8002ee8:	6823      	ldr	r3, [r4, #0]
 8002eea:	4631      	mov	r1, r6
 8002eec:	4638      	mov	r0, r7
 8002eee:	eb04 0903 	add.w	r9, r4, r3
 8002ef2:	f000 fb5d 	bl	80035b0 <_sbrk_r>
 8002ef6:	4581      	cmp	r9, r0
 8002ef8:	d13f      	bne.n	8002f7a <_malloc_r+0xe6>
 8002efa:	6821      	ldr	r1, [r4, #0]
 8002efc:	1a6d      	subs	r5, r5, r1
 8002efe:	4629      	mov	r1, r5
 8002f00:	4638      	mov	r0, r7
 8002f02:	f7ff ffa7 	bl	8002e54 <sbrk_aligned>
 8002f06:	3001      	adds	r0, #1
 8002f08:	d037      	beq.n	8002f7a <_malloc_r+0xe6>
 8002f0a:	6823      	ldr	r3, [r4, #0]
 8002f0c:	442b      	add	r3, r5
 8002f0e:	6023      	str	r3, [r4, #0]
 8002f10:	f8d8 3000 	ldr.w	r3, [r8]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d038      	beq.n	8002f8a <_malloc_r+0xf6>
 8002f18:	685a      	ldr	r2, [r3, #4]
 8002f1a:	42a2      	cmp	r2, r4
 8002f1c:	d12b      	bne.n	8002f76 <_malloc_r+0xe2>
 8002f1e:	2200      	movs	r2, #0
 8002f20:	605a      	str	r2, [r3, #4]
 8002f22:	e00f      	b.n	8002f44 <_malloc_r+0xb0>
 8002f24:	6822      	ldr	r2, [r4, #0]
 8002f26:	1b52      	subs	r2, r2, r5
 8002f28:	d41f      	bmi.n	8002f6a <_malloc_r+0xd6>
 8002f2a:	2a0b      	cmp	r2, #11
 8002f2c:	d917      	bls.n	8002f5e <_malloc_r+0xca>
 8002f2e:	1961      	adds	r1, r4, r5
 8002f30:	42a3      	cmp	r3, r4
 8002f32:	6025      	str	r5, [r4, #0]
 8002f34:	bf18      	it	ne
 8002f36:	6059      	strne	r1, [r3, #4]
 8002f38:	6863      	ldr	r3, [r4, #4]
 8002f3a:	bf08      	it	eq
 8002f3c:	f8c8 1000 	streq.w	r1, [r8]
 8002f40:	5162      	str	r2, [r4, r5]
 8002f42:	604b      	str	r3, [r1, #4]
 8002f44:	4638      	mov	r0, r7
 8002f46:	f104 060b 	add.w	r6, r4, #11
 8002f4a:	f000 f829 	bl	8002fa0 <__malloc_unlock>
 8002f4e:	f026 0607 	bic.w	r6, r6, #7
 8002f52:	1d23      	adds	r3, r4, #4
 8002f54:	1af2      	subs	r2, r6, r3
 8002f56:	d0ae      	beq.n	8002eb6 <_malloc_r+0x22>
 8002f58:	1b9b      	subs	r3, r3, r6
 8002f5a:	50a3      	str	r3, [r4, r2]
 8002f5c:	e7ab      	b.n	8002eb6 <_malloc_r+0x22>
 8002f5e:	42a3      	cmp	r3, r4
 8002f60:	6862      	ldr	r2, [r4, #4]
 8002f62:	d1dd      	bne.n	8002f20 <_malloc_r+0x8c>
 8002f64:	f8c8 2000 	str.w	r2, [r8]
 8002f68:	e7ec      	b.n	8002f44 <_malloc_r+0xb0>
 8002f6a:	4623      	mov	r3, r4
 8002f6c:	6864      	ldr	r4, [r4, #4]
 8002f6e:	e7ac      	b.n	8002eca <_malloc_r+0x36>
 8002f70:	4634      	mov	r4, r6
 8002f72:	6876      	ldr	r6, [r6, #4]
 8002f74:	e7b4      	b.n	8002ee0 <_malloc_r+0x4c>
 8002f76:	4613      	mov	r3, r2
 8002f78:	e7cc      	b.n	8002f14 <_malloc_r+0x80>
 8002f7a:	230c      	movs	r3, #12
 8002f7c:	603b      	str	r3, [r7, #0]
 8002f7e:	4638      	mov	r0, r7
 8002f80:	f000 f80e 	bl	8002fa0 <__malloc_unlock>
 8002f84:	e797      	b.n	8002eb6 <_malloc_r+0x22>
 8002f86:	6025      	str	r5, [r4, #0]
 8002f88:	e7dc      	b.n	8002f44 <_malloc_r+0xb0>
 8002f8a:	605b      	str	r3, [r3, #4]
 8002f8c:	deff      	udf	#255	; 0xff
 8002f8e:	bf00      	nop
 8002f90:	20000628 	.word	0x20000628

08002f94 <__malloc_lock>:
 8002f94:	4801      	ldr	r0, [pc, #4]	; (8002f9c <__malloc_lock+0x8>)
 8002f96:	f7ff bf0f 	b.w	8002db8 <__retarget_lock_acquire_recursive>
 8002f9a:	bf00      	nop
 8002f9c:	20000624 	.word	0x20000624

08002fa0 <__malloc_unlock>:
 8002fa0:	4801      	ldr	r0, [pc, #4]	; (8002fa8 <__malloc_unlock+0x8>)
 8002fa2:	f7ff bf0a 	b.w	8002dba <__retarget_lock_release_recursive>
 8002fa6:	bf00      	nop
 8002fa8:	20000624 	.word	0x20000624

08002fac <__ssputs_r>:
 8002fac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002fb0:	688e      	ldr	r6, [r1, #8]
 8002fb2:	461f      	mov	r7, r3
 8002fb4:	42be      	cmp	r6, r7
 8002fb6:	680b      	ldr	r3, [r1, #0]
 8002fb8:	4682      	mov	sl, r0
 8002fba:	460c      	mov	r4, r1
 8002fbc:	4690      	mov	r8, r2
 8002fbe:	d82c      	bhi.n	800301a <__ssputs_r+0x6e>
 8002fc0:	898a      	ldrh	r2, [r1, #12]
 8002fc2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002fc6:	d026      	beq.n	8003016 <__ssputs_r+0x6a>
 8002fc8:	6965      	ldr	r5, [r4, #20]
 8002fca:	6909      	ldr	r1, [r1, #16]
 8002fcc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002fd0:	eba3 0901 	sub.w	r9, r3, r1
 8002fd4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002fd8:	1c7b      	adds	r3, r7, #1
 8002fda:	444b      	add	r3, r9
 8002fdc:	106d      	asrs	r5, r5, #1
 8002fde:	429d      	cmp	r5, r3
 8002fe0:	bf38      	it	cc
 8002fe2:	461d      	movcc	r5, r3
 8002fe4:	0553      	lsls	r3, r2, #21
 8002fe6:	d527      	bpl.n	8003038 <__ssputs_r+0x8c>
 8002fe8:	4629      	mov	r1, r5
 8002fea:	f7ff ff53 	bl	8002e94 <_malloc_r>
 8002fee:	4606      	mov	r6, r0
 8002ff0:	b360      	cbz	r0, 800304c <__ssputs_r+0xa0>
 8002ff2:	6921      	ldr	r1, [r4, #16]
 8002ff4:	464a      	mov	r2, r9
 8002ff6:	f000 faeb 	bl	80035d0 <memcpy>
 8002ffa:	89a3      	ldrh	r3, [r4, #12]
 8002ffc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003000:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003004:	81a3      	strh	r3, [r4, #12]
 8003006:	6126      	str	r6, [r4, #16]
 8003008:	6165      	str	r5, [r4, #20]
 800300a:	444e      	add	r6, r9
 800300c:	eba5 0509 	sub.w	r5, r5, r9
 8003010:	6026      	str	r6, [r4, #0]
 8003012:	60a5      	str	r5, [r4, #8]
 8003014:	463e      	mov	r6, r7
 8003016:	42be      	cmp	r6, r7
 8003018:	d900      	bls.n	800301c <__ssputs_r+0x70>
 800301a:	463e      	mov	r6, r7
 800301c:	6820      	ldr	r0, [r4, #0]
 800301e:	4632      	mov	r2, r6
 8003020:	4641      	mov	r1, r8
 8003022:	f000 faab 	bl	800357c <memmove>
 8003026:	68a3      	ldr	r3, [r4, #8]
 8003028:	1b9b      	subs	r3, r3, r6
 800302a:	60a3      	str	r3, [r4, #8]
 800302c:	6823      	ldr	r3, [r4, #0]
 800302e:	4433      	add	r3, r6
 8003030:	6023      	str	r3, [r4, #0]
 8003032:	2000      	movs	r0, #0
 8003034:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003038:	462a      	mov	r2, r5
 800303a:	f000 fad7 	bl	80035ec <_realloc_r>
 800303e:	4606      	mov	r6, r0
 8003040:	2800      	cmp	r0, #0
 8003042:	d1e0      	bne.n	8003006 <__ssputs_r+0x5a>
 8003044:	6921      	ldr	r1, [r4, #16]
 8003046:	4650      	mov	r0, sl
 8003048:	f7ff feb8 	bl	8002dbc <_free_r>
 800304c:	230c      	movs	r3, #12
 800304e:	f8ca 3000 	str.w	r3, [sl]
 8003052:	89a3      	ldrh	r3, [r4, #12]
 8003054:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003058:	81a3      	strh	r3, [r4, #12]
 800305a:	f04f 30ff 	mov.w	r0, #4294967295
 800305e:	e7e9      	b.n	8003034 <__ssputs_r+0x88>

08003060 <_svfiprintf_r>:
 8003060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003064:	4698      	mov	r8, r3
 8003066:	898b      	ldrh	r3, [r1, #12]
 8003068:	061b      	lsls	r3, r3, #24
 800306a:	b09d      	sub	sp, #116	; 0x74
 800306c:	4607      	mov	r7, r0
 800306e:	460d      	mov	r5, r1
 8003070:	4614      	mov	r4, r2
 8003072:	d50e      	bpl.n	8003092 <_svfiprintf_r+0x32>
 8003074:	690b      	ldr	r3, [r1, #16]
 8003076:	b963      	cbnz	r3, 8003092 <_svfiprintf_r+0x32>
 8003078:	2140      	movs	r1, #64	; 0x40
 800307a:	f7ff ff0b 	bl	8002e94 <_malloc_r>
 800307e:	6028      	str	r0, [r5, #0]
 8003080:	6128      	str	r0, [r5, #16]
 8003082:	b920      	cbnz	r0, 800308e <_svfiprintf_r+0x2e>
 8003084:	230c      	movs	r3, #12
 8003086:	603b      	str	r3, [r7, #0]
 8003088:	f04f 30ff 	mov.w	r0, #4294967295
 800308c:	e0d0      	b.n	8003230 <_svfiprintf_r+0x1d0>
 800308e:	2340      	movs	r3, #64	; 0x40
 8003090:	616b      	str	r3, [r5, #20]
 8003092:	2300      	movs	r3, #0
 8003094:	9309      	str	r3, [sp, #36]	; 0x24
 8003096:	2320      	movs	r3, #32
 8003098:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800309c:	f8cd 800c 	str.w	r8, [sp, #12]
 80030a0:	2330      	movs	r3, #48	; 0x30
 80030a2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003248 <_svfiprintf_r+0x1e8>
 80030a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80030aa:	f04f 0901 	mov.w	r9, #1
 80030ae:	4623      	mov	r3, r4
 80030b0:	469a      	mov	sl, r3
 80030b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80030b6:	b10a      	cbz	r2, 80030bc <_svfiprintf_r+0x5c>
 80030b8:	2a25      	cmp	r2, #37	; 0x25
 80030ba:	d1f9      	bne.n	80030b0 <_svfiprintf_r+0x50>
 80030bc:	ebba 0b04 	subs.w	fp, sl, r4
 80030c0:	d00b      	beq.n	80030da <_svfiprintf_r+0x7a>
 80030c2:	465b      	mov	r3, fp
 80030c4:	4622      	mov	r2, r4
 80030c6:	4629      	mov	r1, r5
 80030c8:	4638      	mov	r0, r7
 80030ca:	f7ff ff6f 	bl	8002fac <__ssputs_r>
 80030ce:	3001      	adds	r0, #1
 80030d0:	f000 80a9 	beq.w	8003226 <_svfiprintf_r+0x1c6>
 80030d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80030d6:	445a      	add	r2, fp
 80030d8:	9209      	str	r2, [sp, #36]	; 0x24
 80030da:	f89a 3000 	ldrb.w	r3, [sl]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	f000 80a1 	beq.w	8003226 <_svfiprintf_r+0x1c6>
 80030e4:	2300      	movs	r3, #0
 80030e6:	f04f 32ff 	mov.w	r2, #4294967295
 80030ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80030ee:	f10a 0a01 	add.w	sl, sl, #1
 80030f2:	9304      	str	r3, [sp, #16]
 80030f4:	9307      	str	r3, [sp, #28]
 80030f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80030fa:	931a      	str	r3, [sp, #104]	; 0x68
 80030fc:	4654      	mov	r4, sl
 80030fe:	2205      	movs	r2, #5
 8003100:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003104:	4850      	ldr	r0, [pc, #320]	; (8003248 <_svfiprintf_r+0x1e8>)
 8003106:	f7fd f873 	bl	80001f0 <memchr>
 800310a:	9a04      	ldr	r2, [sp, #16]
 800310c:	b9d8      	cbnz	r0, 8003146 <_svfiprintf_r+0xe6>
 800310e:	06d0      	lsls	r0, r2, #27
 8003110:	bf44      	itt	mi
 8003112:	2320      	movmi	r3, #32
 8003114:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003118:	0711      	lsls	r1, r2, #28
 800311a:	bf44      	itt	mi
 800311c:	232b      	movmi	r3, #43	; 0x2b
 800311e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003122:	f89a 3000 	ldrb.w	r3, [sl]
 8003126:	2b2a      	cmp	r3, #42	; 0x2a
 8003128:	d015      	beq.n	8003156 <_svfiprintf_r+0xf6>
 800312a:	9a07      	ldr	r2, [sp, #28]
 800312c:	4654      	mov	r4, sl
 800312e:	2000      	movs	r0, #0
 8003130:	f04f 0c0a 	mov.w	ip, #10
 8003134:	4621      	mov	r1, r4
 8003136:	f811 3b01 	ldrb.w	r3, [r1], #1
 800313a:	3b30      	subs	r3, #48	; 0x30
 800313c:	2b09      	cmp	r3, #9
 800313e:	d94d      	bls.n	80031dc <_svfiprintf_r+0x17c>
 8003140:	b1b0      	cbz	r0, 8003170 <_svfiprintf_r+0x110>
 8003142:	9207      	str	r2, [sp, #28]
 8003144:	e014      	b.n	8003170 <_svfiprintf_r+0x110>
 8003146:	eba0 0308 	sub.w	r3, r0, r8
 800314a:	fa09 f303 	lsl.w	r3, r9, r3
 800314e:	4313      	orrs	r3, r2
 8003150:	9304      	str	r3, [sp, #16]
 8003152:	46a2      	mov	sl, r4
 8003154:	e7d2      	b.n	80030fc <_svfiprintf_r+0x9c>
 8003156:	9b03      	ldr	r3, [sp, #12]
 8003158:	1d19      	adds	r1, r3, #4
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	9103      	str	r1, [sp, #12]
 800315e:	2b00      	cmp	r3, #0
 8003160:	bfbb      	ittet	lt
 8003162:	425b      	neglt	r3, r3
 8003164:	f042 0202 	orrlt.w	r2, r2, #2
 8003168:	9307      	strge	r3, [sp, #28]
 800316a:	9307      	strlt	r3, [sp, #28]
 800316c:	bfb8      	it	lt
 800316e:	9204      	strlt	r2, [sp, #16]
 8003170:	7823      	ldrb	r3, [r4, #0]
 8003172:	2b2e      	cmp	r3, #46	; 0x2e
 8003174:	d10c      	bne.n	8003190 <_svfiprintf_r+0x130>
 8003176:	7863      	ldrb	r3, [r4, #1]
 8003178:	2b2a      	cmp	r3, #42	; 0x2a
 800317a:	d134      	bne.n	80031e6 <_svfiprintf_r+0x186>
 800317c:	9b03      	ldr	r3, [sp, #12]
 800317e:	1d1a      	adds	r2, r3, #4
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	9203      	str	r2, [sp, #12]
 8003184:	2b00      	cmp	r3, #0
 8003186:	bfb8      	it	lt
 8003188:	f04f 33ff 	movlt.w	r3, #4294967295
 800318c:	3402      	adds	r4, #2
 800318e:	9305      	str	r3, [sp, #20]
 8003190:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003258 <_svfiprintf_r+0x1f8>
 8003194:	7821      	ldrb	r1, [r4, #0]
 8003196:	2203      	movs	r2, #3
 8003198:	4650      	mov	r0, sl
 800319a:	f7fd f829 	bl	80001f0 <memchr>
 800319e:	b138      	cbz	r0, 80031b0 <_svfiprintf_r+0x150>
 80031a0:	9b04      	ldr	r3, [sp, #16]
 80031a2:	eba0 000a 	sub.w	r0, r0, sl
 80031a6:	2240      	movs	r2, #64	; 0x40
 80031a8:	4082      	lsls	r2, r0
 80031aa:	4313      	orrs	r3, r2
 80031ac:	3401      	adds	r4, #1
 80031ae:	9304      	str	r3, [sp, #16]
 80031b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031b4:	4825      	ldr	r0, [pc, #148]	; (800324c <_svfiprintf_r+0x1ec>)
 80031b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80031ba:	2206      	movs	r2, #6
 80031bc:	f7fd f818 	bl	80001f0 <memchr>
 80031c0:	2800      	cmp	r0, #0
 80031c2:	d038      	beq.n	8003236 <_svfiprintf_r+0x1d6>
 80031c4:	4b22      	ldr	r3, [pc, #136]	; (8003250 <_svfiprintf_r+0x1f0>)
 80031c6:	bb1b      	cbnz	r3, 8003210 <_svfiprintf_r+0x1b0>
 80031c8:	9b03      	ldr	r3, [sp, #12]
 80031ca:	3307      	adds	r3, #7
 80031cc:	f023 0307 	bic.w	r3, r3, #7
 80031d0:	3308      	adds	r3, #8
 80031d2:	9303      	str	r3, [sp, #12]
 80031d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80031d6:	4433      	add	r3, r6
 80031d8:	9309      	str	r3, [sp, #36]	; 0x24
 80031da:	e768      	b.n	80030ae <_svfiprintf_r+0x4e>
 80031dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80031e0:	460c      	mov	r4, r1
 80031e2:	2001      	movs	r0, #1
 80031e4:	e7a6      	b.n	8003134 <_svfiprintf_r+0xd4>
 80031e6:	2300      	movs	r3, #0
 80031e8:	3401      	adds	r4, #1
 80031ea:	9305      	str	r3, [sp, #20]
 80031ec:	4619      	mov	r1, r3
 80031ee:	f04f 0c0a 	mov.w	ip, #10
 80031f2:	4620      	mov	r0, r4
 80031f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80031f8:	3a30      	subs	r2, #48	; 0x30
 80031fa:	2a09      	cmp	r2, #9
 80031fc:	d903      	bls.n	8003206 <_svfiprintf_r+0x1a6>
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d0c6      	beq.n	8003190 <_svfiprintf_r+0x130>
 8003202:	9105      	str	r1, [sp, #20]
 8003204:	e7c4      	b.n	8003190 <_svfiprintf_r+0x130>
 8003206:	fb0c 2101 	mla	r1, ip, r1, r2
 800320a:	4604      	mov	r4, r0
 800320c:	2301      	movs	r3, #1
 800320e:	e7f0      	b.n	80031f2 <_svfiprintf_r+0x192>
 8003210:	ab03      	add	r3, sp, #12
 8003212:	9300      	str	r3, [sp, #0]
 8003214:	462a      	mov	r2, r5
 8003216:	4b0f      	ldr	r3, [pc, #60]	; (8003254 <_svfiprintf_r+0x1f4>)
 8003218:	a904      	add	r1, sp, #16
 800321a:	4638      	mov	r0, r7
 800321c:	f3af 8000 	nop.w
 8003220:	1c42      	adds	r2, r0, #1
 8003222:	4606      	mov	r6, r0
 8003224:	d1d6      	bne.n	80031d4 <_svfiprintf_r+0x174>
 8003226:	89ab      	ldrh	r3, [r5, #12]
 8003228:	065b      	lsls	r3, r3, #25
 800322a:	f53f af2d 	bmi.w	8003088 <_svfiprintf_r+0x28>
 800322e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003230:	b01d      	add	sp, #116	; 0x74
 8003232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003236:	ab03      	add	r3, sp, #12
 8003238:	9300      	str	r3, [sp, #0]
 800323a:	462a      	mov	r2, r5
 800323c:	4b05      	ldr	r3, [pc, #20]	; (8003254 <_svfiprintf_r+0x1f4>)
 800323e:	a904      	add	r1, sp, #16
 8003240:	4638      	mov	r0, r7
 8003242:	f000 f879 	bl	8003338 <_printf_i>
 8003246:	e7eb      	b.n	8003220 <_svfiprintf_r+0x1c0>
 8003248:	080049f0 	.word	0x080049f0
 800324c:	080049fa 	.word	0x080049fa
 8003250:	00000000 	.word	0x00000000
 8003254:	08002fad 	.word	0x08002fad
 8003258:	080049f6 	.word	0x080049f6

0800325c <_printf_common>:
 800325c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003260:	4616      	mov	r6, r2
 8003262:	4699      	mov	r9, r3
 8003264:	688a      	ldr	r2, [r1, #8]
 8003266:	690b      	ldr	r3, [r1, #16]
 8003268:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800326c:	4293      	cmp	r3, r2
 800326e:	bfb8      	it	lt
 8003270:	4613      	movlt	r3, r2
 8003272:	6033      	str	r3, [r6, #0]
 8003274:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003278:	4607      	mov	r7, r0
 800327a:	460c      	mov	r4, r1
 800327c:	b10a      	cbz	r2, 8003282 <_printf_common+0x26>
 800327e:	3301      	adds	r3, #1
 8003280:	6033      	str	r3, [r6, #0]
 8003282:	6823      	ldr	r3, [r4, #0]
 8003284:	0699      	lsls	r1, r3, #26
 8003286:	bf42      	ittt	mi
 8003288:	6833      	ldrmi	r3, [r6, #0]
 800328a:	3302      	addmi	r3, #2
 800328c:	6033      	strmi	r3, [r6, #0]
 800328e:	6825      	ldr	r5, [r4, #0]
 8003290:	f015 0506 	ands.w	r5, r5, #6
 8003294:	d106      	bne.n	80032a4 <_printf_common+0x48>
 8003296:	f104 0a19 	add.w	sl, r4, #25
 800329a:	68e3      	ldr	r3, [r4, #12]
 800329c:	6832      	ldr	r2, [r6, #0]
 800329e:	1a9b      	subs	r3, r3, r2
 80032a0:	42ab      	cmp	r3, r5
 80032a2:	dc26      	bgt.n	80032f2 <_printf_common+0x96>
 80032a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80032a8:	1e13      	subs	r3, r2, #0
 80032aa:	6822      	ldr	r2, [r4, #0]
 80032ac:	bf18      	it	ne
 80032ae:	2301      	movne	r3, #1
 80032b0:	0692      	lsls	r2, r2, #26
 80032b2:	d42b      	bmi.n	800330c <_printf_common+0xb0>
 80032b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80032b8:	4649      	mov	r1, r9
 80032ba:	4638      	mov	r0, r7
 80032bc:	47c0      	blx	r8
 80032be:	3001      	adds	r0, #1
 80032c0:	d01e      	beq.n	8003300 <_printf_common+0xa4>
 80032c2:	6823      	ldr	r3, [r4, #0]
 80032c4:	6922      	ldr	r2, [r4, #16]
 80032c6:	f003 0306 	and.w	r3, r3, #6
 80032ca:	2b04      	cmp	r3, #4
 80032cc:	bf02      	ittt	eq
 80032ce:	68e5      	ldreq	r5, [r4, #12]
 80032d0:	6833      	ldreq	r3, [r6, #0]
 80032d2:	1aed      	subeq	r5, r5, r3
 80032d4:	68a3      	ldr	r3, [r4, #8]
 80032d6:	bf0c      	ite	eq
 80032d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80032dc:	2500      	movne	r5, #0
 80032de:	4293      	cmp	r3, r2
 80032e0:	bfc4      	itt	gt
 80032e2:	1a9b      	subgt	r3, r3, r2
 80032e4:	18ed      	addgt	r5, r5, r3
 80032e6:	2600      	movs	r6, #0
 80032e8:	341a      	adds	r4, #26
 80032ea:	42b5      	cmp	r5, r6
 80032ec:	d11a      	bne.n	8003324 <_printf_common+0xc8>
 80032ee:	2000      	movs	r0, #0
 80032f0:	e008      	b.n	8003304 <_printf_common+0xa8>
 80032f2:	2301      	movs	r3, #1
 80032f4:	4652      	mov	r2, sl
 80032f6:	4649      	mov	r1, r9
 80032f8:	4638      	mov	r0, r7
 80032fa:	47c0      	blx	r8
 80032fc:	3001      	adds	r0, #1
 80032fe:	d103      	bne.n	8003308 <_printf_common+0xac>
 8003300:	f04f 30ff 	mov.w	r0, #4294967295
 8003304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003308:	3501      	adds	r5, #1
 800330a:	e7c6      	b.n	800329a <_printf_common+0x3e>
 800330c:	18e1      	adds	r1, r4, r3
 800330e:	1c5a      	adds	r2, r3, #1
 8003310:	2030      	movs	r0, #48	; 0x30
 8003312:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003316:	4422      	add	r2, r4
 8003318:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800331c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003320:	3302      	adds	r3, #2
 8003322:	e7c7      	b.n	80032b4 <_printf_common+0x58>
 8003324:	2301      	movs	r3, #1
 8003326:	4622      	mov	r2, r4
 8003328:	4649      	mov	r1, r9
 800332a:	4638      	mov	r0, r7
 800332c:	47c0      	blx	r8
 800332e:	3001      	adds	r0, #1
 8003330:	d0e6      	beq.n	8003300 <_printf_common+0xa4>
 8003332:	3601      	adds	r6, #1
 8003334:	e7d9      	b.n	80032ea <_printf_common+0x8e>
	...

08003338 <_printf_i>:
 8003338:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800333c:	7e0f      	ldrb	r7, [r1, #24]
 800333e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003340:	2f78      	cmp	r7, #120	; 0x78
 8003342:	4691      	mov	r9, r2
 8003344:	4680      	mov	r8, r0
 8003346:	460c      	mov	r4, r1
 8003348:	469a      	mov	sl, r3
 800334a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800334e:	d807      	bhi.n	8003360 <_printf_i+0x28>
 8003350:	2f62      	cmp	r7, #98	; 0x62
 8003352:	d80a      	bhi.n	800336a <_printf_i+0x32>
 8003354:	2f00      	cmp	r7, #0
 8003356:	f000 80d4 	beq.w	8003502 <_printf_i+0x1ca>
 800335a:	2f58      	cmp	r7, #88	; 0x58
 800335c:	f000 80c0 	beq.w	80034e0 <_printf_i+0x1a8>
 8003360:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003364:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003368:	e03a      	b.n	80033e0 <_printf_i+0xa8>
 800336a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800336e:	2b15      	cmp	r3, #21
 8003370:	d8f6      	bhi.n	8003360 <_printf_i+0x28>
 8003372:	a101      	add	r1, pc, #4	; (adr r1, 8003378 <_printf_i+0x40>)
 8003374:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003378:	080033d1 	.word	0x080033d1
 800337c:	080033e5 	.word	0x080033e5
 8003380:	08003361 	.word	0x08003361
 8003384:	08003361 	.word	0x08003361
 8003388:	08003361 	.word	0x08003361
 800338c:	08003361 	.word	0x08003361
 8003390:	080033e5 	.word	0x080033e5
 8003394:	08003361 	.word	0x08003361
 8003398:	08003361 	.word	0x08003361
 800339c:	08003361 	.word	0x08003361
 80033a0:	08003361 	.word	0x08003361
 80033a4:	080034e9 	.word	0x080034e9
 80033a8:	08003411 	.word	0x08003411
 80033ac:	080034a3 	.word	0x080034a3
 80033b0:	08003361 	.word	0x08003361
 80033b4:	08003361 	.word	0x08003361
 80033b8:	0800350b 	.word	0x0800350b
 80033bc:	08003361 	.word	0x08003361
 80033c0:	08003411 	.word	0x08003411
 80033c4:	08003361 	.word	0x08003361
 80033c8:	08003361 	.word	0x08003361
 80033cc:	080034ab 	.word	0x080034ab
 80033d0:	682b      	ldr	r3, [r5, #0]
 80033d2:	1d1a      	adds	r2, r3, #4
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	602a      	str	r2, [r5, #0]
 80033d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80033dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80033e0:	2301      	movs	r3, #1
 80033e2:	e09f      	b.n	8003524 <_printf_i+0x1ec>
 80033e4:	6820      	ldr	r0, [r4, #0]
 80033e6:	682b      	ldr	r3, [r5, #0]
 80033e8:	0607      	lsls	r7, r0, #24
 80033ea:	f103 0104 	add.w	r1, r3, #4
 80033ee:	6029      	str	r1, [r5, #0]
 80033f0:	d501      	bpl.n	80033f6 <_printf_i+0xbe>
 80033f2:	681e      	ldr	r6, [r3, #0]
 80033f4:	e003      	b.n	80033fe <_printf_i+0xc6>
 80033f6:	0646      	lsls	r6, r0, #25
 80033f8:	d5fb      	bpl.n	80033f2 <_printf_i+0xba>
 80033fa:	f9b3 6000 	ldrsh.w	r6, [r3]
 80033fe:	2e00      	cmp	r6, #0
 8003400:	da03      	bge.n	800340a <_printf_i+0xd2>
 8003402:	232d      	movs	r3, #45	; 0x2d
 8003404:	4276      	negs	r6, r6
 8003406:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800340a:	485a      	ldr	r0, [pc, #360]	; (8003574 <_printf_i+0x23c>)
 800340c:	230a      	movs	r3, #10
 800340e:	e012      	b.n	8003436 <_printf_i+0xfe>
 8003410:	682b      	ldr	r3, [r5, #0]
 8003412:	6820      	ldr	r0, [r4, #0]
 8003414:	1d19      	adds	r1, r3, #4
 8003416:	6029      	str	r1, [r5, #0]
 8003418:	0605      	lsls	r5, r0, #24
 800341a:	d501      	bpl.n	8003420 <_printf_i+0xe8>
 800341c:	681e      	ldr	r6, [r3, #0]
 800341e:	e002      	b.n	8003426 <_printf_i+0xee>
 8003420:	0641      	lsls	r1, r0, #25
 8003422:	d5fb      	bpl.n	800341c <_printf_i+0xe4>
 8003424:	881e      	ldrh	r6, [r3, #0]
 8003426:	4853      	ldr	r0, [pc, #332]	; (8003574 <_printf_i+0x23c>)
 8003428:	2f6f      	cmp	r7, #111	; 0x6f
 800342a:	bf0c      	ite	eq
 800342c:	2308      	moveq	r3, #8
 800342e:	230a      	movne	r3, #10
 8003430:	2100      	movs	r1, #0
 8003432:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003436:	6865      	ldr	r5, [r4, #4]
 8003438:	60a5      	str	r5, [r4, #8]
 800343a:	2d00      	cmp	r5, #0
 800343c:	bfa2      	ittt	ge
 800343e:	6821      	ldrge	r1, [r4, #0]
 8003440:	f021 0104 	bicge.w	r1, r1, #4
 8003444:	6021      	strge	r1, [r4, #0]
 8003446:	b90e      	cbnz	r6, 800344c <_printf_i+0x114>
 8003448:	2d00      	cmp	r5, #0
 800344a:	d04b      	beq.n	80034e4 <_printf_i+0x1ac>
 800344c:	4615      	mov	r5, r2
 800344e:	fbb6 f1f3 	udiv	r1, r6, r3
 8003452:	fb03 6711 	mls	r7, r3, r1, r6
 8003456:	5dc7      	ldrb	r7, [r0, r7]
 8003458:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800345c:	4637      	mov	r7, r6
 800345e:	42bb      	cmp	r3, r7
 8003460:	460e      	mov	r6, r1
 8003462:	d9f4      	bls.n	800344e <_printf_i+0x116>
 8003464:	2b08      	cmp	r3, #8
 8003466:	d10b      	bne.n	8003480 <_printf_i+0x148>
 8003468:	6823      	ldr	r3, [r4, #0]
 800346a:	07de      	lsls	r6, r3, #31
 800346c:	d508      	bpl.n	8003480 <_printf_i+0x148>
 800346e:	6923      	ldr	r3, [r4, #16]
 8003470:	6861      	ldr	r1, [r4, #4]
 8003472:	4299      	cmp	r1, r3
 8003474:	bfde      	ittt	le
 8003476:	2330      	movle	r3, #48	; 0x30
 8003478:	f805 3c01 	strble.w	r3, [r5, #-1]
 800347c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003480:	1b52      	subs	r2, r2, r5
 8003482:	6122      	str	r2, [r4, #16]
 8003484:	f8cd a000 	str.w	sl, [sp]
 8003488:	464b      	mov	r3, r9
 800348a:	aa03      	add	r2, sp, #12
 800348c:	4621      	mov	r1, r4
 800348e:	4640      	mov	r0, r8
 8003490:	f7ff fee4 	bl	800325c <_printf_common>
 8003494:	3001      	adds	r0, #1
 8003496:	d14a      	bne.n	800352e <_printf_i+0x1f6>
 8003498:	f04f 30ff 	mov.w	r0, #4294967295
 800349c:	b004      	add	sp, #16
 800349e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034a2:	6823      	ldr	r3, [r4, #0]
 80034a4:	f043 0320 	orr.w	r3, r3, #32
 80034a8:	6023      	str	r3, [r4, #0]
 80034aa:	4833      	ldr	r0, [pc, #204]	; (8003578 <_printf_i+0x240>)
 80034ac:	2778      	movs	r7, #120	; 0x78
 80034ae:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80034b2:	6823      	ldr	r3, [r4, #0]
 80034b4:	6829      	ldr	r1, [r5, #0]
 80034b6:	061f      	lsls	r7, r3, #24
 80034b8:	f851 6b04 	ldr.w	r6, [r1], #4
 80034bc:	d402      	bmi.n	80034c4 <_printf_i+0x18c>
 80034be:	065f      	lsls	r7, r3, #25
 80034c0:	bf48      	it	mi
 80034c2:	b2b6      	uxthmi	r6, r6
 80034c4:	07df      	lsls	r7, r3, #31
 80034c6:	bf48      	it	mi
 80034c8:	f043 0320 	orrmi.w	r3, r3, #32
 80034cc:	6029      	str	r1, [r5, #0]
 80034ce:	bf48      	it	mi
 80034d0:	6023      	strmi	r3, [r4, #0]
 80034d2:	b91e      	cbnz	r6, 80034dc <_printf_i+0x1a4>
 80034d4:	6823      	ldr	r3, [r4, #0]
 80034d6:	f023 0320 	bic.w	r3, r3, #32
 80034da:	6023      	str	r3, [r4, #0]
 80034dc:	2310      	movs	r3, #16
 80034de:	e7a7      	b.n	8003430 <_printf_i+0xf8>
 80034e0:	4824      	ldr	r0, [pc, #144]	; (8003574 <_printf_i+0x23c>)
 80034e2:	e7e4      	b.n	80034ae <_printf_i+0x176>
 80034e4:	4615      	mov	r5, r2
 80034e6:	e7bd      	b.n	8003464 <_printf_i+0x12c>
 80034e8:	682b      	ldr	r3, [r5, #0]
 80034ea:	6826      	ldr	r6, [r4, #0]
 80034ec:	6961      	ldr	r1, [r4, #20]
 80034ee:	1d18      	adds	r0, r3, #4
 80034f0:	6028      	str	r0, [r5, #0]
 80034f2:	0635      	lsls	r5, r6, #24
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	d501      	bpl.n	80034fc <_printf_i+0x1c4>
 80034f8:	6019      	str	r1, [r3, #0]
 80034fa:	e002      	b.n	8003502 <_printf_i+0x1ca>
 80034fc:	0670      	lsls	r0, r6, #25
 80034fe:	d5fb      	bpl.n	80034f8 <_printf_i+0x1c0>
 8003500:	8019      	strh	r1, [r3, #0]
 8003502:	2300      	movs	r3, #0
 8003504:	6123      	str	r3, [r4, #16]
 8003506:	4615      	mov	r5, r2
 8003508:	e7bc      	b.n	8003484 <_printf_i+0x14c>
 800350a:	682b      	ldr	r3, [r5, #0]
 800350c:	1d1a      	adds	r2, r3, #4
 800350e:	602a      	str	r2, [r5, #0]
 8003510:	681d      	ldr	r5, [r3, #0]
 8003512:	6862      	ldr	r2, [r4, #4]
 8003514:	2100      	movs	r1, #0
 8003516:	4628      	mov	r0, r5
 8003518:	f7fc fe6a 	bl	80001f0 <memchr>
 800351c:	b108      	cbz	r0, 8003522 <_printf_i+0x1ea>
 800351e:	1b40      	subs	r0, r0, r5
 8003520:	6060      	str	r0, [r4, #4]
 8003522:	6863      	ldr	r3, [r4, #4]
 8003524:	6123      	str	r3, [r4, #16]
 8003526:	2300      	movs	r3, #0
 8003528:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800352c:	e7aa      	b.n	8003484 <_printf_i+0x14c>
 800352e:	6923      	ldr	r3, [r4, #16]
 8003530:	462a      	mov	r2, r5
 8003532:	4649      	mov	r1, r9
 8003534:	4640      	mov	r0, r8
 8003536:	47d0      	blx	sl
 8003538:	3001      	adds	r0, #1
 800353a:	d0ad      	beq.n	8003498 <_printf_i+0x160>
 800353c:	6823      	ldr	r3, [r4, #0]
 800353e:	079b      	lsls	r3, r3, #30
 8003540:	d413      	bmi.n	800356a <_printf_i+0x232>
 8003542:	68e0      	ldr	r0, [r4, #12]
 8003544:	9b03      	ldr	r3, [sp, #12]
 8003546:	4298      	cmp	r0, r3
 8003548:	bfb8      	it	lt
 800354a:	4618      	movlt	r0, r3
 800354c:	e7a6      	b.n	800349c <_printf_i+0x164>
 800354e:	2301      	movs	r3, #1
 8003550:	4632      	mov	r2, r6
 8003552:	4649      	mov	r1, r9
 8003554:	4640      	mov	r0, r8
 8003556:	47d0      	blx	sl
 8003558:	3001      	adds	r0, #1
 800355a:	d09d      	beq.n	8003498 <_printf_i+0x160>
 800355c:	3501      	adds	r5, #1
 800355e:	68e3      	ldr	r3, [r4, #12]
 8003560:	9903      	ldr	r1, [sp, #12]
 8003562:	1a5b      	subs	r3, r3, r1
 8003564:	42ab      	cmp	r3, r5
 8003566:	dcf2      	bgt.n	800354e <_printf_i+0x216>
 8003568:	e7eb      	b.n	8003542 <_printf_i+0x20a>
 800356a:	2500      	movs	r5, #0
 800356c:	f104 0619 	add.w	r6, r4, #25
 8003570:	e7f5      	b.n	800355e <_printf_i+0x226>
 8003572:	bf00      	nop
 8003574:	08004a01 	.word	0x08004a01
 8003578:	08004a12 	.word	0x08004a12

0800357c <memmove>:
 800357c:	4288      	cmp	r0, r1
 800357e:	b510      	push	{r4, lr}
 8003580:	eb01 0402 	add.w	r4, r1, r2
 8003584:	d902      	bls.n	800358c <memmove+0x10>
 8003586:	4284      	cmp	r4, r0
 8003588:	4623      	mov	r3, r4
 800358a:	d807      	bhi.n	800359c <memmove+0x20>
 800358c:	1e43      	subs	r3, r0, #1
 800358e:	42a1      	cmp	r1, r4
 8003590:	d008      	beq.n	80035a4 <memmove+0x28>
 8003592:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003596:	f803 2f01 	strb.w	r2, [r3, #1]!
 800359a:	e7f8      	b.n	800358e <memmove+0x12>
 800359c:	4402      	add	r2, r0
 800359e:	4601      	mov	r1, r0
 80035a0:	428a      	cmp	r2, r1
 80035a2:	d100      	bne.n	80035a6 <memmove+0x2a>
 80035a4:	bd10      	pop	{r4, pc}
 80035a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80035aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80035ae:	e7f7      	b.n	80035a0 <memmove+0x24>

080035b0 <_sbrk_r>:
 80035b0:	b538      	push	{r3, r4, r5, lr}
 80035b2:	4d06      	ldr	r5, [pc, #24]	; (80035cc <_sbrk_r+0x1c>)
 80035b4:	2300      	movs	r3, #0
 80035b6:	4604      	mov	r4, r0
 80035b8:	4608      	mov	r0, r1
 80035ba:	602b      	str	r3, [r5, #0]
 80035bc:	f7fd fcba 	bl	8000f34 <_sbrk>
 80035c0:	1c43      	adds	r3, r0, #1
 80035c2:	d102      	bne.n	80035ca <_sbrk_r+0x1a>
 80035c4:	682b      	ldr	r3, [r5, #0]
 80035c6:	b103      	cbz	r3, 80035ca <_sbrk_r+0x1a>
 80035c8:	6023      	str	r3, [r4, #0]
 80035ca:	bd38      	pop	{r3, r4, r5, pc}
 80035cc:	20000620 	.word	0x20000620

080035d0 <memcpy>:
 80035d0:	440a      	add	r2, r1
 80035d2:	4291      	cmp	r1, r2
 80035d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80035d8:	d100      	bne.n	80035dc <memcpy+0xc>
 80035da:	4770      	bx	lr
 80035dc:	b510      	push	{r4, lr}
 80035de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80035e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80035e6:	4291      	cmp	r1, r2
 80035e8:	d1f9      	bne.n	80035de <memcpy+0xe>
 80035ea:	bd10      	pop	{r4, pc}

080035ec <_realloc_r>:
 80035ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035f0:	4680      	mov	r8, r0
 80035f2:	4614      	mov	r4, r2
 80035f4:	460e      	mov	r6, r1
 80035f6:	b921      	cbnz	r1, 8003602 <_realloc_r+0x16>
 80035f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80035fc:	4611      	mov	r1, r2
 80035fe:	f7ff bc49 	b.w	8002e94 <_malloc_r>
 8003602:	b92a      	cbnz	r2, 8003610 <_realloc_r+0x24>
 8003604:	f7ff fbda 	bl	8002dbc <_free_r>
 8003608:	4625      	mov	r5, r4
 800360a:	4628      	mov	r0, r5
 800360c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003610:	f000 f81b 	bl	800364a <_malloc_usable_size_r>
 8003614:	4284      	cmp	r4, r0
 8003616:	4607      	mov	r7, r0
 8003618:	d802      	bhi.n	8003620 <_realloc_r+0x34>
 800361a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800361e:	d812      	bhi.n	8003646 <_realloc_r+0x5a>
 8003620:	4621      	mov	r1, r4
 8003622:	4640      	mov	r0, r8
 8003624:	f7ff fc36 	bl	8002e94 <_malloc_r>
 8003628:	4605      	mov	r5, r0
 800362a:	2800      	cmp	r0, #0
 800362c:	d0ed      	beq.n	800360a <_realloc_r+0x1e>
 800362e:	42bc      	cmp	r4, r7
 8003630:	4622      	mov	r2, r4
 8003632:	4631      	mov	r1, r6
 8003634:	bf28      	it	cs
 8003636:	463a      	movcs	r2, r7
 8003638:	f7ff ffca 	bl	80035d0 <memcpy>
 800363c:	4631      	mov	r1, r6
 800363e:	4640      	mov	r0, r8
 8003640:	f7ff fbbc 	bl	8002dbc <_free_r>
 8003644:	e7e1      	b.n	800360a <_realloc_r+0x1e>
 8003646:	4635      	mov	r5, r6
 8003648:	e7df      	b.n	800360a <_realloc_r+0x1e>

0800364a <_malloc_usable_size_r>:
 800364a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800364e:	1f18      	subs	r0, r3, #4
 8003650:	2b00      	cmp	r3, #0
 8003652:	bfbc      	itt	lt
 8003654:	580b      	ldrlt	r3, [r1, r0]
 8003656:	18c0      	addlt	r0, r0, r3
 8003658:	4770      	bx	lr
	...

0800365c <_init>:
 800365c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800365e:	bf00      	nop
 8003660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003662:	bc08      	pop	{r3}
 8003664:	469e      	mov	lr, r3
 8003666:	4770      	bx	lr

08003668 <_fini>:
 8003668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800366a:	bf00      	nop
 800366c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800366e:	bc08      	pop	{r3}
 8003670:	469e      	mov	lr, r3
 8003672:	4770      	bx	lr
