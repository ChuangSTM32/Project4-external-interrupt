
external interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034cc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000013b0  0800367c  0800367c  0001367c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a2c  08004a2c  00020064  2**0
                  CONTENTS
  4 .ARM          00000008  08004a2c  08004a2c  00014a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a34  08004a34  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a34  08004a34  00014a34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a38  08004a38  00014a38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08004a3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020064  2**0
                  CONTENTS
 10 .bss          000005cc  20000064  20000064  00020064  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000630  20000630  00020064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 14 .debug_info   00008b58  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001e13  00000000  00000000  00028c2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000008c8  00000000  00000000  0002aa48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000697  00000000  00000000  0002b310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002386a  00000000  00000000  0002b9a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000d036  00000000  00000000  0004f211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d20b4  00000000  00000000  0005c247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000026c4  00000000  00000000  0012e2fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004a  00000000  00000000  001309c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000064 	.word	0x20000064
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003664 	.word	0x08003664

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000068 	.word	0x20000068
 80001ec:	08003664 	.word	0x08003664

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <Get_Num>:


uint32_t number = 0;

uint32_t Get_Num(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
	return number;
 8000590:	4b03      	ldr	r3, [pc, #12]	; (80005a0 <Get_Num+0x14>)
 8000592:	681b      	ldr	r3, [r3, #0]
}
 8000594:	4618      	mov	r0, r3
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	20000080 	.word	0x20000080

080005a4 <Plus_One>:

void Plus_One(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
	number++;
 80005a8:	4b04      	ldr	r3, [pc, #16]	; (80005bc <Plus_One+0x18>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	3301      	adds	r3, #1
 80005ae:	4a03      	ldr	r2, [pc, #12]	; (80005bc <Plus_One+0x18>)
 80005b0:	6013      	str	r3, [r2, #0]
}
 80005b2:	bf00      	nop
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr
 80005bc:	20000080 	.word	0x20000080

080005c0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b086      	sub	sp, #24
 80005c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c6:	1d3b      	adds	r3, r7, #4
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
 80005ce:	609a      	str	r2, [r3, #8]
 80005d0:	60da      	str	r2, [r3, #12]
 80005d2:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005d4:	2300      	movs	r3, #0
 80005d6:	603b      	str	r3, [r7, #0]
 80005d8:	4b12      	ldr	r3, [pc, #72]	; (8000624 <MX_GPIO_Init+0x64>)
 80005da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005dc:	4a11      	ldr	r2, [pc, #68]	; (8000624 <MX_GPIO_Init+0x64>)
 80005de:	f043 0302 	orr.w	r3, r3, #2
 80005e2:	6313      	str	r3, [r2, #48]	; 0x30
 80005e4:	4b0f      	ldr	r3, [pc, #60]	; (8000624 <MX_GPIO_Init+0x64>)
 80005e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e8:	f003 0302 	and.w	r3, r3, #2
 80005ec:	603b      	str	r3, [r7, #0]
 80005ee:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80005f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80005f4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005f6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80005fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80005fc:	2302      	movs	r3, #2
 80005fe:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000600:	1d3b      	adds	r3, r7, #4
 8000602:	4619      	mov	r1, r3
 8000604:	4808      	ldr	r0, [pc, #32]	; (8000628 <MX_GPIO_Init+0x68>)
 8000606:	f000 feb3 	bl	8001370 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 12, 0);
 800060a:	2200      	movs	r2, #0
 800060c:	210c      	movs	r1, #12
 800060e:	2028      	movs	r0, #40	; 0x28
 8000610:	f000 fe77 	bl	8001302 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000614:	2028      	movs	r0, #40	; 0x28
 8000616:	f000 fe90 	bl	800133a <HAL_NVIC_EnableIRQ>

}
 800061a:	bf00      	nop
 800061c:	3718      	adds	r7, #24
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	40023800 	.word	0x40023800
 8000628:	40020400 	.word	0x40020400

0800062c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000630:	4b1b      	ldr	r3, [pc, #108]	; (80006a0 <MX_I2C1_Init+0x74>)
 8000632:	4a1c      	ldr	r2, [pc, #112]	; (80006a4 <MX_I2C1_Init+0x78>)
 8000634:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000636:	4b1a      	ldr	r3, [pc, #104]	; (80006a0 <MX_I2C1_Init+0x74>)
 8000638:	4a1b      	ldr	r2, [pc, #108]	; (80006a8 <MX_I2C1_Init+0x7c>)
 800063a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800063c:	4b18      	ldr	r3, [pc, #96]	; (80006a0 <MX_I2C1_Init+0x74>)
 800063e:	2200      	movs	r2, #0
 8000640:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000642:	4b17      	ldr	r3, [pc, #92]	; (80006a0 <MX_I2C1_Init+0x74>)
 8000644:	2200      	movs	r2, #0
 8000646:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000648:	4b15      	ldr	r3, [pc, #84]	; (80006a0 <MX_I2C1_Init+0x74>)
 800064a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800064e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000650:	4b13      	ldr	r3, [pc, #76]	; (80006a0 <MX_I2C1_Init+0x74>)
 8000652:	2200      	movs	r2, #0
 8000654:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000656:	4b12      	ldr	r3, [pc, #72]	; (80006a0 <MX_I2C1_Init+0x74>)
 8000658:	2200      	movs	r2, #0
 800065a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800065c:	4b10      	ldr	r3, [pc, #64]	; (80006a0 <MX_I2C1_Init+0x74>)
 800065e:	2200      	movs	r2, #0
 8000660:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000662:	4b0f      	ldr	r3, [pc, #60]	; (80006a0 <MX_I2C1_Init+0x74>)
 8000664:	2200      	movs	r2, #0
 8000666:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000668:	480d      	ldr	r0, [pc, #52]	; (80006a0 <MX_I2C1_Init+0x74>)
 800066a:	f001 f869 	bl	8001740 <HAL_I2C_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000674:	f000 f8fa 	bl	800086c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000678:	2100      	movs	r1, #0
 800067a:	4809      	ldr	r0, [pc, #36]	; (80006a0 <MX_I2C1_Init+0x74>)
 800067c:	f001 fe2b 	bl	80022d6 <HAL_I2CEx_ConfigAnalogFilter>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000686:	f000 f8f1 	bl	800086c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800068a:	2100      	movs	r1, #0
 800068c:	4804      	ldr	r0, [pc, #16]	; (80006a0 <MX_I2C1_Init+0x74>)
 800068e:	f001 fe5e 	bl	800234e <HAL_I2CEx_ConfigDigitalFilter>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000698:	f000 f8e8 	bl	800086c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800069c:	bf00      	nop
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	20000084 	.word	0x20000084
 80006a4:	40005400 	.word	0x40005400
 80006a8:	00061a80 	.word	0x00061a80

080006ac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b08a      	sub	sp, #40	; 0x28
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b4:	f107 0314 	add.w	r3, r7, #20
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]
 80006c2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a19      	ldr	r2, [pc, #100]	; (8000730 <HAL_I2C_MspInit+0x84>)
 80006ca:	4293      	cmp	r3, r2
 80006cc:	d12c      	bne.n	8000728 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	613b      	str	r3, [r7, #16]
 80006d2:	4b18      	ldr	r3, [pc, #96]	; (8000734 <HAL_I2C_MspInit+0x88>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	4a17      	ldr	r2, [pc, #92]	; (8000734 <HAL_I2C_MspInit+0x88>)
 80006d8:	f043 0302 	orr.w	r3, r3, #2
 80006dc:	6313      	str	r3, [r2, #48]	; 0x30
 80006de:	4b15      	ldr	r3, [pc, #84]	; (8000734 <HAL_I2C_MspInit+0x88>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	f003 0302 	and.w	r3, r3, #2
 80006e6:	613b      	str	r3, [r7, #16]
 80006e8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80006ea:	f44f 7340 	mov.w	r3, #768	; 0x300
 80006ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006f0:	2312      	movs	r3, #18
 80006f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f4:	2300      	movs	r3, #0
 80006f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006f8:	2303      	movs	r3, #3
 80006fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006fc:	2304      	movs	r3, #4
 80006fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000700:	f107 0314 	add.w	r3, r7, #20
 8000704:	4619      	mov	r1, r3
 8000706:	480c      	ldr	r0, [pc, #48]	; (8000738 <HAL_I2C_MspInit+0x8c>)
 8000708:	f000 fe32 	bl	8001370 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800070c:	2300      	movs	r3, #0
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	4b08      	ldr	r3, [pc, #32]	; (8000734 <HAL_I2C_MspInit+0x88>)
 8000712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000714:	4a07      	ldr	r2, [pc, #28]	; (8000734 <HAL_I2C_MspInit+0x88>)
 8000716:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800071a:	6413      	str	r3, [r2, #64]	; 0x40
 800071c:	4b05      	ldr	r3, [pc, #20]	; (8000734 <HAL_I2C_MspInit+0x88>)
 800071e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000720:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000724:	60fb      	str	r3, [r7, #12]
 8000726:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000728:	bf00      	nop
 800072a:	3728      	adds	r7, #40	; 0x28
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	40005400 	.word	0x40005400
 8000734:	40023800 	.word	0x40023800
 8000738:	40020400 	.word	0x40020400

0800073c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000742:	f000 fc6d 	bl	8001020 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000746:	f000 f821 	bl	800078c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800074a:	f7ff ff39 	bl	80005c0 <MX_GPIO_Init>
  MX_I2C1_Init();
 800074e:	f7ff ff6d 	bl	800062c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(20);
 8000752:	2014      	movs	r0, #20
 8000754:	f000 fcd6 	bl	8001104 <HAL_Delay>
  OLED_Init();
 8000758:	f000 f88e 	bl	8000878 <OLED_Init>
  OLED_ShowString(10, 0, "counter: ", &Font_16x26);
 800075c:	4b09      	ldr	r3, [pc, #36]	; (8000784 <main+0x48>)
 800075e:	4a0a      	ldr	r2, [pc, #40]	; (8000788 <main+0x4c>)
 8000760:	2100      	movs	r1, #0
 8000762:	200a      	movs	r0, #10
 8000764:	f000 fa88 	bl	8000c78 <OLED_ShowString>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint32_t num = Get_Num();
 8000768:	f7ff ff10 	bl	800058c <Get_Num>
 800076c:	6078      	str	r0, [r7, #4]
	  OLED_ShowNum(20, 30, num, &Font_16x26);
 800076e:	4b05      	ldr	r3, [pc, #20]	; (8000784 <main+0x48>)
 8000770:	687a      	ldr	r2, [r7, #4]
 8000772:	211e      	movs	r1, #30
 8000774:	2014      	movs	r0, #20
 8000776:	f000 faaf 	bl	8000cd8 <OLED_ShowNum>
	  HAL_Delay(100);
 800077a:	2064      	movs	r0, #100	; 0x64
 800077c:	f000 fcc2 	bl	8001104 <HAL_Delay>
  {
 8000780:	e7f2      	b.n	8000768 <main+0x2c>
 8000782:	bf00      	nop
 8000784:	20000000 	.word	0x20000000
 8000788:	0800367c 	.word	0x0800367c

0800078c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b094      	sub	sp, #80	; 0x50
 8000790:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000792:	f107 0320 	add.w	r3, r7, #32
 8000796:	2230      	movs	r2, #48	; 0x30
 8000798:	2100      	movs	r1, #0
 800079a:	4618      	mov	r0, r3
 800079c:	f002 fade 	bl	8002d5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a0:	f107 030c 	add.w	r3, r7, #12
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]
 80007ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b0:	2300      	movs	r3, #0
 80007b2:	60bb      	str	r3, [r7, #8]
 80007b4:	4b2b      	ldr	r3, [pc, #172]	; (8000864 <SystemClock_Config+0xd8>)
 80007b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b8:	4a2a      	ldr	r2, [pc, #168]	; (8000864 <SystemClock_Config+0xd8>)
 80007ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007be:	6413      	str	r3, [r2, #64]	; 0x40
 80007c0:	4b28      	ldr	r3, [pc, #160]	; (8000864 <SystemClock_Config+0xd8>)
 80007c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007c8:	60bb      	str	r3, [r7, #8]
 80007ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007cc:	2300      	movs	r3, #0
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	4b25      	ldr	r3, [pc, #148]	; (8000868 <SystemClock_Config+0xdc>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a24      	ldr	r2, [pc, #144]	; (8000868 <SystemClock_Config+0xdc>)
 80007d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007da:	6013      	str	r3, [r2, #0]
 80007dc:	4b22      	ldr	r3, [pc, #136]	; (8000868 <SystemClock_Config+0xdc>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007e4:	607b      	str	r3, [r7, #4]
 80007e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007e8:	2302      	movs	r3, #2
 80007ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007ec:	2301      	movs	r3, #1
 80007ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007f0:	2310      	movs	r3, #16
 80007f2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007f4:	2302      	movs	r3, #2
 80007f6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007f8:	2300      	movs	r3, #0
 80007fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007fc:	2308      	movs	r3, #8
 80007fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000800:	23b4      	movs	r3, #180	; 0xb4
 8000802:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000804:	2302      	movs	r3, #2
 8000806:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000808:	2304      	movs	r3, #4
 800080a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800080c:	f107 0320 	add.w	r3, r7, #32
 8000810:	4618      	mov	r0, r3
 8000812:	f001 fe2b 	bl	800246c <HAL_RCC_OscConfig>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800081c:	f000 f826 	bl	800086c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000820:	f001 fdd4 	bl	80023cc <HAL_PWREx_EnableOverDrive>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800082a:	f000 f81f 	bl	800086c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800082e:	230f      	movs	r3, #15
 8000830:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000832:	2302      	movs	r3, #2
 8000834:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000836:	2300      	movs	r3, #0
 8000838:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800083a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800083e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000840:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000844:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000846:	f107 030c 	add.w	r3, r7, #12
 800084a:	2105      	movs	r1, #5
 800084c:	4618      	mov	r0, r3
 800084e:	f002 f885 	bl	800295c <HAL_RCC_ClockConfig>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000858:	f000 f808 	bl	800086c <Error_Handler>
  }
}
 800085c:	bf00      	nop
 800085e:	3750      	adds	r7, #80	; 0x50
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40023800 	.word	0x40023800
 8000868:	40007000 	.word	0x40007000

0800086c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000870:	b672      	cpsid	i
}
 8000872:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000874:	e7fe      	b.n	8000874 <Error_Handler+0x8>
	...

08000878 <OLED_Init>:
        }
    }
}


uint8_t OLED_Init(void) {
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0

	/* Init I2C */
	OLED_I2C_Init();
 800087e:	f000 fa49 	bl	8000d14 <OLED_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, OLED_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000882:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000886:	2201      	movs	r2, #1
 8000888:	2178      	movs	r1, #120	; 0x78
 800088a:	485b      	ldr	r0, [pc, #364]	; (80009f8 <OLED_Init+0x180>)
 800088c:	f001 f99a 	bl	8001bc4 <HAL_I2C_IsDeviceReady>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <OLED_Init+0x22>
		/* Return false */
		return 0;
 8000896:	2300      	movs	r3, #0
 8000898:	e0a9      	b.n	80009ee <OLED_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 800089a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800089e:	607b      	str	r3, [r7, #4]
	while(p>0)
 80008a0:	e002      	b.n	80008a8 <OLED_Init+0x30>
		p--;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	3b01      	subs	r3, #1
 80008a6:	607b      	str	r3, [r7, #4]
	while(p>0)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d1f9      	bne.n	80008a2 <OLED_Init+0x2a>

	/* Init LCD */
	OLED_WRITECOMMAND(0xAE); //display off
 80008ae:	22ae      	movs	r2, #174	; 0xae
 80008b0:	2100      	movs	r1, #0
 80008b2:	2078      	movs	r0, #120	; 0x78
 80008b4:	f000 faaa 	bl	8000e0c <OLED_I2C_Write>
	OLED_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 80008b8:	2220      	movs	r2, #32
 80008ba:	2100      	movs	r1, #0
 80008bc:	2078      	movs	r0, #120	; 0x78
 80008be:	f000 faa5 	bl	8000e0c <OLED_I2C_Write>
	OLED_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80008c2:	2210      	movs	r2, #16
 80008c4:	2100      	movs	r1, #0
 80008c6:	2078      	movs	r0, #120	; 0x78
 80008c8:	f000 faa0 	bl	8000e0c <OLED_I2C_Write>
	OLED_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80008cc:	22b0      	movs	r2, #176	; 0xb0
 80008ce:	2100      	movs	r1, #0
 80008d0:	2078      	movs	r0, #120	; 0x78
 80008d2:	f000 fa9b 	bl	8000e0c <OLED_I2C_Write>
	OLED_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80008d6:	22c8      	movs	r2, #200	; 0xc8
 80008d8:	2100      	movs	r1, #0
 80008da:	2078      	movs	r0, #120	; 0x78
 80008dc:	f000 fa96 	bl	8000e0c <OLED_I2C_Write>
	OLED_WRITECOMMAND(0x00); //---set low column address
 80008e0:	2200      	movs	r2, #0
 80008e2:	2100      	movs	r1, #0
 80008e4:	2078      	movs	r0, #120	; 0x78
 80008e6:	f000 fa91 	bl	8000e0c <OLED_I2C_Write>
	OLED_WRITECOMMAND(0x10); //---set high column address
 80008ea:	2210      	movs	r2, #16
 80008ec:	2100      	movs	r1, #0
 80008ee:	2078      	movs	r0, #120	; 0x78
 80008f0:	f000 fa8c 	bl	8000e0c <OLED_I2C_Write>
	OLED_WRITECOMMAND(0x40); //--set start line address
 80008f4:	2240      	movs	r2, #64	; 0x40
 80008f6:	2100      	movs	r1, #0
 80008f8:	2078      	movs	r0, #120	; 0x78
 80008fa:	f000 fa87 	bl	8000e0c <OLED_I2C_Write>
	OLED_WRITECOMMAND(0x81); //--set contrast control register
 80008fe:	2281      	movs	r2, #129	; 0x81
 8000900:	2100      	movs	r1, #0
 8000902:	2078      	movs	r0, #120	; 0x78
 8000904:	f000 fa82 	bl	8000e0c <OLED_I2C_Write>
	OLED_WRITECOMMAND(0xFF);
 8000908:	22ff      	movs	r2, #255	; 0xff
 800090a:	2100      	movs	r1, #0
 800090c:	2078      	movs	r0, #120	; 0x78
 800090e:	f000 fa7d 	bl	8000e0c <OLED_I2C_Write>
	OLED_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000912:	22a1      	movs	r2, #161	; 0xa1
 8000914:	2100      	movs	r1, #0
 8000916:	2078      	movs	r0, #120	; 0x78
 8000918:	f000 fa78 	bl	8000e0c <OLED_I2C_Write>
	OLED_WRITECOMMAND(0xA6); //--set normal display
 800091c:	22a6      	movs	r2, #166	; 0xa6
 800091e:	2100      	movs	r1, #0
 8000920:	2078      	movs	r0, #120	; 0x78
 8000922:	f000 fa73 	bl	8000e0c <OLED_I2C_Write>
	OLED_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000926:	22a8      	movs	r2, #168	; 0xa8
 8000928:	2100      	movs	r1, #0
 800092a:	2078      	movs	r0, #120	; 0x78
 800092c:	f000 fa6e 	bl	8000e0c <OLED_I2C_Write>
	OLED_WRITECOMMAND(0x3F); //
 8000930:	223f      	movs	r2, #63	; 0x3f
 8000932:	2100      	movs	r1, #0
 8000934:	2078      	movs	r0, #120	; 0x78
 8000936:	f000 fa69 	bl	8000e0c <OLED_I2C_Write>
	OLED_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800093a:	22a4      	movs	r2, #164	; 0xa4
 800093c:	2100      	movs	r1, #0
 800093e:	2078      	movs	r0, #120	; 0x78
 8000940:	f000 fa64 	bl	8000e0c <OLED_I2C_Write>
	OLED_WRITECOMMAND(0xD3); //-set display offset
 8000944:	22d3      	movs	r2, #211	; 0xd3
 8000946:	2100      	movs	r1, #0
 8000948:	2078      	movs	r0, #120	; 0x78
 800094a:	f000 fa5f 	bl	8000e0c <OLED_I2C_Write>
	OLED_WRITECOMMAND(0x00); //-not offset
 800094e:	2200      	movs	r2, #0
 8000950:	2100      	movs	r1, #0
 8000952:	2078      	movs	r0, #120	; 0x78
 8000954:	f000 fa5a 	bl	8000e0c <OLED_I2C_Write>
	OLED_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000958:	22d5      	movs	r2, #213	; 0xd5
 800095a:	2100      	movs	r1, #0
 800095c:	2078      	movs	r0, #120	; 0x78
 800095e:	f000 fa55 	bl	8000e0c <OLED_I2C_Write>
	OLED_WRITECOMMAND(0xF0); //--set divide ratio
 8000962:	22f0      	movs	r2, #240	; 0xf0
 8000964:	2100      	movs	r1, #0
 8000966:	2078      	movs	r0, #120	; 0x78
 8000968:	f000 fa50 	bl	8000e0c <OLED_I2C_Write>
	OLED_WRITECOMMAND(0xD9); //--set pre-charge period
 800096c:	22d9      	movs	r2, #217	; 0xd9
 800096e:	2100      	movs	r1, #0
 8000970:	2078      	movs	r0, #120	; 0x78
 8000972:	f000 fa4b 	bl	8000e0c <OLED_I2C_Write>
	OLED_WRITECOMMAND(0x22); //
 8000976:	2222      	movs	r2, #34	; 0x22
 8000978:	2100      	movs	r1, #0
 800097a:	2078      	movs	r0, #120	; 0x78
 800097c:	f000 fa46 	bl	8000e0c <OLED_I2C_Write>
	OLED_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000980:	22da      	movs	r2, #218	; 0xda
 8000982:	2100      	movs	r1, #0
 8000984:	2078      	movs	r0, #120	; 0x78
 8000986:	f000 fa41 	bl	8000e0c <OLED_I2C_Write>
	OLED_WRITECOMMAND(0x12);
 800098a:	2212      	movs	r2, #18
 800098c:	2100      	movs	r1, #0
 800098e:	2078      	movs	r0, #120	; 0x78
 8000990:	f000 fa3c 	bl	8000e0c <OLED_I2C_Write>
	OLED_WRITECOMMAND(0xDB); //--set vcomh
 8000994:	22db      	movs	r2, #219	; 0xdb
 8000996:	2100      	movs	r1, #0
 8000998:	2078      	movs	r0, #120	; 0x78
 800099a:	f000 fa37 	bl	8000e0c <OLED_I2C_Write>
	OLED_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800099e:	2220      	movs	r2, #32
 80009a0:	2100      	movs	r1, #0
 80009a2:	2078      	movs	r0, #120	; 0x78
 80009a4:	f000 fa32 	bl	8000e0c <OLED_I2C_Write>
	OLED_WRITECOMMAND(0x8D); //--set DC-DC enable
 80009a8:	228d      	movs	r2, #141	; 0x8d
 80009aa:	2100      	movs	r1, #0
 80009ac:	2078      	movs	r0, #120	; 0x78
 80009ae:	f000 fa2d 	bl	8000e0c <OLED_I2C_Write>
	OLED_WRITECOMMAND(0x14); //
 80009b2:	2214      	movs	r2, #20
 80009b4:	2100      	movs	r1, #0
 80009b6:	2078      	movs	r0, #120	; 0x78
 80009b8:	f000 fa28 	bl	8000e0c <OLED_I2C_Write>
	OLED_WRITECOMMAND(0xAF); //--turn on OLED panel
 80009bc:	22af      	movs	r2, #175	; 0xaf
 80009be:	2100      	movs	r1, #0
 80009c0:	2078      	movs	r0, #120	; 0x78
 80009c2:	f000 fa23 	bl	8000e0c <OLED_I2C_Write>


	OLED_WRITECOMMAND(OLED_DEACTIVATE_SCROLL);
 80009c6:	222e      	movs	r2, #46	; 0x2e
 80009c8:	2100      	movs	r1, #0
 80009ca:	2078      	movs	r0, #120	; 0x78
 80009cc:	f000 fa1e 	bl	8000e0c <OLED_I2C_Write>

	/* Clear screen */
	OLED_Fill(OLED_COLOR_BLACK);
 80009d0:	2000      	movs	r0, #0
 80009d2:	f000 f843 	bl	8000a5c <OLED_Fill>

	/* Update screen */
	OLED_UpdateScreen();
 80009d6:	f000 f813 	bl	8000a00 <OLED_UpdateScreen>

	/* Set default values */
	OLED.CurrentX = 0;
 80009da:	4b08      	ldr	r3, [pc, #32]	; (80009fc <OLED_Init+0x184>)
 80009dc:	2200      	movs	r2, #0
 80009de:	801a      	strh	r2, [r3, #0]
	OLED.CurrentY = 0;
 80009e0:	4b06      	ldr	r3, [pc, #24]	; (80009fc <OLED_Init+0x184>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	OLED.Initialized = 1;
 80009e6:	4b05      	ldr	r3, [pc, #20]	; (80009fc <OLED_Init+0x184>)
 80009e8:	2201      	movs	r2, #1
 80009ea:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 80009ec:	2301      	movs	r3, #1
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	20000084 	.word	0x20000084
 80009fc:	200004d8 	.word	0x200004d8

08000a00 <OLED_UpdateScreen>:

void OLED_UpdateScreen(void) {
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8000a06:	2300      	movs	r3, #0
 8000a08:	71fb      	strb	r3, [r7, #7]
 8000a0a:	e01d      	b.n	8000a48 <OLED_UpdateScreen+0x48>
		OLED_WRITECOMMAND(0xB0 + m);
 8000a0c:	79fb      	ldrb	r3, [r7, #7]
 8000a0e:	3b50      	subs	r3, #80	; 0x50
 8000a10:	b2db      	uxtb	r3, r3
 8000a12:	461a      	mov	r2, r3
 8000a14:	2100      	movs	r1, #0
 8000a16:	2078      	movs	r0, #120	; 0x78
 8000a18:	f000 f9f8 	bl	8000e0c <OLED_I2C_Write>
		OLED_WRITECOMMAND(0x00);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	2100      	movs	r1, #0
 8000a20:	2078      	movs	r0, #120	; 0x78
 8000a22:	f000 f9f3 	bl	8000e0c <OLED_I2C_Write>
		OLED_WRITECOMMAND(0x10);
 8000a26:	2210      	movs	r2, #16
 8000a28:	2100      	movs	r1, #0
 8000a2a:	2078      	movs	r0, #120	; 0x78
 8000a2c:	f000 f9ee 	bl	8000e0c <OLED_I2C_Write>

		/* Write multi data */
		OLED_I2C_WriteMulti(OLED_I2C_ADDR, 0x40, &OLED_Buffer[OLED_WIDTH * m], OLED_WIDTH);
 8000a30:	79fb      	ldrb	r3, [r7, #7]
 8000a32:	01db      	lsls	r3, r3, #7
 8000a34:	4a08      	ldr	r2, [pc, #32]	; (8000a58 <OLED_UpdateScreen+0x58>)
 8000a36:	441a      	add	r2, r3
 8000a38:	2380      	movs	r3, #128	; 0x80
 8000a3a:	2140      	movs	r1, #64	; 0x40
 8000a3c:	2078      	movs	r0, #120	; 0x78
 8000a3e:	f000 f97f 	bl	8000d40 <OLED_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000a42:	79fb      	ldrb	r3, [r7, #7]
 8000a44:	3301      	adds	r3, #1
 8000a46:	71fb      	strb	r3, [r7, #7]
 8000a48:	79fb      	ldrb	r3, [r7, #7]
 8000a4a:	2b07      	cmp	r3, #7
 8000a4c:	d9de      	bls.n	8000a0c <OLED_UpdateScreen+0xc>
	}
}
 8000a4e:	bf00      	nop
 8000a50:	bf00      	nop
 8000a52:	3708      	adds	r7, #8
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	200000d8 	.word	0x200000d8

08000a5c <OLED_Fill>:
	for (i = 0; i < sizeof(OLED_Buffer); i++) {
		OLED_Buffer[i] = ~OLED_Buffer[i];
	}
}

void OLED_Fill(OLED_COLOR_t color) {
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(OLED_Buffer, (color == OLED_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(OLED_Buffer));
 8000a66:	79fb      	ldrb	r3, [r7, #7]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d101      	bne.n	8000a70 <OLED_Fill+0x14>
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	e000      	b.n	8000a72 <OLED_Fill+0x16>
 8000a70:	23ff      	movs	r3, #255	; 0xff
 8000a72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a76:	4619      	mov	r1, r3
 8000a78:	4803      	ldr	r0, [pc, #12]	; (8000a88 <OLED_Fill+0x2c>)
 8000a7a:	f002 f96f 	bl	8002d5c <memset>
}
 8000a7e:	bf00      	nop
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	200000d8 	.word	0x200000d8

08000a8c <OLED_DrawPixel>:

void OLED_DrawPixel(uint16_t x, uint16_t y, OLED_COLOR_t color) {
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	4603      	mov	r3, r0
 8000a94:	80fb      	strh	r3, [r7, #6]
 8000a96:	460b      	mov	r3, r1
 8000a98:	80bb      	strh	r3, [r7, #4]
 8000a9a:	4613      	mov	r3, r2
 8000a9c:	70fb      	strb	r3, [r7, #3]
	if (
 8000a9e:	88fb      	ldrh	r3, [r7, #6]
 8000aa0:	2b7f      	cmp	r3, #127	; 0x7f
 8000aa2:	d848      	bhi.n	8000b36 <OLED_DrawPixel+0xaa>
		x >= OLED_WIDTH ||
 8000aa4:	88bb      	ldrh	r3, [r7, #4]
 8000aa6:	2b3f      	cmp	r3, #63	; 0x3f
 8000aa8:	d845      	bhi.n	8000b36 <OLED_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (OLED.Inverted) {
 8000aaa:	4b26      	ldr	r3, [pc, #152]	; (8000b44 <OLED_DrawPixel+0xb8>)
 8000aac:	791b      	ldrb	r3, [r3, #4]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d006      	beq.n	8000ac0 <OLED_DrawPixel+0x34>
		color = (OLED_COLOR_t)!color;
 8000ab2:	78fb      	ldrb	r3, [r7, #3]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	bf0c      	ite	eq
 8000ab8:	2301      	moveq	r3, #1
 8000aba:	2300      	movne	r3, #0
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == OLED_COLOR_WHITE) {
 8000ac0:	78fb      	ldrb	r3, [r7, #3]
 8000ac2:	2b01      	cmp	r3, #1
 8000ac4:	d11a      	bne.n	8000afc <OLED_DrawPixel+0x70>
		OLED_Buffer[x + (y / 8) * OLED_WIDTH] |= 1 << (y % 8);
 8000ac6:	88fa      	ldrh	r2, [r7, #6]
 8000ac8:	88bb      	ldrh	r3, [r7, #4]
 8000aca:	08db      	lsrs	r3, r3, #3
 8000acc:	b298      	uxth	r0, r3
 8000ace:	4603      	mov	r3, r0
 8000ad0:	01db      	lsls	r3, r3, #7
 8000ad2:	4413      	add	r3, r2
 8000ad4:	4a1c      	ldr	r2, [pc, #112]	; (8000b48 <OLED_DrawPixel+0xbc>)
 8000ad6:	5cd3      	ldrb	r3, [r2, r3]
 8000ad8:	b25a      	sxtb	r2, r3
 8000ada:	88bb      	ldrh	r3, [r7, #4]
 8000adc:	f003 0307 	and.w	r3, r3, #7
 8000ae0:	2101      	movs	r1, #1
 8000ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae6:	b25b      	sxtb	r3, r3
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	b259      	sxtb	r1, r3
 8000aec:	88fa      	ldrh	r2, [r7, #6]
 8000aee:	4603      	mov	r3, r0
 8000af0:	01db      	lsls	r3, r3, #7
 8000af2:	4413      	add	r3, r2
 8000af4:	b2c9      	uxtb	r1, r1
 8000af6:	4a14      	ldr	r2, [pc, #80]	; (8000b48 <OLED_DrawPixel+0xbc>)
 8000af8:	54d1      	strb	r1, [r2, r3]
 8000afa:	e01d      	b.n	8000b38 <OLED_DrawPixel+0xac>
	} else {
		OLED_Buffer[x + (y / 8) * OLED_WIDTH] &= ~(1 << (y % 8));
 8000afc:	88fa      	ldrh	r2, [r7, #6]
 8000afe:	88bb      	ldrh	r3, [r7, #4]
 8000b00:	08db      	lsrs	r3, r3, #3
 8000b02:	b298      	uxth	r0, r3
 8000b04:	4603      	mov	r3, r0
 8000b06:	01db      	lsls	r3, r3, #7
 8000b08:	4413      	add	r3, r2
 8000b0a:	4a0f      	ldr	r2, [pc, #60]	; (8000b48 <OLED_DrawPixel+0xbc>)
 8000b0c:	5cd3      	ldrb	r3, [r2, r3]
 8000b0e:	b25a      	sxtb	r2, r3
 8000b10:	88bb      	ldrh	r3, [r7, #4]
 8000b12:	f003 0307 	and.w	r3, r3, #7
 8000b16:	2101      	movs	r1, #1
 8000b18:	fa01 f303 	lsl.w	r3, r1, r3
 8000b1c:	b25b      	sxtb	r3, r3
 8000b1e:	43db      	mvns	r3, r3
 8000b20:	b25b      	sxtb	r3, r3
 8000b22:	4013      	ands	r3, r2
 8000b24:	b259      	sxtb	r1, r3
 8000b26:	88fa      	ldrh	r2, [r7, #6]
 8000b28:	4603      	mov	r3, r0
 8000b2a:	01db      	lsls	r3, r3, #7
 8000b2c:	4413      	add	r3, r2
 8000b2e:	b2c9      	uxtb	r1, r1
 8000b30:	4a05      	ldr	r2, [pc, #20]	; (8000b48 <OLED_DrawPixel+0xbc>)
 8000b32:	54d1      	strb	r1, [r2, r3]
 8000b34:	e000      	b.n	8000b38 <OLED_DrawPixel+0xac>
		return;
 8000b36:	bf00      	nop
	}
}
 8000b38:	370c      	adds	r7, #12
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	200004d8 	.word	0x200004d8
 8000b48:	200000d8 	.word	0x200000d8

08000b4c <OLED_SetCursor>:

void OLED_SetCursor(uint16_t x, uint16_t y) {
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	460a      	mov	r2, r1
 8000b56:	80fb      	strh	r3, [r7, #6]
 8000b58:	4613      	mov	r3, r2
 8000b5a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	OLED.CurrentX = x;
 8000b5c:	4a05      	ldr	r2, [pc, #20]	; (8000b74 <OLED_SetCursor+0x28>)
 8000b5e:	88fb      	ldrh	r3, [r7, #6]
 8000b60:	8013      	strh	r3, [r2, #0]
	OLED.CurrentY = y;
 8000b62:	4a04      	ldr	r2, [pc, #16]	; (8000b74 <OLED_SetCursor+0x28>)
 8000b64:	88bb      	ldrh	r3, [r7, #4]
 8000b66:	8053      	strh	r3, [r2, #2]
}
 8000b68:	bf00      	nop
 8000b6a:	370c      	adds	r7, #12
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr
 8000b74:	200004d8 	.word	0x200004d8

08000b78 <OLED_ShowChar>:

char OLED_ShowChar(char ch, FontDef_t* Font, OLED_COLOR_t color) {
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	6039      	str	r1, [r7, #0]
 8000b82:	71fb      	strb	r3, [r7, #7]
 8000b84:	4613      	mov	r3, r2
 8000b86:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
			OLED_WIDTH <= (OLED.CurrentX + Font->FontWidth) ||
 8000b88:	4b3a      	ldr	r3, [pc, #232]	; (8000c74 <OLED_ShowChar+0xfc>)
 8000b8a:	881b      	ldrh	r3, [r3, #0]
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	4413      	add	r3, r2
	if (
 8000b94:	2b7f      	cmp	r3, #127	; 0x7f
 8000b96:	dc07      	bgt.n	8000ba8 <OLED_ShowChar+0x30>
			OLED_HEIGHT <= (OLED.CurrentY + Font->FontHeight)
 8000b98:	4b36      	ldr	r3, [pc, #216]	; (8000c74 <OLED_ShowChar+0xfc>)
 8000b9a:	885b      	ldrh	r3, [r3, #2]
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	785b      	ldrb	r3, [r3, #1]
 8000ba2:	4413      	add	r3, r2
			OLED_WIDTH <= (OLED.CurrentX + Font->FontWidth) ||
 8000ba4:	2b3f      	cmp	r3, #63	; 0x3f
 8000ba6:	dd01      	ble.n	8000bac <OLED_ShowChar+0x34>
	) {
		/* Error */
		return 0;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	e05e      	b.n	8000c6a <OLED_ShowChar+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000bac:	2300      	movs	r3, #0
 8000bae:	617b      	str	r3, [r7, #20]
 8000bb0:	e04b      	b.n	8000c4a <OLED_ShowChar+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	685a      	ldr	r2, [r3, #4]
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	3b20      	subs	r3, #32
 8000bba:	6839      	ldr	r1, [r7, #0]
 8000bbc:	7849      	ldrb	r1, [r1, #1]
 8000bbe:	fb01 f303 	mul.w	r3, r1, r3
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	440b      	add	r3, r1
 8000bc8:	005b      	lsls	r3, r3, #1
 8000bca:	4413      	add	r3, r2
 8000bcc:	881b      	ldrh	r3, [r3, #0]
 8000bce:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	613b      	str	r3, [r7, #16]
 8000bd4:	e030      	b.n	8000c38 <OLED_ShowChar+0xc0>
			if ((b << j) & 0x8000) {
 8000bd6:	68fa      	ldr	r2, [r7, #12]
 8000bd8:	693b      	ldr	r3, [r7, #16]
 8000bda:	fa02 f303 	lsl.w	r3, r2, r3
 8000bde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d010      	beq.n	8000c08 <OLED_ShowChar+0x90>
				OLED_DrawPixel(OLED.CurrentX + j, (OLED.CurrentY + i), (OLED_COLOR_t) color);
 8000be6:	4b23      	ldr	r3, [pc, #140]	; (8000c74 <OLED_ShowChar+0xfc>)
 8000be8:	881a      	ldrh	r2, [r3, #0]
 8000bea:	693b      	ldr	r3, [r7, #16]
 8000bec:	b29b      	uxth	r3, r3
 8000bee:	4413      	add	r3, r2
 8000bf0:	b298      	uxth	r0, r3
 8000bf2:	4b20      	ldr	r3, [pc, #128]	; (8000c74 <OLED_ShowChar+0xfc>)
 8000bf4:	885a      	ldrh	r2, [r3, #2]
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	b29b      	uxth	r3, r3
 8000bfa:	4413      	add	r3, r2
 8000bfc:	b29b      	uxth	r3, r3
 8000bfe:	79ba      	ldrb	r2, [r7, #6]
 8000c00:	4619      	mov	r1, r3
 8000c02:	f7ff ff43 	bl	8000a8c <OLED_DrawPixel>
 8000c06:	e014      	b.n	8000c32 <OLED_ShowChar+0xba>
			} else {
				OLED_DrawPixel(OLED.CurrentX + j, (OLED.CurrentY + i), (OLED_COLOR_t)!color);
 8000c08:	4b1a      	ldr	r3, [pc, #104]	; (8000c74 <OLED_ShowChar+0xfc>)
 8000c0a:	881a      	ldrh	r2, [r3, #0]
 8000c0c:	693b      	ldr	r3, [r7, #16]
 8000c0e:	b29b      	uxth	r3, r3
 8000c10:	4413      	add	r3, r2
 8000c12:	b298      	uxth	r0, r3
 8000c14:	4b17      	ldr	r3, [pc, #92]	; (8000c74 <OLED_ShowChar+0xfc>)
 8000c16:	885a      	ldrh	r2, [r3, #2]
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	b29b      	uxth	r3, r3
 8000c1c:	4413      	add	r3, r2
 8000c1e:	b299      	uxth	r1, r3
 8000c20:	79bb      	ldrb	r3, [r7, #6]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	bf0c      	ite	eq
 8000c26:	2301      	moveq	r3, #1
 8000c28:	2300      	movne	r3, #0
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	f7ff ff2d 	bl	8000a8c <OLED_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000c32:	693b      	ldr	r3, [r7, #16]
 8000c34:	3301      	adds	r3, #1
 8000c36:	613b      	str	r3, [r7, #16]
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	693b      	ldr	r3, [r7, #16]
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d3c8      	bcc.n	8000bd6 <OLED_ShowChar+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	3301      	adds	r3, #1
 8000c48:	617b      	str	r3, [r7, #20]
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	785b      	ldrb	r3, [r3, #1]
 8000c4e:	461a      	mov	r2, r3
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d3ad      	bcc.n	8000bb2 <OLED_ShowChar+0x3a>
			}
		}
	}

	/* Increase pointer */
	OLED.CurrentX += Font->FontWidth;
 8000c56:	4b07      	ldr	r3, [pc, #28]	; (8000c74 <OLED_ShowChar+0xfc>)
 8000c58:	881a      	ldrh	r2, [r3, #0]
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	b29b      	uxth	r3, r3
 8000c60:	4413      	add	r3, r2
 8000c62:	b29a      	uxth	r2, r3
 8000c64:	4b03      	ldr	r3, [pc, #12]	; (8000c74 <OLED_ShowChar+0xfc>)
 8000c66:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8000c68:	79fb      	ldrb	r3, [r7, #7]
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3718      	adds	r7, #24
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	200004d8 	.word	0x200004d8

08000c78 <OLED_ShowString>:

char OLED_ShowString(uint16_t x, uint16_t y, char* str, FontDef_t* Font) {
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	60ba      	str	r2, [r7, #8]
 8000c80:	607b      	str	r3, [r7, #4]
 8000c82:	4603      	mov	r3, r0
 8000c84:	81fb      	strh	r3, [r7, #14]
 8000c86:	460b      	mov	r3, r1
 8000c88:	81bb      	strh	r3, [r7, #12]
	OLED_SetCursor(x, y);
 8000c8a:	89ba      	ldrh	r2, [r7, #12]
 8000c8c:	89fb      	ldrh	r3, [r7, #14]
 8000c8e:	4611      	mov	r1, r2
 8000c90:	4618      	mov	r0, r3
 8000c92:	f7ff ff5b 	bl	8000b4c <OLED_SetCursor>

	/* Write characters */
	while (*str) {
 8000c96:	e012      	b.n	8000cbe <OLED_ShowString+0x46>
		/* Write character by character */
		if (OLED_ShowChar(*str, Font, OLED_COLOR_WHITE) != *str) {
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	6879      	ldr	r1, [r7, #4]
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff ff69 	bl	8000b78 <OLED_ShowChar>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	461a      	mov	r2, r3
 8000caa:	68bb      	ldr	r3, [r7, #8]
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	429a      	cmp	r2, r3
 8000cb0:	d002      	beq.n	8000cb8 <OLED_ShowString+0x40>
			/* Return error */
			return *str;
 8000cb2:	68bb      	ldr	r3, [r7, #8]
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	e00a      	b.n	8000cce <OLED_ShowString+0x56>
		}

		/* Increase string pointer */
		str++;
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	3301      	adds	r3, #1
 8000cbc:	60bb      	str	r3, [r7, #8]
	while (*str) {
 8000cbe:	68bb      	ldr	r3, [r7, #8]
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d1e8      	bne.n	8000c98 <OLED_ShowString+0x20>
	}

	OLED_UpdateScreen();
 8000cc6:	f7ff fe9b 	bl	8000a00 <OLED_UpdateScreen>

	/* Everything OK, zero should be returned */
	return *str;
 8000cca:	68bb      	ldr	r3, [r7, #8]
 8000ccc:	781b      	ldrb	r3, [r3, #0]
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3710      	adds	r7, #16
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
	...

08000cd8 <OLED_ShowNum>:

void OLED_ShowNum(uint16_t x, uint16_t y, uint32_t Number, FontDef_t* Font)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b088      	sub	sp, #32
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	60ba      	str	r2, [r7, #8]
 8000ce0:	607b      	str	r3, [r7, #4]
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	81fb      	strh	r3, [r7, #14]
 8000ce6:	460b      	mov	r3, r1
 8000ce8:	81bb      	strh	r3, [r7, #12]
	char str[12];
	snprintf(str, sizeof(str), "%lu", Number);
 8000cea:	f107 0014 	add.w	r0, r7, #20
 8000cee:	68bb      	ldr	r3, [r7, #8]
 8000cf0:	4a07      	ldr	r2, [pc, #28]	; (8000d10 <OLED_ShowNum+0x38>)
 8000cf2:	210c      	movs	r1, #12
 8000cf4:	f001 fffe 	bl	8002cf4 <sniprintf>
	OLED_ShowString(x, y, str, Font);
 8000cf8:	f107 0214 	add.w	r2, r7, #20
 8000cfc:	89b9      	ldrh	r1, [r7, #12]
 8000cfe:	89f8      	ldrh	r0, [r7, #14]
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	f7ff ffb9 	bl	8000c78 <OLED_ShowString>
}
 8000d06:	bf00      	nop
 8000d08:	3720      	adds	r7, #32
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	08003688 	.word	0x08003688

08000d14 <OLED_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void OLED_I2C_Init() {
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000d1a:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <OLED_I2C_Init+0x28>)
 8000d1c:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000d1e:	e002      	b.n	8000d26 <OLED_I2C_Init+0x12>
		p--;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	3b01      	subs	r3, #1
 8000d24:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d1f9      	bne.n	8000d20 <OLED_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000d2c:	bf00      	nop
 8000d2e:	bf00      	nop
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	0003d090 	.word	0x0003d090

08000d40 <OLED_I2C_WriteMulti>:

void OLED_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000d40:	b590      	push	{r4, r7, lr}
 8000d42:	b0c7      	sub	sp, #284	; 0x11c
 8000d44:	af02      	add	r7, sp, #8
 8000d46:	4604      	mov	r4, r0
 8000d48:	4608      	mov	r0, r1
 8000d4a:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8000d4e:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8000d52:	600a      	str	r2, [r1, #0]
 8000d54:	4619      	mov	r1, r3
 8000d56:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000d5a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000d5e:	4622      	mov	r2, r4
 8000d60:	701a      	strb	r2, [r3, #0]
 8000d62:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000d66:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8000d6a:	4602      	mov	r2, r0
 8000d6c:	701a      	strb	r2, [r3, #0]
 8000d6e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000d72:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000d76:	460a      	mov	r2, r1
 8000d78:	801a      	strh	r2, [r3, #0]
	uint8_t dt[256];
	dt[0] = reg;
 8000d7a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000d7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000d82:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000d86:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8000d8a:	7812      	ldrb	r2, [r2, #0]
 8000d8c:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 0; i < count; i++)
 8000d8e:	2300      	movs	r3, #0
 8000d90:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000d94:	e015      	b.n	8000dc2 <OLED_I2C_WriteMulti+0x82>
		dt[i+1] = data[i];
 8000d96:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000d9a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000d9e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8000da2:	6812      	ldr	r2, [r2, #0]
 8000da4:	441a      	add	r2, r3
 8000da6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000daa:	3301      	adds	r3, #1
 8000dac:	7811      	ldrb	r1, [r2, #0]
 8000dae:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000db2:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8000db6:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < count; i++)
 8000db8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000dc2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000dc6:	b29b      	uxth	r3, r3
 8000dc8:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000dcc:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000dd0:	8812      	ldrh	r2, [r2, #0]
 8000dd2:	429a      	cmp	r2, r3
 8000dd4:	d8df      	bhi.n	8000d96 <OLED_I2C_WriteMulti+0x56>
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8000dd6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000dda:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	b299      	uxth	r1, r3
 8000de2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000de6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000dea:	881b      	ldrh	r3, [r3, #0]
 8000dec:	3301      	adds	r3, #1
 8000dee:	b29b      	uxth	r3, r3
 8000df0:	f107 020c 	add.w	r2, r7, #12
 8000df4:	200a      	movs	r0, #10
 8000df6:	9000      	str	r0, [sp, #0]
 8000df8:	4803      	ldr	r0, [pc, #12]	; (8000e08 <OLED_I2C_WriteMulti+0xc8>)
 8000dfa:	f000 fde5 	bl	80019c8 <HAL_I2C_Master_Transmit>
}
 8000dfe:	bf00      	nop
 8000e00:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd90      	pop	{r4, r7, pc}
 8000e08:	20000084 	.word	0x20000084

08000e0c <OLED_I2C_Write>:


void OLED_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b086      	sub	sp, #24
 8000e10:	af02      	add	r7, sp, #8
 8000e12:	4603      	mov	r3, r0
 8000e14:	71fb      	strb	r3, [r7, #7]
 8000e16:	460b      	mov	r3, r1
 8000e18:	71bb      	strb	r3, [r7, #6]
 8000e1a:	4613      	mov	r3, r2
 8000e1c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000e1e:	79bb      	ldrb	r3, [r7, #6]
 8000e20:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000e22:	797b      	ldrb	r3, [r7, #5]
 8000e24:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8000e26:	79fb      	ldrb	r3, [r7, #7]
 8000e28:	b299      	uxth	r1, r3
 8000e2a:	f107 020c 	add.w	r2, r7, #12
 8000e2e:	230a      	movs	r3, #10
 8000e30:	9300      	str	r3, [sp, #0]
 8000e32:	2302      	movs	r3, #2
 8000e34:	4803      	ldr	r0, [pc, #12]	; (8000e44 <OLED_I2C_Write+0x38>)
 8000e36:	f000 fdc7 	bl	80019c8 <HAL_I2C_Master_Transmit>
}
 8000e3a:	bf00      	nop
 8000e3c:	3710      	adds	r7, #16
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	20000084 	.word	0x20000084

08000e48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	607b      	str	r3, [r7, #4]
 8000e52:	4b10      	ldr	r3, [pc, #64]	; (8000e94 <HAL_MspInit+0x4c>)
 8000e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e56:	4a0f      	ldr	r2, [pc, #60]	; (8000e94 <HAL_MspInit+0x4c>)
 8000e58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e5e:	4b0d      	ldr	r3, [pc, #52]	; (8000e94 <HAL_MspInit+0x4c>)
 8000e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e66:	607b      	str	r3, [r7, #4]
 8000e68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	603b      	str	r3, [r7, #0]
 8000e6e:	4b09      	ldr	r3, [pc, #36]	; (8000e94 <HAL_MspInit+0x4c>)
 8000e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e72:	4a08      	ldr	r2, [pc, #32]	; (8000e94 <HAL_MspInit+0x4c>)
 8000e74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e78:	6413      	str	r3, [r2, #64]	; 0x40
 8000e7a:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <HAL_MspInit+0x4c>)
 8000e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e82:	603b      	str	r3, [r7, #0]
 8000e84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e86:	bf00      	nop
 8000e88:	370c      	adds	r7, #12
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	40023800 	.word	0x40023800

08000e98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e9c:	e7fe      	b.n	8000e9c <NMI_Handler+0x4>

08000e9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ea2:	e7fe      	b.n	8000ea2 <HardFault_Handler+0x4>

08000ea4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ea8:	e7fe      	b.n	8000ea8 <MemManage_Handler+0x4>

08000eaa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eae:	e7fe      	b.n	8000eae <BusFault_Handler+0x4>

08000eb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eb4:	e7fe      	b.n	8000eb4 <UsageFault_Handler+0x4>

08000eb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr

08000ed2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr

08000ee0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ee4:	f000 f8ee 	bl	80010c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ee8:	bf00      	nop
 8000eea:	bd80      	pop	{r7, pc}

08000eec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_11) != RESET) {
 8000ef2:	4b10      	ldr	r3, [pc, #64]	; (8000f34 <EXTI15_10_IRQHandler+0x48>)
 8000ef4:	695b      	ldr	r3, [r3, #20]
 8000ef6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d012      	beq.n	8000f24 <EXTI15_10_IRQHandler+0x38>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_11);
 8000efe:	4b0d      	ldr	r3, [pc, #52]	; (8000f34 <EXTI15_10_IRQHandler+0x48>)
 8000f00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f04:	615a      	str	r2, [r3, #20]
		HAL_Delay(1);
 8000f06:	2001      	movs	r0, #1
 8000f08:	f000 f8fc 	bl	8001104 <HAL_Delay>
		GPIO_PinState num = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11);
 8000f0c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f10:	4809      	ldr	r0, [pc, #36]	; (8000f38 <EXTI15_10_IRQHandler+0x4c>)
 8000f12:	f000 fbd9 	bl	80016c8 <HAL_GPIO_ReadPin>
 8000f16:	4603      	mov	r3, r0
 8000f18:	71fb      	strb	r3, [r7, #7]
		if (num == GPIO_PIN_SET) {
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d101      	bne.n	8000f24 <EXTI15_10_IRQHandler+0x38>
			Plus_One();
 8000f20:	f7ff fb40 	bl	80005a4 <Plus_One>
		}
	}

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8000f24:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000f28:	f000 fbe6 	bl	80016f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f2c:	bf00      	nop
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40013c00 	.word	0x40013c00
 8000f38:	40020400 	.word	0x40020400

08000f3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f44:	4a14      	ldr	r2, [pc, #80]	; (8000f98 <_sbrk+0x5c>)
 8000f46:	4b15      	ldr	r3, [pc, #84]	; (8000f9c <_sbrk+0x60>)
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f50:	4b13      	ldr	r3, [pc, #76]	; (8000fa0 <_sbrk+0x64>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d102      	bne.n	8000f5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f58:	4b11      	ldr	r3, [pc, #68]	; (8000fa0 <_sbrk+0x64>)
 8000f5a:	4a12      	ldr	r2, [pc, #72]	; (8000fa4 <_sbrk+0x68>)
 8000f5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f5e:	4b10      	ldr	r3, [pc, #64]	; (8000fa0 <_sbrk+0x64>)
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4413      	add	r3, r2
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d207      	bcs.n	8000f7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f6c:	f001 fefe 	bl	8002d6c <__errno>
 8000f70:	4603      	mov	r3, r0
 8000f72:	220c      	movs	r2, #12
 8000f74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f76:	f04f 33ff 	mov.w	r3, #4294967295
 8000f7a:	e009      	b.n	8000f90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f7c:	4b08      	ldr	r3, [pc, #32]	; (8000fa0 <_sbrk+0x64>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f82:	4b07      	ldr	r3, [pc, #28]	; (8000fa0 <_sbrk+0x64>)
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4413      	add	r3, r2
 8000f8a:	4a05      	ldr	r2, [pc, #20]	; (8000fa0 <_sbrk+0x64>)
 8000f8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3718      	adds	r7, #24
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	20030000 	.word	0x20030000
 8000f9c:	00000400 	.word	0x00000400
 8000fa0:	200004e0 	.word	0x200004e0
 8000fa4:	20000630 	.word	0x20000630

08000fa8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fac:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <SystemInit+0x20>)
 8000fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fb2:	4a05      	ldr	r2, [pc, #20]	; (8000fc8 <SystemInit+0x20>)
 8000fb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000fcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001004 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fd0:	f7ff ffea 	bl	8000fa8 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fd4:	480c      	ldr	r0, [pc, #48]	; (8001008 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fd6:	490d      	ldr	r1, [pc, #52]	; (800100c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fd8:	4a0d      	ldr	r2, [pc, #52]	; (8001010 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fdc:	e002      	b.n	8000fe4 <LoopCopyDataInit>

08000fde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fe0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fe2:	3304      	adds	r3, #4

08000fe4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fe4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fe6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fe8:	d3f9      	bcc.n	8000fde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fea:	4a0a      	ldr	r2, [pc, #40]	; (8001014 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fec:	4c0a      	ldr	r4, [pc, #40]	; (8001018 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ff0:	e001      	b.n	8000ff6 <LoopFillZerobss>

08000ff2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ff2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ff4:	3204      	adds	r2, #4

08000ff6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ff6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ff8:	d3fb      	bcc.n	8000ff2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000ffa:	f001 febd 	bl	8002d78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ffe:	f7ff fb9d 	bl	800073c <main>
  bx  lr    
 8001002:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001004:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001008:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800100c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001010:	08004a3c 	.word	0x08004a3c
  ldr r2, =_sbss
 8001014:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001018:	20000630 	.word	0x20000630

0800101c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800101c:	e7fe      	b.n	800101c <ADC_IRQHandler>
	...

08001020 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001024:	4b0e      	ldr	r3, [pc, #56]	; (8001060 <HAL_Init+0x40>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a0d      	ldr	r2, [pc, #52]	; (8001060 <HAL_Init+0x40>)
 800102a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800102e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001030:	4b0b      	ldr	r3, [pc, #44]	; (8001060 <HAL_Init+0x40>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a0a      	ldr	r2, [pc, #40]	; (8001060 <HAL_Init+0x40>)
 8001036:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800103a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800103c:	4b08      	ldr	r3, [pc, #32]	; (8001060 <HAL_Init+0x40>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a07      	ldr	r2, [pc, #28]	; (8001060 <HAL_Init+0x40>)
 8001042:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001046:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001048:	2003      	movs	r0, #3
 800104a:	f000 f94f 	bl	80012ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800104e:	2005      	movs	r0, #5
 8001050:	f000 f808 	bl	8001064 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001054:	f7ff fef8 	bl	8000e48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001058:	2300      	movs	r3, #0
}
 800105a:	4618      	mov	r0, r3
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40023c00 	.word	0x40023c00

08001064 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800106c:	4b12      	ldr	r3, [pc, #72]	; (80010b8 <HAL_InitTick+0x54>)
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	4b12      	ldr	r3, [pc, #72]	; (80010bc <HAL_InitTick+0x58>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	4619      	mov	r1, r3
 8001076:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800107a:	fbb3 f3f1 	udiv	r3, r3, r1
 800107e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001082:	4618      	mov	r0, r3
 8001084:	f000 f967 	bl	8001356 <HAL_SYSTICK_Config>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	e00e      	b.n	80010b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2b0f      	cmp	r3, #15
 8001096:	d80a      	bhi.n	80010ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001098:	2200      	movs	r2, #0
 800109a:	6879      	ldr	r1, [r7, #4]
 800109c:	f04f 30ff 	mov.w	r0, #4294967295
 80010a0:	f000 f92f 	bl	8001302 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010a4:	4a06      	ldr	r2, [pc, #24]	; (80010c0 <HAL_InitTick+0x5c>)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010aa:	2300      	movs	r3, #0
 80010ac:	e000      	b.n	80010b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	20000008 	.word	0x20000008
 80010bc:	20000010 	.word	0x20000010
 80010c0:	2000000c 	.word	0x2000000c

080010c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010c8:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <HAL_IncTick+0x20>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	461a      	mov	r2, r3
 80010ce:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <HAL_IncTick+0x24>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4413      	add	r3, r2
 80010d4:	4a04      	ldr	r2, [pc, #16]	; (80010e8 <HAL_IncTick+0x24>)
 80010d6:	6013      	str	r3, [r2, #0]
}
 80010d8:	bf00      	nop
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	20000010 	.word	0x20000010
 80010e8:	200004e4 	.word	0x200004e4

080010ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  return uwTick;
 80010f0:	4b03      	ldr	r3, [pc, #12]	; (8001100 <HAL_GetTick+0x14>)
 80010f2:	681b      	ldr	r3, [r3, #0]
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	200004e4 	.word	0x200004e4

08001104 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800110c:	f7ff ffee 	bl	80010ec <HAL_GetTick>
 8001110:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800111c:	d005      	beq.n	800112a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800111e:	4b0a      	ldr	r3, [pc, #40]	; (8001148 <HAL_Delay+0x44>)
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	461a      	mov	r2, r3
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	4413      	add	r3, r2
 8001128:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800112a:	bf00      	nop
 800112c:	f7ff ffde 	bl	80010ec <HAL_GetTick>
 8001130:	4602      	mov	r2, r0
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	68fa      	ldr	r2, [r7, #12]
 8001138:	429a      	cmp	r2, r3
 800113a:	d8f7      	bhi.n	800112c <HAL_Delay+0x28>
  {
  }
}
 800113c:	bf00      	nop
 800113e:	bf00      	nop
 8001140:	3710      	adds	r7, #16
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20000010 	.word	0x20000010

0800114c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800114c:	b480      	push	{r7}
 800114e:	b085      	sub	sp, #20
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	f003 0307 	and.w	r3, r3, #7
 800115a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800115c:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <__NVIC_SetPriorityGrouping+0x44>)
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001162:	68ba      	ldr	r2, [r7, #8]
 8001164:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001168:	4013      	ands	r3, r2
 800116a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001174:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001178:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800117c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800117e:	4a04      	ldr	r2, [pc, #16]	; (8001190 <__NVIC_SetPriorityGrouping+0x44>)
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	60d3      	str	r3, [r2, #12]
}
 8001184:	bf00      	nop
 8001186:	3714      	adds	r7, #20
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	e000ed00 	.word	0xe000ed00

08001194 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001198:	4b04      	ldr	r3, [pc, #16]	; (80011ac <__NVIC_GetPriorityGrouping+0x18>)
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	0a1b      	lsrs	r3, r3, #8
 800119e:	f003 0307 	and.w	r3, r3, #7
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	e000ed00 	.word	0xe000ed00

080011b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	db0b      	blt.n	80011da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011c2:	79fb      	ldrb	r3, [r7, #7]
 80011c4:	f003 021f 	and.w	r2, r3, #31
 80011c8:	4907      	ldr	r1, [pc, #28]	; (80011e8 <__NVIC_EnableIRQ+0x38>)
 80011ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ce:	095b      	lsrs	r3, r3, #5
 80011d0:	2001      	movs	r0, #1
 80011d2:	fa00 f202 	lsl.w	r2, r0, r2
 80011d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011da:	bf00      	nop
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	e000e100 	.word	0xe000e100

080011ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	6039      	str	r1, [r7, #0]
 80011f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	db0a      	blt.n	8001216 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	b2da      	uxtb	r2, r3
 8001204:	490c      	ldr	r1, [pc, #48]	; (8001238 <__NVIC_SetPriority+0x4c>)
 8001206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120a:	0112      	lsls	r2, r2, #4
 800120c:	b2d2      	uxtb	r2, r2
 800120e:	440b      	add	r3, r1
 8001210:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001214:	e00a      	b.n	800122c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	b2da      	uxtb	r2, r3
 800121a:	4908      	ldr	r1, [pc, #32]	; (800123c <__NVIC_SetPriority+0x50>)
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	f003 030f 	and.w	r3, r3, #15
 8001222:	3b04      	subs	r3, #4
 8001224:	0112      	lsls	r2, r2, #4
 8001226:	b2d2      	uxtb	r2, r2
 8001228:	440b      	add	r3, r1
 800122a:	761a      	strb	r2, [r3, #24]
}
 800122c:	bf00      	nop
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	e000e100 	.word	0xe000e100
 800123c:	e000ed00 	.word	0xe000ed00

08001240 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001240:	b480      	push	{r7}
 8001242:	b089      	sub	sp, #36	; 0x24
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	f003 0307 	and.w	r3, r3, #7
 8001252:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	f1c3 0307 	rsb	r3, r3, #7
 800125a:	2b04      	cmp	r3, #4
 800125c:	bf28      	it	cs
 800125e:	2304      	movcs	r3, #4
 8001260:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	3304      	adds	r3, #4
 8001266:	2b06      	cmp	r3, #6
 8001268:	d902      	bls.n	8001270 <NVIC_EncodePriority+0x30>
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	3b03      	subs	r3, #3
 800126e:	e000      	b.n	8001272 <NVIC_EncodePriority+0x32>
 8001270:	2300      	movs	r3, #0
 8001272:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001274:	f04f 32ff 	mov.w	r2, #4294967295
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	fa02 f303 	lsl.w	r3, r2, r3
 800127e:	43da      	mvns	r2, r3
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	401a      	ands	r2, r3
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001288:	f04f 31ff 	mov.w	r1, #4294967295
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	fa01 f303 	lsl.w	r3, r1, r3
 8001292:	43d9      	mvns	r1, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001298:	4313      	orrs	r3, r2
         );
}
 800129a:	4618      	mov	r0, r3
 800129c:	3724      	adds	r7, #36	; 0x24
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
	...

080012a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	3b01      	subs	r3, #1
 80012b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012b8:	d301      	bcc.n	80012be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ba:	2301      	movs	r3, #1
 80012bc:	e00f      	b.n	80012de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012be:	4a0a      	ldr	r2, [pc, #40]	; (80012e8 <SysTick_Config+0x40>)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	3b01      	subs	r3, #1
 80012c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012c6:	210f      	movs	r1, #15
 80012c8:	f04f 30ff 	mov.w	r0, #4294967295
 80012cc:	f7ff ff8e 	bl	80011ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012d0:	4b05      	ldr	r3, [pc, #20]	; (80012e8 <SysTick_Config+0x40>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012d6:	4b04      	ldr	r3, [pc, #16]	; (80012e8 <SysTick_Config+0x40>)
 80012d8:	2207      	movs	r2, #7
 80012da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012dc:	2300      	movs	r3, #0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	e000e010 	.word	0xe000e010

080012ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f7ff ff29 	bl	800114c <__NVIC_SetPriorityGrouping>
}
 80012fa:	bf00      	nop
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}

08001302 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001302:	b580      	push	{r7, lr}
 8001304:	b086      	sub	sp, #24
 8001306:	af00      	add	r7, sp, #0
 8001308:	4603      	mov	r3, r0
 800130a:	60b9      	str	r1, [r7, #8]
 800130c:	607a      	str	r2, [r7, #4]
 800130e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001310:	2300      	movs	r3, #0
 8001312:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001314:	f7ff ff3e 	bl	8001194 <__NVIC_GetPriorityGrouping>
 8001318:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	68b9      	ldr	r1, [r7, #8]
 800131e:	6978      	ldr	r0, [r7, #20]
 8001320:	f7ff ff8e 	bl	8001240 <NVIC_EncodePriority>
 8001324:	4602      	mov	r2, r0
 8001326:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800132a:	4611      	mov	r1, r2
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff ff5d 	bl	80011ec <__NVIC_SetPriority>
}
 8001332:	bf00      	nop
 8001334:	3718      	adds	r7, #24
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800133a:	b580      	push	{r7, lr}
 800133c:	b082      	sub	sp, #8
 800133e:	af00      	add	r7, sp, #0
 8001340:	4603      	mov	r3, r0
 8001342:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff ff31 	bl	80011b0 <__NVIC_EnableIRQ>
}
 800134e:	bf00      	nop
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b082      	sub	sp, #8
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f7ff ffa2 	bl	80012a8 <SysTick_Config>
 8001364:	4603      	mov	r3, r0
}
 8001366:	4618      	mov	r0, r3
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
	...

08001370 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001370:	b480      	push	{r7}
 8001372:	b089      	sub	sp, #36	; 0x24
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800137a:	2300      	movs	r3, #0
 800137c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800137e:	2300      	movs	r3, #0
 8001380:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001382:	2300      	movs	r3, #0
 8001384:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001386:	2300      	movs	r3, #0
 8001388:	61fb      	str	r3, [r7, #28]
 800138a:	e177      	b.n	800167c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800138c:	2201      	movs	r2, #1
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	697a      	ldr	r2, [r7, #20]
 800139c:	4013      	ands	r3, r2
 800139e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013a0:	693a      	ldr	r2, [r7, #16]
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	f040 8166 	bne.w	8001676 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f003 0303 	and.w	r3, r3, #3
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d005      	beq.n	80013c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d130      	bne.n	8001424 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	2203      	movs	r2, #3
 80013ce:	fa02 f303 	lsl.w	r3, r2, r3
 80013d2:	43db      	mvns	r3, r3
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	4013      	ands	r3, r2
 80013d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	68da      	ldr	r2, [r3, #12]
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013f8:	2201      	movs	r2, #1
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	43db      	mvns	r3, r3
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	4013      	ands	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	091b      	lsrs	r3, r3, #4
 800140e:	f003 0201 	and.w	r2, r3, #1
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	4313      	orrs	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f003 0303 	and.w	r3, r3, #3
 800142c:	2b03      	cmp	r3, #3
 800142e:	d017      	beq.n	8001460 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	2203      	movs	r2, #3
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	43db      	mvns	r3, r3
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	4013      	ands	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	689a      	ldr	r2, [r3, #8]
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	4313      	orrs	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f003 0303 	and.w	r3, r3, #3
 8001468:	2b02      	cmp	r3, #2
 800146a:	d123      	bne.n	80014b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	08da      	lsrs	r2, r3, #3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	3208      	adds	r2, #8
 8001474:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001478:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	f003 0307 	and.w	r3, r3, #7
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	220f      	movs	r2, #15
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	43db      	mvns	r3, r3
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	4013      	ands	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	691a      	ldr	r2, [r3, #16]
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	f003 0307 	and.w	r3, r3, #7
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	08da      	lsrs	r2, r3, #3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	3208      	adds	r2, #8
 80014ae:	69b9      	ldr	r1, [r7, #24]
 80014b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	2203      	movs	r2, #3
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	43db      	mvns	r3, r3
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	4013      	ands	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f003 0203 	and.w	r2, r3, #3
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	4313      	orrs	r3, r2
 80014e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	f000 80c0 	beq.w	8001676 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	60fb      	str	r3, [r7, #12]
 80014fa:	4b66      	ldr	r3, [pc, #408]	; (8001694 <HAL_GPIO_Init+0x324>)
 80014fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fe:	4a65      	ldr	r2, [pc, #404]	; (8001694 <HAL_GPIO_Init+0x324>)
 8001500:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001504:	6453      	str	r3, [r2, #68]	; 0x44
 8001506:	4b63      	ldr	r3, [pc, #396]	; (8001694 <HAL_GPIO_Init+0x324>)
 8001508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800150e:	60fb      	str	r3, [r7, #12]
 8001510:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001512:	4a61      	ldr	r2, [pc, #388]	; (8001698 <HAL_GPIO_Init+0x328>)
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	089b      	lsrs	r3, r3, #2
 8001518:	3302      	adds	r3, #2
 800151a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800151e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	f003 0303 	and.w	r3, r3, #3
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	220f      	movs	r2, #15
 800152a:	fa02 f303 	lsl.w	r3, r2, r3
 800152e:	43db      	mvns	r3, r3
 8001530:	69ba      	ldr	r2, [r7, #24]
 8001532:	4013      	ands	r3, r2
 8001534:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a58      	ldr	r2, [pc, #352]	; (800169c <HAL_GPIO_Init+0x32c>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d037      	beq.n	80015ae <HAL_GPIO_Init+0x23e>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a57      	ldr	r2, [pc, #348]	; (80016a0 <HAL_GPIO_Init+0x330>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d031      	beq.n	80015aa <HAL_GPIO_Init+0x23a>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a56      	ldr	r2, [pc, #344]	; (80016a4 <HAL_GPIO_Init+0x334>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d02b      	beq.n	80015a6 <HAL_GPIO_Init+0x236>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a55      	ldr	r2, [pc, #340]	; (80016a8 <HAL_GPIO_Init+0x338>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d025      	beq.n	80015a2 <HAL_GPIO_Init+0x232>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a54      	ldr	r2, [pc, #336]	; (80016ac <HAL_GPIO_Init+0x33c>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d01f      	beq.n	800159e <HAL_GPIO_Init+0x22e>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a53      	ldr	r2, [pc, #332]	; (80016b0 <HAL_GPIO_Init+0x340>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d019      	beq.n	800159a <HAL_GPIO_Init+0x22a>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a52      	ldr	r2, [pc, #328]	; (80016b4 <HAL_GPIO_Init+0x344>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d013      	beq.n	8001596 <HAL_GPIO_Init+0x226>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a51      	ldr	r2, [pc, #324]	; (80016b8 <HAL_GPIO_Init+0x348>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d00d      	beq.n	8001592 <HAL_GPIO_Init+0x222>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a50      	ldr	r2, [pc, #320]	; (80016bc <HAL_GPIO_Init+0x34c>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d007      	beq.n	800158e <HAL_GPIO_Init+0x21e>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a4f      	ldr	r2, [pc, #316]	; (80016c0 <HAL_GPIO_Init+0x350>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d101      	bne.n	800158a <HAL_GPIO_Init+0x21a>
 8001586:	2309      	movs	r3, #9
 8001588:	e012      	b.n	80015b0 <HAL_GPIO_Init+0x240>
 800158a:	230a      	movs	r3, #10
 800158c:	e010      	b.n	80015b0 <HAL_GPIO_Init+0x240>
 800158e:	2308      	movs	r3, #8
 8001590:	e00e      	b.n	80015b0 <HAL_GPIO_Init+0x240>
 8001592:	2307      	movs	r3, #7
 8001594:	e00c      	b.n	80015b0 <HAL_GPIO_Init+0x240>
 8001596:	2306      	movs	r3, #6
 8001598:	e00a      	b.n	80015b0 <HAL_GPIO_Init+0x240>
 800159a:	2305      	movs	r3, #5
 800159c:	e008      	b.n	80015b0 <HAL_GPIO_Init+0x240>
 800159e:	2304      	movs	r3, #4
 80015a0:	e006      	b.n	80015b0 <HAL_GPIO_Init+0x240>
 80015a2:	2303      	movs	r3, #3
 80015a4:	e004      	b.n	80015b0 <HAL_GPIO_Init+0x240>
 80015a6:	2302      	movs	r3, #2
 80015a8:	e002      	b.n	80015b0 <HAL_GPIO_Init+0x240>
 80015aa:	2301      	movs	r3, #1
 80015ac:	e000      	b.n	80015b0 <HAL_GPIO_Init+0x240>
 80015ae:	2300      	movs	r3, #0
 80015b0:	69fa      	ldr	r2, [r7, #28]
 80015b2:	f002 0203 	and.w	r2, r2, #3
 80015b6:	0092      	lsls	r2, r2, #2
 80015b8:	4093      	lsls	r3, r2
 80015ba:	69ba      	ldr	r2, [r7, #24]
 80015bc:	4313      	orrs	r3, r2
 80015be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015c0:	4935      	ldr	r1, [pc, #212]	; (8001698 <HAL_GPIO_Init+0x328>)
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	089b      	lsrs	r3, r3, #2
 80015c6:	3302      	adds	r3, #2
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015ce:	4b3d      	ldr	r3, [pc, #244]	; (80016c4 <HAL_GPIO_Init+0x354>)
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	43db      	mvns	r3, r3
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	4013      	ands	r3, r2
 80015dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d003      	beq.n	80015f2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015f2:	4a34      	ldr	r2, [pc, #208]	; (80016c4 <HAL_GPIO_Init+0x354>)
 80015f4:	69bb      	ldr	r3, [r7, #24]
 80015f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015f8:	4b32      	ldr	r3, [pc, #200]	; (80016c4 <HAL_GPIO_Init+0x354>)
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	43db      	mvns	r3, r3
 8001602:	69ba      	ldr	r2, [r7, #24]
 8001604:	4013      	ands	r3, r2
 8001606:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001610:	2b00      	cmp	r3, #0
 8001612:	d003      	beq.n	800161c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	4313      	orrs	r3, r2
 800161a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800161c:	4a29      	ldr	r2, [pc, #164]	; (80016c4 <HAL_GPIO_Init+0x354>)
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001622:	4b28      	ldr	r3, [pc, #160]	; (80016c4 <HAL_GPIO_Init+0x354>)
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	43db      	mvns	r3, r3
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	4013      	ands	r3, r2
 8001630:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d003      	beq.n	8001646 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800163e:	69ba      	ldr	r2, [r7, #24]
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	4313      	orrs	r3, r2
 8001644:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001646:	4a1f      	ldr	r2, [pc, #124]	; (80016c4 <HAL_GPIO_Init+0x354>)
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800164c:	4b1d      	ldr	r3, [pc, #116]	; (80016c4 <HAL_GPIO_Init+0x354>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	43db      	mvns	r3, r3
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	4013      	ands	r3, r2
 800165a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d003      	beq.n	8001670 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	4313      	orrs	r3, r2
 800166e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001670:	4a14      	ldr	r2, [pc, #80]	; (80016c4 <HAL_GPIO_Init+0x354>)
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	3301      	adds	r3, #1
 800167a:	61fb      	str	r3, [r7, #28]
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	2b0f      	cmp	r3, #15
 8001680:	f67f ae84 	bls.w	800138c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001684:	bf00      	nop
 8001686:	bf00      	nop
 8001688:	3724      	adds	r7, #36	; 0x24
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	40023800 	.word	0x40023800
 8001698:	40013800 	.word	0x40013800
 800169c:	40020000 	.word	0x40020000
 80016a0:	40020400 	.word	0x40020400
 80016a4:	40020800 	.word	0x40020800
 80016a8:	40020c00 	.word	0x40020c00
 80016ac:	40021000 	.word	0x40021000
 80016b0:	40021400 	.word	0x40021400
 80016b4:	40021800 	.word	0x40021800
 80016b8:	40021c00 	.word	0x40021c00
 80016bc:	40022000 	.word	0x40022000
 80016c0:	40022400 	.word	0x40022400
 80016c4:	40013c00 	.word	0x40013c00

080016c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	460b      	mov	r3, r1
 80016d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	691a      	ldr	r2, [r3, #16]
 80016d8:	887b      	ldrh	r3, [r7, #2]
 80016da:	4013      	ands	r3, r2
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d002      	beq.n	80016e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016e0:	2301      	movs	r3, #1
 80016e2:	73fb      	strb	r3, [r7, #15]
 80016e4:	e001      	b.n	80016ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016e6:	2300      	movs	r3, #0
 80016e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3714      	adds	r7, #20
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	4603      	mov	r3, r0
 8001700:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001702:	4b08      	ldr	r3, [pc, #32]	; (8001724 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001704:	695a      	ldr	r2, [r3, #20]
 8001706:	88fb      	ldrh	r3, [r7, #6]
 8001708:	4013      	ands	r3, r2
 800170a:	2b00      	cmp	r3, #0
 800170c:	d006      	beq.n	800171c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800170e:	4a05      	ldr	r2, [pc, #20]	; (8001724 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001710:	88fb      	ldrh	r3, [r7, #6]
 8001712:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001714:	88fb      	ldrh	r3, [r7, #6]
 8001716:	4618      	mov	r0, r3
 8001718:	f000 f806 	bl	8001728 <HAL_GPIO_EXTI_Callback>
  }
}
 800171c:	bf00      	nop
 800171e:	3708      	adds	r7, #8
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	40013c00 	.word	0x40013c00

08001728 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001732:	bf00      	nop
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
	...

08001740 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d101      	bne.n	8001752 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e12b      	b.n	80019aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001758:	b2db      	uxtb	r3, r3
 800175a:	2b00      	cmp	r3, #0
 800175c:	d106      	bne.n	800176c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2200      	movs	r2, #0
 8001762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f7fe ffa0 	bl	80006ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2224      	movs	r2, #36	; 0x24
 8001770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f022 0201 	bic.w	r2, r2, #1
 8001782:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001792:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80017a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80017a4:	f001 fa92 	bl	8002ccc <HAL_RCC_GetPCLK1Freq>
 80017a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	4a81      	ldr	r2, [pc, #516]	; (80019b4 <HAL_I2C_Init+0x274>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d807      	bhi.n	80017c4 <HAL_I2C_Init+0x84>
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	4a80      	ldr	r2, [pc, #512]	; (80019b8 <HAL_I2C_Init+0x278>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	bf94      	ite	ls
 80017bc:	2301      	movls	r3, #1
 80017be:	2300      	movhi	r3, #0
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	e006      	b.n	80017d2 <HAL_I2C_Init+0x92>
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	4a7d      	ldr	r2, [pc, #500]	; (80019bc <HAL_I2C_Init+0x27c>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	bf94      	ite	ls
 80017cc:	2301      	movls	r3, #1
 80017ce:	2300      	movhi	r3, #0
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e0e7      	b.n	80019aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	4a78      	ldr	r2, [pc, #480]	; (80019c0 <HAL_I2C_Init+0x280>)
 80017de:	fba2 2303 	umull	r2, r3, r2, r3
 80017e2:	0c9b      	lsrs	r3, r3, #18
 80017e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	68ba      	ldr	r2, [r7, #8]
 80017f6:	430a      	orrs	r2, r1
 80017f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	6a1b      	ldr	r3, [r3, #32]
 8001800:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	4a6a      	ldr	r2, [pc, #424]	; (80019b4 <HAL_I2C_Init+0x274>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d802      	bhi.n	8001814 <HAL_I2C_Init+0xd4>
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	3301      	adds	r3, #1
 8001812:	e009      	b.n	8001828 <HAL_I2C_Init+0xe8>
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800181a:	fb02 f303 	mul.w	r3, r2, r3
 800181e:	4a69      	ldr	r2, [pc, #420]	; (80019c4 <HAL_I2C_Init+0x284>)
 8001820:	fba2 2303 	umull	r2, r3, r2, r3
 8001824:	099b      	lsrs	r3, r3, #6
 8001826:	3301      	adds	r3, #1
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	6812      	ldr	r2, [r2, #0]
 800182c:	430b      	orrs	r3, r1
 800182e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	69db      	ldr	r3, [r3, #28]
 8001836:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800183a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	495c      	ldr	r1, [pc, #368]	; (80019b4 <HAL_I2C_Init+0x274>)
 8001844:	428b      	cmp	r3, r1
 8001846:	d819      	bhi.n	800187c <HAL_I2C_Init+0x13c>
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	1e59      	subs	r1, r3, #1
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	fbb1 f3f3 	udiv	r3, r1, r3
 8001856:	1c59      	adds	r1, r3, #1
 8001858:	f640 73fc 	movw	r3, #4092	; 0xffc
 800185c:	400b      	ands	r3, r1
 800185e:	2b00      	cmp	r3, #0
 8001860:	d00a      	beq.n	8001878 <HAL_I2C_Init+0x138>
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	1e59      	subs	r1, r3, #1
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001870:	3301      	adds	r3, #1
 8001872:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001876:	e051      	b.n	800191c <HAL_I2C_Init+0x1dc>
 8001878:	2304      	movs	r3, #4
 800187a:	e04f      	b.n	800191c <HAL_I2C_Init+0x1dc>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d111      	bne.n	80018a8 <HAL_I2C_Init+0x168>
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	1e58      	subs	r0, r3, #1
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6859      	ldr	r1, [r3, #4]
 800188c:	460b      	mov	r3, r1
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	440b      	add	r3, r1
 8001892:	fbb0 f3f3 	udiv	r3, r0, r3
 8001896:	3301      	adds	r3, #1
 8001898:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800189c:	2b00      	cmp	r3, #0
 800189e:	bf0c      	ite	eq
 80018a0:	2301      	moveq	r3, #1
 80018a2:	2300      	movne	r3, #0
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	e012      	b.n	80018ce <HAL_I2C_Init+0x18e>
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	1e58      	subs	r0, r3, #1
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6859      	ldr	r1, [r3, #4]
 80018b0:	460b      	mov	r3, r1
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	440b      	add	r3, r1
 80018b6:	0099      	lsls	r1, r3, #2
 80018b8:	440b      	add	r3, r1
 80018ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80018be:	3301      	adds	r3, #1
 80018c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	bf0c      	ite	eq
 80018c8:	2301      	moveq	r3, #1
 80018ca:	2300      	movne	r3, #0
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <HAL_I2C_Init+0x196>
 80018d2:	2301      	movs	r3, #1
 80018d4:	e022      	b.n	800191c <HAL_I2C_Init+0x1dc>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d10e      	bne.n	80018fc <HAL_I2C_Init+0x1bc>
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	1e58      	subs	r0, r3, #1
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6859      	ldr	r1, [r3, #4]
 80018e6:	460b      	mov	r3, r1
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	440b      	add	r3, r1
 80018ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80018f0:	3301      	adds	r3, #1
 80018f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018fa:	e00f      	b.n	800191c <HAL_I2C_Init+0x1dc>
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	1e58      	subs	r0, r3, #1
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6859      	ldr	r1, [r3, #4]
 8001904:	460b      	mov	r3, r1
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	440b      	add	r3, r1
 800190a:	0099      	lsls	r1, r3, #2
 800190c:	440b      	add	r3, r1
 800190e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001912:	3301      	adds	r3, #1
 8001914:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001918:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800191c:	6879      	ldr	r1, [r7, #4]
 800191e:	6809      	ldr	r1, [r1, #0]
 8001920:	4313      	orrs	r3, r2
 8001922:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	69da      	ldr	r2, [r3, #28]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6a1b      	ldr	r3, [r3, #32]
 8001936:	431a      	orrs	r2, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	430a      	orrs	r2, r1
 800193e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800194a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	6911      	ldr	r1, [r2, #16]
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	68d2      	ldr	r2, [r2, #12]
 8001956:	4311      	orrs	r1, r2
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	6812      	ldr	r2, [r2, #0]
 800195c:	430b      	orrs	r3, r1
 800195e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	68db      	ldr	r3, [r3, #12]
 8001966:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	695a      	ldr	r2, [r3, #20]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	699b      	ldr	r3, [r3, #24]
 8001972:	431a      	orrs	r2, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	430a      	orrs	r2, r1
 800197a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f042 0201 	orr.w	r2, r2, #1
 800198a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2200      	movs	r2, #0
 8001990:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2220      	movs	r2, #32
 8001996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2200      	movs	r2, #0
 800199e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2200      	movs	r2, #0
 80019a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3710      	adds	r7, #16
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	000186a0 	.word	0x000186a0
 80019b8:	001e847f 	.word	0x001e847f
 80019bc:	003d08ff 	.word	0x003d08ff
 80019c0:	431bde83 	.word	0x431bde83
 80019c4:	10624dd3 	.word	0x10624dd3

080019c8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b088      	sub	sp, #32
 80019cc:	af02      	add	r7, sp, #8
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	607a      	str	r2, [r7, #4]
 80019d2:	461a      	mov	r2, r3
 80019d4:	460b      	mov	r3, r1
 80019d6:	817b      	strh	r3, [r7, #10]
 80019d8:	4613      	mov	r3, r2
 80019da:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80019dc:	f7ff fb86 	bl	80010ec <HAL_GetTick>
 80019e0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	2b20      	cmp	r3, #32
 80019ec:	f040 80e0 	bne.w	8001bb0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	9300      	str	r3, [sp, #0]
 80019f4:	2319      	movs	r3, #25
 80019f6:	2201      	movs	r2, #1
 80019f8:	4970      	ldr	r1, [pc, #448]	; (8001bbc <HAL_I2C_Master_Transmit+0x1f4>)
 80019fa:	68f8      	ldr	r0, [r7, #12]
 80019fc:	f000 fa92 	bl	8001f24 <I2C_WaitOnFlagUntilTimeout>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001a06:	2302      	movs	r3, #2
 8001a08:	e0d3      	b.n	8001bb2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d101      	bne.n	8001a18 <HAL_I2C_Master_Transmit+0x50>
 8001a14:	2302      	movs	r3, #2
 8001a16:	e0cc      	b.n	8001bb2 <HAL_I2C_Master_Transmit+0x1ea>
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d007      	beq.n	8001a3e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f042 0201 	orr.w	r2, r2, #1
 8001a3c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a4c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2221      	movs	r2, #33	; 0x21
 8001a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2210      	movs	r2, #16
 8001a5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2200      	movs	r2, #0
 8001a62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	893a      	ldrh	r2, [r7, #8]
 8001a6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a74:	b29a      	uxth	r2, r3
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	4a50      	ldr	r2, [pc, #320]	; (8001bc0 <HAL_I2C_Master_Transmit+0x1f8>)
 8001a7e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001a80:	8979      	ldrh	r1, [r7, #10]
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	6a3a      	ldr	r2, [r7, #32]
 8001a86:	68f8      	ldr	r0, [r7, #12]
 8001a88:	f000 f9ca 	bl	8001e20 <I2C_MasterRequestWrite>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e08d      	b.n	8001bb2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a96:	2300      	movs	r3, #0
 8001a98:	613b      	str	r3, [r7, #16]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	695b      	ldr	r3, [r3, #20]
 8001aa0:	613b      	str	r3, [r7, #16]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	699b      	ldr	r3, [r3, #24]
 8001aa8:	613b      	str	r3, [r7, #16]
 8001aaa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001aac:	e066      	b.n	8001b7c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001aae:	697a      	ldr	r2, [r7, #20]
 8001ab0:	6a39      	ldr	r1, [r7, #32]
 8001ab2:	68f8      	ldr	r0, [r7, #12]
 8001ab4:	f000 fb50 	bl	8002158 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d00d      	beq.n	8001ada <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	2b04      	cmp	r3, #4
 8001ac4:	d107      	bne.n	8001ad6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ad4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e06b      	b.n	8001bb2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ade:	781a      	ldrb	r2, [r3, #0]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aea:	1c5a      	adds	r2, r3, #1
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	3b01      	subs	r3, #1
 8001af8:	b29a      	uxth	r2, r3
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b02:	3b01      	subs	r3, #1
 8001b04:	b29a      	uxth	r2, r3
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	695b      	ldr	r3, [r3, #20]
 8001b10:	f003 0304 	and.w	r3, r3, #4
 8001b14:	2b04      	cmp	r3, #4
 8001b16:	d11b      	bne.n	8001b50 <HAL_I2C_Master_Transmit+0x188>
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d017      	beq.n	8001b50 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b24:	781a      	ldrb	r2, [r3, #0]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b30:	1c5a      	adds	r2, r3, #1
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	3b01      	subs	r3, #1
 8001b3e:	b29a      	uxth	r2, r3
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b48:	3b01      	subs	r3, #1
 8001b4a:	b29a      	uxth	r2, r3
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b50:	697a      	ldr	r2, [r7, #20]
 8001b52:	6a39      	ldr	r1, [r7, #32]
 8001b54:	68f8      	ldr	r0, [r7, #12]
 8001b56:	f000 fb47 	bl	80021e8 <I2C_WaitOnBTFFlagUntilTimeout>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d00d      	beq.n	8001b7c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b64:	2b04      	cmp	r3, #4
 8001b66:	d107      	bne.n	8001b78 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b76:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e01a      	b.n	8001bb2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d194      	bne.n	8001aae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2220      	movs	r2, #32
 8001b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001bac:	2300      	movs	r3, #0
 8001bae:	e000      	b.n	8001bb2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001bb0:	2302      	movs	r3, #2
  }
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3718      	adds	r7, #24
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	00100002 	.word	0x00100002
 8001bc0:	ffff0000 	.word	0xffff0000

08001bc4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b08a      	sub	sp, #40	; 0x28
 8001bc8:	af02      	add	r7, sp, #8
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	607a      	str	r2, [r7, #4]
 8001bce:	603b      	str	r3, [r7, #0]
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001bd4:	f7ff fa8a 	bl	80010ec <HAL_GetTick>
 8001bd8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2b20      	cmp	r3, #32
 8001be8:	f040 8111 	bne.w	8001e0e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	9300      	str	r3, [sp, #0]
 8001bf0:	2319      	movs	r3, #25
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	4988      	ldr	r1, [pc, #544]	; (8001e18 <HAL_I2C_IsDeviceReady+0x254>)
 8001bf6:	68f8      	ldr	r0, [r7, #12]
 8001bf8:	f000 f994 	bl	8001f24 <I2C_WaitOnFlagUntilTimeout>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001c02:	2302      	movs	r3, #2
 8001c04:	e104      	b.n	8001e10 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d101      	bne.n	8001c14 <HAL_I2C_IsDeviceReady+0x50>
 8001c10:	2302      	movs	r3, #2
 8001c12:	e0fd      	b.n	8001e10 <HAL_I2C_IsDeviceReady+0x24c>
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d007      	beq.n	8001c3a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f042 0201 	orr.w	r2, r2, #1
 8001c38:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c48:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2224      	movs	r2, #36	; 0x24
 8001c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2200      	movs	r2, #0
 8001c56:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	4a70      	ldr	r2, [pc, #448]	; (8001e1c <HAL_I2C_IsDeviceReady+0x258>)
 8001c5c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c6c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	9300      	str	r3, [sp, #0]
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	2200      	movs	r2, #0
 8001c76:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001c7a:	68f8      	ldr	r0, [r7, #12]
 8001c7c:	f000 f952 	bl	8001f24 <I2C_WaitOnFlagUntilTimeout>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d00d      	beq.n	8001ca2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c94:	d103      	bne.n	8001c9e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c9c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e0b6      	b.n	8001e10 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001ca2:	897b      	ldrh	r3, [r7, #10]
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001cb0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001cb2:	f7ff fa1b 	bl	80010ec <HAL_GetTick>
 8001cb6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	695b      	ldr	r3, [r3, #20]
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	bf0c      	ite	eq
 8001cc6:	2301      	moveq	r3, #1
 8001cc8:	2300      	movne	r3, #0
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	695b      	ldr	r3, [r3, #20]
 8001cd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cdc:	bf0c      	ite	eq
 8001cde:	2301      	moveq	r3, #1
 8001ce0:	2300      	movne	r3, #0
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001ce6:	e025      	b.n	8001d34 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001ce8:	f7ff fa00 	bl	80010ec <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	683a      	ldr	r2, [r7, #0]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d302      	bcc.n	8001cfe <HAL_I2C_IsDeviceReady+0x13a>
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d103      	bne.n	8001d06 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	22a0      	movs	r2, #160	; 0xa0
 8001d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	695b      	ldr	r3, [r3, #20]
 8001d0c:	f003 0302 	and.w	r3, r3, #2
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	bf0c      	ite	eq
 8001d14:	2301      	moveq	r3, #1
 8001d16:	2300      	movne	r3, #0
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	695b      	ldr	r3, [r3, #20]
 8001d22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d2a:	bf0c      	ite	eq
 8001d2c:	2301      	moveq	r3, #1
 8001d2e:	2300      	movne	r3, #0
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	2ba0      	cmp	r3, #160	; 0xa0
 8001d3e:	d005      	beq.n	8001d4c <HAL_I2C_IsDeviceReady+0x188>
 8001d40:	7dfb      	ldrb	r3, [r7, #23]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d102      	bne.n	8001d4c <HAL_I2C_IsDeviceReady+0x188>
 8001d46:	7dbb      	ldrb	r3, [r7, #22]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d0cd      	beq.n	8001ce8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2220      	movs	r2, #32
 8001d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	695b      	ldr	r3, [r3, #20]
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d129      	bne.n	8001db6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d70:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d72:	2300      	movs	r3, #0
 8001d74:	613b      	str	r3, [r7, #16]
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	695b      	ldr	r3, [r3, #20]
 8001d7c:	613b      	str	r3, [r7, #16]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	699b      	ldr	r3, [r3, #24]
 8001d84:	613b      	str	r3, [r7, #16]
 8001d86:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	9300      	str	r3, [sp, #0]
 8001d8c:	2319      	movs	r3, #25
 8001d8e:	2201      	movs	r2, #1
 8001d90:	4921      	ldr	r1, [pc, #132]	; (8001e18 <HAL_I2C_IsDeviceReady+0x254>)
 8001d92:	68f8      	ldr	r0, [r7, #12]
 8001d94:	f000 f8c6 	bl	8001f24 <I2C_WaitOnFlagUntilTimeout>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e036      	b.n	8001e10 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2220      	movs	r2, #32
 8001da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2200      	movs	r2, #0
 8001dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001db2:	2300      	movs	r3, #0
 8001db4:	e02c      	b.n	8001e10 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dc4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001dce:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	9300      	str	r3, [sp, #0]
 8001dd4:	2319      	movs	r3, #25
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	490f      	ldr	r1, [pc, #60]	; (8001e18 <HAL_I2C_IsDeviceReady+0x254>)
 8001dda:	68f8      	ldr	r0, [r7, #12]
 8001ddc:	f000 f8a2 	bl	8001f24 <I2C_WaitOnFlagUntilTimeout>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e012      	b.n	8001e10 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	3301      	adds	r3, #1
 8001dee:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	f4ff af32 	bcc.w	8001c5e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2220      	movs	r2, #32
 8001dfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2200      	movs	r2, #0
 8001e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e000      	b.n	8001e10 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001e0e:	2302      	movs	r3, #2
  }
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3720      	adds	r7, #32
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	00100002 	.word	0x00100002
 8001e1c:	ffff0000 	.word	0xffff0000

08001e20 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b088      	sub	sp, #32
 8001e24:	af02      	add	r7, sp, #8
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	607a      	str	r2, [r7, #4]
 8001e2a:	603b      	str	r3, [r7, #0]
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e34:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	2b08      	cmp	r3, #8
 8001e3a:	d006      	beq.n	8001e4a <I2C_MasterRequestWrite+0x2a>
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d003      	beq.n	8001e4a <I2C_MasterRequestWrite+0x2a>
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001e48:	d108      	bne.n	8001e5c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e58:	601a      	str	r2, [r3, #0]
 8001e5a:	e00b      	b.n	8001e74 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e60:	2b12      	cmp	r3, #18
 8001e62:	d107      	bne.n	8001e74 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e72:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	9300      	str	r3, [sp, #0]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e80:	68f8      	ldr	r0, [r7, #12]
 8001e82:	f000 f84f 	bl	8001f24 <I2C_WaitOnFlagUntilTimeout>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d00d      	beq.n	8001ea8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e9a:	d103      	bne.n	8001ea4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ea2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e035      	b.n	8001f14 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	691b      	ldr	r3, [r3, #16]
 8001eac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001eb0:	d108      	bne.n	8001ec4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001eb2:	897b      	ldrh	r3, [r7, #10]
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001ec0:	611a      	str	r2, [r3, #16]
 8001ec2:	e01b      	b.n	8001efc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001ec4:	897b      	ldrh	r3, [r7, #10]
 8001ec6:	11db      	asrs	r3, r3, #7
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	f003 0306 	and.w	r3, r3, #6
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	f063 030f 	orn	r3, r3, #15
 8001ed4:	b2da      	uxtb	r2, r3
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	490e      	ldr	r1, [pc, #56]	; (8001f1c <I2C_MasterRequestWrite+0xfc>)
 8001ee2:	68f8      	ldr	r0, [r7, #12]
 8001ee4:	f000 f898 	bl	8002018 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e010      	b.n	8001f14 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001ef2:	897b      	ldrh	r3, [r7, #10]
 8001ef4:	b2da      	uxtb	r2, r3
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	4907      	ldr	r1, [pc, #28]	; (8001f20 <I2C_MasterRequestWrite+0x100>)
 8001f02:	68f8      	ldr	r0, [r7, #12]
 8001f04:	f000 f888 	bl	8002018 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e000      	b.n	8001f14 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001f12:	2300      	movs	r3, #0
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3718      	adds	r7, #24
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	00010008 	.word	0x00010008
 8001f20:	00010002 	.word	0x00010002

08001f24 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	603b      	str	r3, [r7, #0]
 8001f30:	4613      	mov	r3, r2
 8001f32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f34:	e048      	b.n	8001fc8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f3c:	d044      	beq.n	8001fc8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f3e:	f7ff f8d5 	bl	80010ec <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	683a      	ldr	r2, [r7, #0]
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d302      	bcc.n	8001f54 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d139      	bne.n	8001fc8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	0c1b      	lsrs	r3, r3, #16
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d10d      	bne.n	8001f7a <I2C_WaitOnFlagUntilTimeout+0x56>
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	695b      	ldr	r3, [r3, #20]
 8001f64:	43da      	mvns	r2, r3
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	bf0c      	ite	eq
 8001f70:	2301      	moveq	r3, #1
 8001f72:	2300      	movne	r3, #0
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	461a      	mov	r2, r3
 8001f78:	e00c      	b.n	8001f94 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	699b      	ldr	r3, [r3, #24]
 8001f80:	43da      	mvns	r2, r3
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	4013      	ands	r3, r2
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	bf0c      	ite	eq
 8001f8c:	2301      	moveq	r3, #1
 8001f8e:	2300      	movne	r3, #0
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	461a      	mov	r2, r3
 8001f94:	79fb      	ldrb	r3, [r7, #7]
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d116      	bne.n	8001fc8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2220      	movs	r2, #32
 8001fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb4:	f043 0220 	orr.w	r2, r3, #32
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e023      	b.n	8002010 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	0c1b      	lsrs	r3, r3, #16
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d10d      	bne.n	8001fee <I2C_WaitOnFlagUntilTimeout+0xca>
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	695b      	ldr	r3, [r3, #20]
 8001fd8:	43da      	mvns	r2, r3
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	bf0c      	ite	eq
 8001fe4:	2301      	moveq	r3, #1
 8001fe6:	2300      	movne	r3, #0
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	461a      	mov	r2, r3
 8001fec:	e00c      	b.n	8002008 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	699b      	ldr	r3, [r3, #24]
 8001ff4:	43da      	mvns	r2, r3
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	bf0c      	ite	eq
 8002000:	2301      	moveq	r3, #1
 8002002:	2300      	movne	r3, #0
 8002004:	b2db      	uxtb	r3, r3
 8002006:	461a      	mov	r2, r3
 8002008:	79fb      	ldrb	r3, [r7, #7]
 800200a:	429a      	cmp	r2, r3
 800200c:	d093      	beq.n	8001f36 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800200e:	2300      	movs	r3, #0
}
 8002010:	4618      	mov	r0, r3
 8002012:	3710      	adds	r7, #16
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	60f8      	str	r0, [r7, #12]
 8002020:	60b9      	str	r1, [r7, #8]
 8002022:	607a      	str	r2, [r7, #4]
 8002024:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002026:	e071      	b.n	800210c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	695b      	ldr	r3, [r3, #20]
 800202e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002032:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002036:	d123      	bne.n	8002080 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002046:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002050:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2200      	movs	r2, #0
 8002056:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2220      	movs	r2, #32
 800205c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2200      	movs	r2, #0
 8002064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206c:	f043 0204 	orr.w	r2, r3, #4
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2200      	movs	r2, #0
 8002078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e067      	b.n	8002150 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002086:	d041      	beq.n	800210c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002088:	f7ff f830 	bl	80010ec <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	429a      	cmp	r2, r3
 8002096:	d302      	bcc.n	800209e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d136      	bne.n	800210c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	0c1b      	lsrs	r3, r3, #16
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d10c      	bne.n	80020c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	695b      	ldr	r3, [r3, #20]
 80020ae:	43da      	mvns	r2, r3
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	4013      	ands	r3, r2
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	bf14      	ite	ne
 80020ba:	2301      	movne	r3, #1
 80020bc:	2300      	moveq	r3, #0
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	e00b      	b.n	80020da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	43da      	mvns	r2, r3
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	4013      	ands	r3, r2
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	bf14      	ite	ne
 80020d4:	2301      	movne	r3, #1
 80020d6:	2300      	moveq	r3, #0
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d016      	beq.n	800210c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2200      	movs	r2, #0
 80020e2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2220      	movs	r2, #32
 80020e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2200      	movs	r2, #0
 80020f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f8:	f043 0220 	orr.w	r2, r3, #32
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2200      	movs	r2, #0
 8002104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e021      	b.n	8002150 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	0c1b      	lsrs	r3, r3, #16
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b01      	cmp	r3, #1
 8002114:	d10c      	bne.n	8002130 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	695b      	ldr	r3, [r3, #20]
 800211c:	43da      	mvns	r2, r3
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	4013      	ands	r3, r2
 8002122:	b29b      	uxth	r3, r3
 8002124:	2b00      	cmp	r3, #0
 8002126:	bf14      	ite	ne
 8002128:	2301      	movne	r3, #1
 800212a:	2300      	moveq	r3, #0
 800212c:	b2db      	uxtb	r3, r3
 800212e:	e00b      	b.n	8002148 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	699b      	ldr	r3, [r3, #24]
 8002136:	43da      	mvns	r2, r3
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	4013      	ands	r3, r2
 800213c:	b29b      	uxth	r3, r3
 800213e:	2b00      	cmp	r3, #0
 8002140:	bf14      	ite	ne
 8002142:	2301      	movne	r3, #1
 8002144:	2300      	moveq	r3, #0
 8002146:	b2db      	uxtb	r3, r3
 8002148:	2b00      	cmp	r3, #0
 800214a:	f47f af6d 	bne.w	8002028 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800214e:	2300      	movs	r3, #0
}
 8002150:	4618      	mov	r0, r3
 8002152:	3710      	adds	r7, #16
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}

08002158 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002164:	e034      	b.n	80021d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002166:	68f8      	ldr	r0, [r7, #12]
 8002168:	f000 f886 	bl	8002278 <I2C_IsAcknowledgeFailed>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e034      	b.n	80021e0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800217c:	d028      	beq.n	80021d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800217e:	f7fe ffb5 	bl	80010ec <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	68ba      	ldr	r2, [r7, #8]
 800218a:	429a      	cmp	r2, r3
 800218c:	d302      	bcc.n	8002194 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d11d      	bne.n	80021d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	695b      	ldr	r3, [r3, #20]
 800219a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800219e:	2b80      	cmp	r3, #128	; 0x80
 80021a0:	d016      	beq.n	80021d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2200      	movs	r2, #0
 80021a6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2220      	movs	r2, #32
 80021ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2200      	movs	r2, #0
 80021b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021bc:	f043 0220 	orr.w	r2, r3, #32
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e007      	b.n	80021e0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	695b      	ldr	r3, [r3, #20]
 80021d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021da:	2b80      	cmp	r3, #128	; 0x80
 80021dc:	d1c3      	bne.n	8002166 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80021de:	2300      	movs	r3, #0
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3710      	adds	r7, #16
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80021f4:	e034      	b.n	8002260 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80021f6:	68f8      	ldr	r0, [r7, #12]
 80021f8:	f000 f83e 	bl	8002278 <I2C_IsAcknowledgeFailed>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e034      	b.n	8002270 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800220c:	d028      	beq.n	8002260 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800220e:	f7fe ff6d 	bl	80010ec <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	68ba      	ldr	r2, [r7, #8]
 800221a:	429a      	cmp	r2, r3
 800221c:	d302      	bcc.n	8002224 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d11d      	bne.n	8002260 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	f003 0304 	and.w	r3, r3, #4
 800222e:	2b04      	cmp	r3, #4
 8002230:	d016      	beq.n	8002260 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2200      	movs	r2, #0
 8002236:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2220      	movs	r2, #32
 800223c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2200      	movs	r2, #0
 8002244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224c:	f043 0220 	orr.w	r2, r3, #32
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2200      	movs	r2, #0
 8002258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e007      	b.n	8002270 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	695b      	ldr	r3, [r3, #20]
 8002266:	f003 0304 	and.w	r3, r3, #4
 800226a:	2b04      	cmp	r3, #4
 800226c:	d1c3      	bne.n	80021f6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800226e:	2300      	movs	r3, #0
}
 8002270:	4618      	mov	r0, r3
 8002272:	3710      	adds	r7, #16
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	695b      	ldr	r3, [r3, #20]
 8002286:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800228a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800228e:	d11b      	bne.n	80022c8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002298:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2220      	movs	r2, #32
 80022a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b4:	f043 0204 	orr.w	r2, r3, #4
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e000      	b.n	80022ca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr

080022d6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80022d6:	b480      	push	{r7}
 80022d8:	b083      	sub	sp, #12
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
 80022de:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	2b20      	cmp	r3, #32
 80022ea:	d129      	bne.n	8002340 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2224      	movs	r2, #36	; 0x24
 80022f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f022 0201 	bic.w	r2, r2, #1
 8002302:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f022 0210 	bic.w	r2, r2, #16
 8002312:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	683a      	ldr	r2, [r7, #0]
 8002320:	430a      	orrs	r2, r1
 8002322:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f042 0201 	orr.w	r2, r2, #1
 8002332:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2220      	movs	r2, #32
 8002338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800233c:	2300      	movs	r3, #0
 800233e:	e000      	b.n	8002342 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002340:	2302      	movs	r3, #2
  }
}
 8002342:	4618      	mov	r0, r3
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr

0800234e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800234e:	b480      	push	{r7}
 8002350:	b085      	sub	sp, #20
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
 8002356:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002358:	2300      	movs	r3, #0
 800235a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002362:	b2db      	uxtb	r3, r3
 8002364:	2b20      	cmp	r3, #32
 8002366:	d12a      	bne.n	80023be <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2224      	movs	r2, #36	; 0x24
 800236c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f022 0201 	bic.w	r2, r2, #1
 800237e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002386:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8002388:	89fb      	ldrh	r3, [r7, #14]
 800238a:	f023 030f 	bic.w	r3, r3, #15
 800238e:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	b29a      	uxth	r2, r3
 8002394:	89fb      	ldrh	r3, [r7, #14]
 8002396:	4313      	orrs	r3, r2
 8002398:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	89fa      	ldrh	r2, [r7, #14]
 80023a0:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f042 0201 	orr.w	r2, r2, #1
 80023b0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2220      	movs	r2, #32
 80023b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80023ba:	2300      	movs	r3, #0
 80023bc:	e000      	b.n	80023c0 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80023be:	2302      	movs	r3, #2
  }
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3714      	adds	r7, #20
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80023d2:	2300      	movs	r3, #0
 80023d4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80023d6:	2300      	movs	r3, #0
 80023d8:	603b      	str	r3, [r7, #0]
 80023da:	4b20      	ldr	r3, [pc, #128]	; (800245c <HAL_PWREx_EnableOverDrive+0x90>)
 80023dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023de:	4a1f      	ldr	r2, [pc, #124]	; (800245c <HAL_PWREx_EnableOverDrive+0x90>)
 80023e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023e4:	6413      	str	r3, [r2, #64]	; 0x40
 80023e6:	4b1d      	ldr	r3, [pc, #116]	; (800245c <HAL_PWREx_EnableOverDrive+0x90>)
 80023e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ee:	603b      	str	r3, [r7, #0]
 80023f0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80023f2:	4b1b      	ldr	r3, [pc, #108]	; (8002460 <HAL_PWREx_EnableOverDrive+0x94>)
 80023f4:	2201      	movs	r2, #1
 80023f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023f8:	f7fe fe78 	bl	80010ec <HAL_GetTick>
 80023fc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80023fe:	e009      	b.n	8002414 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002400:	f7fe fe74 	bl	80010ec <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800240e:	d901      	bls.n	8002414 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002410:	2303      	movs	r3, #3
 8002412:	e01f      	b.n	8002454 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002414:	4b13      	ldr	r3, [pc, #76]	; (8002464 <HAL_PWREx_EnableOverDrive+0x98>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800241c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002420:	d1ee      	bne.n	8002400 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002422:	4b11      	ldr	r3, [pc, #68]	; (8002468 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002424:	2201      	movs	r2, #1
 8002426:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002428:	f7fe fe60 	bl	80010ec <HAL_GetTick>
 800242c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800242e:	e009      	b.n	8002444 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002430:	f7fe fe5c 	bl	80010ec <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800243e:	d901      	bls.n	8002444 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e007      	b.n	8002454 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002444:	4b07      	ldr	r3, [pc, #28]	; (8002464 <HAL_PWREx_EnableOverDrive+0x98>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800244c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002450:	d1ee      	bne.n	8002430 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002452:	2300      	movs	r3, #0
}
 8002454:	4618      	mov	r0, r3
 8002456:	3708      	adds	r7, #8
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	40023800 	.word	0x40023800
 8002460:	420e0040 	.word	0x420e0040
 8002464:	40007000 	.word	0x40007000
 8002468:	420e0044 	.word	0x420e0044

0800246c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b086      	sub	sp, #24
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d101      	bne.n	800247e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e267      	b.n	800294e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0301 	and.w	r3, r3, #1
 8002486:	2b00      	cmp	r3, #0
 8002488:	d075      	beq.n	8002576 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800248a:	4b88      	ldr	r3, [pc, #544]	; (80026ac <HAL_RCC_OscConfig+0x240>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f003 030c 	and.w	r3, r3, #12
 8002492:	2b04      	cmp	r3, #4
 8002494:	d00c      	beq.n	80024b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002496:	4b85      	ldr	r3, [pc, #532]	; (80026ac <HAL_RCC_OscConfig+0x240>)
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800249e:	2b08      	cmp	r3, #8
 80024a0:	d112      	bne.n	80024c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024a2:	4b82      	ldr	r3, [pc, #520]	; (80026ac <HAL_RCC_OscConfig+0x240>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024ae:	d10b      	bne.n	80024c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024b0:	4b7e      	ldr	r3, [pc, #504]	; (80026ac <HAL_RCC_OscConfig+0x240>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d05b      	beq.n	8002574 <HAL_RCC_OscConfig+0x108>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d157      	bne.n	8002574 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e242      	b.n	800294e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024d0:	d106      	bne.n	80024e0 <HAL_RCC_OscConfig+0x74>
 80024d2:	4b76      	ldr	r3, [pc, #472]	; (80026ac <HAL_RCC_OscConfig+0x240>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a75      	ldr	r2, [pc, #468]	; (80026ac <HAL_RCC_OscConfig+0x240>)
 80024d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024dc:	6013      	str	r3, [r2, #0]
 80024de:	e01d      	b.n	800251c <HAL_RCC_OscConfig+0xb0>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024e8:	d10c      	bne.n	8002504 <HAL_RCC_OscConfig+0x98>
 80024ea:	4b70      	ldr	r3, [pc, #448]	; (80026ac <HAL_RCC_OscConfig+0x240>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a6f      	ldr	r2, [pc, #444]	; (80026ac <HAL_RCC_OscConfig+0x240>)
 80024f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024f4:	6013      	str	r3, [r2, #0]
 80024f6:	4b6d      	ldr	r3, [pc, #436]	; (80026ac <HAL_RCC_OscConfig+0x240>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a6c      	ldr	r2, [pc, #432]	; (80026ac <HAL_RCC_OscConfig+0x240>)
 80024fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002500:	6013      	str	r3, [r2, #0]
 8002502:	e00b      	b.n	800251c <HAL_RCC_OscConfig+0xb0>
 8002504:	4b69      	ldr	r3, [pc, #420]	; (80026ac <HAL_RCC_OscConfig+0x240>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a68      	ldr	r2, [pc, #416]	; (80026ac <HAL_RCC_OscConfig+0x240>)
 800250a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800250e:	6013      	str	r3, [r2, #0]
 8002510:	4b66      	ldr	r3, [pc, #408]	; (80026ac <HAL_RCC_OscConfig+0x240>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a65      	ldr	r2, [pc, #404]	; (80026ac <HAL_RCC_OscConfig+0x240>)
 8002516:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800251a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d013      	beq.n	800254c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002524:	f7fe fde2 	bl	80010ec <HAL_GetTick>
 8002528:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800252a:	e008      	b.n	800253e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800252c:	f7fe fdde 	bl	80010ec <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	2b64      	cmp	r3, #100	; 0x64
 8002538:	d901      	bls.n	800253e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e207      	b.n	800294e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800253e:	4b5b      	ldr	r3, [pc, #364]	; (80026ac <HAL_RCC_OscConfig+0x240>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d0f0      	beq.n	800252c <HAL_RCC_OscConfig+0xc0>
 800254a:	e014      	b.n	8002576 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800254c:	f7fe fdce 	bl	80010ec <HAL_GetTick>
 8002550:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002552:	e008      	b.n	8002566 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002554:	f7fe fdca 	bl	80010ec <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	2b64      	cmp	r3, #100	; 0x64
 8002560:	d901      	bls.n	8002566 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e1f3      	b.n	800294e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002566:	4b51      	ldr	r3, [pc, #324]	; (80026ac <HAL_RCC_OscConfig+0x240>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d1f0      	bne.n	8002554 <HAL_RCC_OscConfig+0xe8>
 8002572:	e000      	b.n	8002576 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002574:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	2b00      	cmp	r3, #0
 8002580:	d063      	beq.n	800264a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002582:	4b4a      	ldr	r3, [pc, #296]	; (80026ac <HAL_RCC_OscConfig+0x240>)
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f003 030c 	and.w	r3, r3, #12
 800258a:	2b00      	cmp	r3, #0
 800258c:	d00b      	beq.n	80025a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800258e:	4b47      	ldr	r3, [pc, #284]	; (80026ac <HAL_RCC_OscConfig+0x240>)
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002596:	2b08      	cmp	r3, #8
 8002598:	d11c      	bne.n	80025d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800259a:	4b44      	ldr	r3, [pc, #272]	; (80026ac <HAL_RCC_OscConfig+0x240>)
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d116      	bne.n	80025d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025a6:	4b41      	ldr	r3, [pc, #260]	; (80026ac <HAL_RCC_OscConfig+0x240>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d005      	beq.n	80025be <HAL_RCC_OscConfig+0x152>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d001      	beq.n	80025be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e1c7      	b.n	800294e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025be:	4b3b      	ldr	r3, [pc, #236]	; (80026ac <HAL_RCC_OscConfig+0x240>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	00db      	lsls	r3, r3, #3
 80025cc:	4937      	ldr	r1, [pc, #220]	; (80026ac <HAL_RCC_OscConfig+0x240>)
 80025ce:	4313      	orrs	r3, r2
 80025d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025d2:	e03a      	b.n	800264a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d020      	beq.n	800261e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025dc:	4b34      	ldr	r3, [pc, #208]	; (80026b0 <HAL_RCC_OscConfig+0x244>)
 80025de:	2201      	movs	r2, #1
 80025e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e2:	f7fe fd83 	bl	80010ec <HAL_GetTick>
 80025e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025e8:	e008      	b.n	80025fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025ea:	f7fe fd7f 	bl	80010ec <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d901      	bls.n	80025fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025f8:	2303      	movs	r3, #3
 80025fa:	e1a8      	b.n	800294e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025fc:	4b2b      	ldr	r3, [pc, #172]	; (80026ac <HAL_RCC_OscConfig+0x240>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0302 	and.w	r3, r3, #2
 8002604:	2b00      	cmp	r3, #0
 8002606:	d0f0      	beq.n	80025ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002608:	4b28      	ldr	r3, [pc, #160]	; (80026ac <HAL_RCC_OscConfig+0x240>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	691b      	ldr	r3, [r3, #16]
 8002614:	00db      	lsls	r3, r3, #3
 8002616:	4925      	ldr	r1, [pc, #148]	; (80026ac <HAL_RCC_OscConfig+0x240>)
 8002618:	4313      	orrs	r3, r2
 800261a:	600b      	str	r3, [r1, #0]
 800261c:	e015      	b.n	800264a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800261e:	4b24      	ldr	r3, [pc, #144]	; (80026b0 <HAL_RCC_OscConfig+0x244>)
 8002620:	2200      	movs	r2, #0
 8002622:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002624:	f7fe fd62 	bl	80010ec <HAL_GetTick>
 8002628:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800262a:	e008      	b.n	800263e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800262c:	f7fe fd5e 	bl	80010ec <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b02      	cmp	r3, #2
 8002638:	d901      	bls.n	800263e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e187      	b.n	800294e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800263e:	4b1b      	ldr	r3, [pc, #108]	; (80026ac <HAL_RCC_OscConfig+0x240>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0302 	and.w	r3, r3, #2
 8002646:	2b00      	cmp	r3, #0
 8002648:	d1f0      	bne.n	800262c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0308 	and.w	r3, r3, #8
 8002652:	2b00      	cmp	r3, #0
 8002654:	d036      	beq.n	80026c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	695b      	ldr	r3, [r3, #20]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d016      	beq.n	800268c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800265e:	4b15      	ldr	r3, [pc, #84]	; (80026b4 <HAL_RCC_OscConfig+0x248>)
 8002660:	2201      	movs	r2, #1
 8002662:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002664:	f7fe fd42 	bl	80010ec <HAL_GetTick>
 8002668:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800266a:	e008      	b.n	800267e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800266c:	f7fe fd3e 	bl	80010ec <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	2b02      	cmp	r3, #2
 8002678:	d901      	bls.n	800267e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e167      	b.n	800294e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800267e:	4b0b      	ldr	r3, [pc, #44]	; (80026ac <HAL_RCC_OscConfig+0x240>)
 8002680:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002682:	f003 0302 	and.w	r3, r3, #2
 8002686:	2b00      	cmp	r3, #0
 8002688:	d0f0      	beq.n	800266c <HAL_RCC_OscConfig+0x200>
 800268a:	e01b      	b.n	80026c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800268c:	4b09      	ldr	r3, [pc, #36]	; (80026b4 <HAL_RCC_OscConfig+0x248>)
 800268e:	2200      	movs	r2, #0
 8002690:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002692:	f7fe fd2b 	bl	80010ec <HAL_GetTick>
 8002696:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002698:	e00e      	b.n	80026b8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800269a:	f7fe fd27 	bl	80010ec <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d907      	bls.n	80026b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	e150      	b.n	800294e <HAL_RCC_OscConfig+0x4e2>
 80026ac:	40023800 	.word	0x40023800
 80026b0:	42470000 	.word	0x42470000
 80026b4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026b8:	4b88      	ldr	r3, [pc, #544]	; (80028dc <HAL_RCC_OscConfig+0x470>)
 80026ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026bc:	f003 0302 	and.w	r3, r3, #2
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d1ea      	bne.n	800269a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0304 	and.w	r3, r3, #4
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	f000 8097 	beq.w	8002800 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026d2:	2300      	movs	r3, #0
 80026d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026d6:	4b81      	ldr	r3, [pc, #516]	; (80028dc <HAL_RCC_OscConfig+0x470>)
 80026d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d10f      	bne.n	8002702 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026e2:	2300      	movs	r3, #0
 80026e4:	60bb      	str	r3, [r7, #8]
 80026e6:	4b7d      	ldr	r3, [pc, #500]	; (80028dc <HAL_RCC_OscConfig+0x470>)
 80026e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ea:	4a7c      	ldr	r2, [pc, #496]	; (80028dc <HAL_RCC_OscConfig+0x470>)
 80026ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026f0:	6413      	str	r3, [r2, #64]	; 0x40
 80026f2:	4b7a      	ldr	r3, [pc, #488]	; (80028dc <HAL_RCC_OscConfig+0x470>)
 80026f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026fa:	60bb      	str	r3, [r7, #8]
 80026fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026fe:	2301      	movs	r3, #1
 8002700:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002702:	4b77      	ldr	r3, [pc, #476]	; (80028e0 <HAL_RCC_OscConfig+0x474>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800270a:	2b00      	cmp	r3, #0
 800270c:	d118      	bne.n	8002740 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800270e:	4b74      	ldr	r3, [pc, #464]	; (80028e0 <HAL_RCC_OscConfig+0x474>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a73      	ldr	r2, [pc, #460]	; (80028e0 <HAL_RCC_OscConfig+0x474>)
 8002714:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002718:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800271a:	f7fe fce7 	bl	80010ec <HAL_GetTick>
 800271e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002720:	e008      	b.n	8002734 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002722:	f7fe fce3 	bl	80010ec <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	2b02      	cmp	r3, #2
 800272e:	d901      	bls.n	8002734 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002730:	2303      	movs	r3, #3
 8002732:	e10c      	b.n	800294e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002734:	4b6a      	ldr	r3, [pc, #424]	; (80028e0 <HAL_RCC_OscConfig+0x474>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800273c:	2b00      	cmp	r3, #0
 800273e:	d0f0      	beq.n	8002722 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	2b01      	cmp	r3, #1
 8002746:	d106      	bne.n	8002756 <HAL_RCC_OscConfig+0x2ea>
 8002748:	4b64      	ldr	r3, [pc, #400]	; (80028dc <HAL_RCC_OscConfig+0x470>)
 800274a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800274c:	4a63      	ldr	r2, [pc, #396]	; (80028dc <HAL_RCC_OscConfig+0x470>)
 800274e:	f043 0301 	orr.w	r3, r3, #1
 8002752:	6713      	str	r3, [r2, #112]	; 0x70
 8002754:	e01c      	b.n	8002790 <HAL_RCC_OscConfig+0x324>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	2b05      	cmp	r3, #5
 800275c:	d10c      	bne.n	8002778 <HAL_RCC_OscConfig+0x30c>
 800275e:	4b5f      	ldr	r3, [pc, #380]	; (80028dc <HAL_RCC_OscConfig+0x470>)
 8002760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002762:	4a5e      	ldr	r2, [pc, #376]	; (80028dc <HAL_RCC_OscConfig+0x470>)
 8002764:	f043 0304 	orr.w	r3, r3, #4
 8002768:	6713      	str	r3, [r2, #112]	; 0x70
 800276a:	4b5c      	ldr	r3, [pc, #368]	; (80028dc <HAL_RCC_OscConfig+0x470>)
 800276c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800276e:	4a5b      	ldr	r2, [pc, #364]	; (80028dc <HAL_RCC_OscConfig+0x470>)
 8002770:	f043 0301 	orr.w	r3, r3, #1
 8002774:	6713      	str	r3, [r2, #112]	; 0x70
 8002776:	e00b      	b.n	8002790 <HAL_RCC_OscConfig+0x324>
 8002778:	4b58      	ldr	r3, [pc, #352]	; (80028dc <HAL_RCC_OscConfig+0x470>)
 800277a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800277c:	4a57      	ldr	r2, [pc, #348]	; (80028dc <HAL_RCC_OscConfig+0x470>)
 800277e:	f023 0301 	bic.w	r3, r3, #1
 8002782:	6713      	str	r3, [r2, #112]	; 0x70
 8002784:	4b55      	ldr	r3, [pc, #340]	; (80028dc <HAL_RCC_OscConfig+0x470>)
 8002786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002788:	4a54      	ldr	r2, [pc, #336]	; (80028dc <HAL_RCC_OscConfig+0x470>)
 800278a:	f023 0304 	bic.w	r3, r3, #4
 800278e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d015      	beq.n	80027c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002798:	f7fe fca8 	bl	80010ec <HAL_GetTick>
 800279c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800279e:	e00a      	b.n	80027b6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027a0:	f7fe fca4 	bl	80010ec <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e0cb      	b.n	800294e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027b6:	4b49      	ldr	r3, [pc, #292]	; (80028dc <HAL_RCC_OscConfig+0x470>)
 80027b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d0ee      	beq.n	80027a0 <HAL_RCC_OscConfig+0x334>
 80027c2:	e014      	b.n	80027ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027c4:	f7fe fc92 	bl	80010ec <HAL_GetTick>
 80027c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027ca:	e00a      	b.n	80027e2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027cc:	f7fe fc8e 	bl	80010ec <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80027da:	4293      	cmp	r3, r2
 80027dc:	d901      	bls.n	80027e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e0b5      	b.n	800294e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027e2:	4b3e      	ldr	r3, [pc, #248]	; (80028dc <HAL_RCC_OscConfig+0x470>)
 80027e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d1ee      	bne.n	80027cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027ee:	7dfb      	ldrb	r3, [r7, #23]
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d105      	bne.n	8002800 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027f4:	4b39      	ldr	r3, [pc, #228]	; (80028dc <HAL_RCC_OscConfig+0x470>)
 80027f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f8:	4a38      	ldr	r2, [pc, #224]	; (80028dc <HAL_RCC_OscConfig+0x470>)
 80027fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027fe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	699b      	ldr	r3, [r3, #24]
 8002804:	2b00      	cmp	r3, #0
 8002806:	f000 80a1 	beq.w	800294c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800280a:	4b34      	ldr	r3, [pc, #208]	; (80028dc <HAL_RCC_OscConfig+0x470>)
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f003 030c 	and.w	r3, r3, #12
 8002812:	2b08      	cmp	r3, #8
 8002814:	d05c      	beq.n	80028d0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	699b      	ldr	r3, [r3, #24]
 800281a:	2b02      	cmp	r3, #2
 800281c:	d141      	bne.n	80028a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800281e:	4b31      	ldr	r3, [pc, #196]	; (80028e4 <HAL_RCC_OscConfig+0x478>)
 8002820:	2200      	movs	r2, #0
 8002822:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002824:	f7fe fc62 	bl	80010ec <HAL_GetTick>
 8002828:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800282a:	e008      	b.n	800283e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800282c:	f7fe fc5e 	bl	80010ec <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	2b02      	cmp	r3, #2
 8002838:	d901      	bls.n	800283e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e087      	b.n	800294e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800283e:	4b27      	ldr	r3, [pc, #156]	; (80028dc <HAL_RCC_OscConfig+0x470>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d1f0      	bne.n	800282c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	69da      	ldr	r2, [r3, #28]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a1b      	ldr	r3, [r3, #32]
 8002852:	431a      	orrs	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002858:	019b      	lsls	r3, r3, #6
 800285a:	431a      	orrs	r2, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002860:	085b      	lsrs	r3, r3, #1
 8002862:	3b01      	subs	r3, #1
 8002864:	041b      	lsls	r3, r3, #16
 8002866:	431a      	orrs	r2, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800286c:	061b      	lsls	r3, r3, #24
 800286e:	491b      	ldr	r1, [pc, #108]	; (80028dc <HAL_RCC_OscConfig+0x470>)
 8002870:	4313      	orrs	r3, r2
 8002872:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002874:	4b1b      	ldr	r3, [pc, #108]	; (80028e4 <HAL_RCC_OscConfig+0x478>)
 8002876:	2201      	movs	r2, #1
 8002878:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800287a:	f7fe fc37 	bl	80010ec <HAL_GetTick>
 800287e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002880:	e008      	b.n	8002894 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002882:	f7fe fc33 	bl	80010ec <HAL_GetTick>
 8002886:	4602      	mov	r2, r0
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	2b02      	cmp	r3, #2
 800288e:	d901      	bls.n	8002894 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e05c      	b.n	800294e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002894:	4b11      	ldr	r3, [pc, #68]	; (80028dc <HAL_RCC_OscConfig+0x470>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d0f0      	beq.n	8002882 <HAL_RCC_OscConfig+0x416>
 80028a0:	e054      	b.n	800294c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028a2:	4b10      	ldr	r3, [pc, #64]	; (80028e4 <HAL_RCC_OscConfig+0x478>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a8:	f7fe fc20 	bl	80010ec <HAL_GetTick>
 80028ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ae:	e008      	b.n	80028c2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028b0:	f7fe fc1c 	bl	80010ec <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e045      	b.n	800294e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028c2:	4b06      	ldr	r3, [pc, #24]	; (80028dc <HAL_RCC_OscConfig+0x470>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d1f0      	bne.n	80028b0 <HAL_RCC_OscConfig+0x444>
 80028ce:	e03d      	b.n	800294c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d107      	bne.n	80028e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e038      	b.n	800294e <HAL_RCC_OscConfig+0x4e2>
 80028dc:	40023800 	.word	0x40023800
 80028e0:	40007000 	.word	0x40007000
 80028e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028e8:	4b1b      	ldr	r3, [pc, #108]	; (8002958 <HAL_RCC_OscConfig+0x4ec>)
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	699b      	ldr	r3, [r3, #24]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d028      	beq.n	8002948 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002900:	429a      	cmp	r2, r3
 8002902:	d121      	bne.n	8002948 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800290e:	429a      	cmp	r2, r3
 8002910:	d11a      	bne.n	8002948 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002912:	68fa      	ldr	r2, [r7, #12]
 8002914:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002918:	4013      	ands	r3, r2
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800291e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002920:	4293      	cmp	r3, r2
 8002922:	d111      	bne.n	8002948 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800292e:	085b      	lsrs	r3, r3, #1
 8002930:	3b01      	subs	r3, #1
 8002932:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002934:	429a      	cmp	r2, r3
 8002936:	d107      	bne.n	8002948 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002942:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002944:	429a      	cmp	r2, r3
 8002946:	d001      	beq.n	800294c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e000      	b.n	800294e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3718      	adds	r7, #24
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	40023800 	.word	0x40023800

0800295c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d101      	bne.n	8002970 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e0cc      	b.n	8002b0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002970:	4b68      	ldr	r3, [pc, #416]	; (8002b14 <HAL_RCC_ClockConfig+0x1b8>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 030f 	and.w	r3, r3, #15
 8002978:	683a      	ldr	r2, [r7, #0]
 800297a:	429a      	cmp	r2, r3
 800297c:	d90c      	bls.n	8002998 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800297e:	4b65      	ldr	r3, [pc, #404]	; (8002b14 <HAL_RCC_ClockConfig+0x1b8>)
 8002980:	683a      	ldr	r2, [r7, #0]
 8002982:	b2d2      	uxtb	r2, r2
 8002984:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002986:	4b63      	ldr	r3, [pc, #396]	; (8002b14 <HAL_RCC_ClockConfig+0x1b8>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 030f 	and.w	r3, r3, #15
 800298e:	683a      	ldr	r2, [r7, #0]
 8002990:	429a      	cmp	r2, r3
 8002992:	d001      	beq.n	8002998 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e0b8      	b.n	8002b0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0302 	and.w	r3, r3, #2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d020      	beq.n	80029e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0304 	and.w	r3, r3, #4
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d005      	beq.n	80029bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029b0:	4b59      	ldr	r3, [pc, #356]	; (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	4a58      	ldr	r2, [pc, #352]	; (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 80029b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80029ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0308 	and.w	r3, r3, #8
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d005      	beq.n	80029d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029c8:	4b53      	ldr	r3, [pc, #332]	; (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	4a52      	ldr	r2, [pc, #328]	; (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 80029ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029d4:	4b50      	ldr	r3, [pc, #320]	; (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	494d      	ldr	r1, [pc, #308]	; (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d044      	beq.n	8002a7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d107      	bne.n	8002a0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029fa:	4b47      	ldr	r3, [pc, #284]	; (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d119      	bne.n	8002a3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e07f      	b.n	8002b0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d003      	beq.n	8002a1a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a16:	2b03      	cmp	r3, #3
 8002a18:	d107      	bne.n	8002a2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a1a:	4b3f      	ldr	r3, [pc, #252]	; (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d109      	bne.n	8002a3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e06f      	b.n	8002b0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a2a:	4b3b      	ldr	r3, [pc, #236]	; (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0302 	and.w	r3, r3, #2
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d101      	bne.n	8002a3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e067      	b.n	8002b0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a3a:	4b37      	ldr	r3, [pc, #220]	; (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f023 0203 	bic.w	r2, r3, #3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	4934      	ldr	r1, [pc, #208]	; (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a4c:	f7fe fb4e 	bl	80010ec <HAL_GetTick>
 8002a50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a52:	e00a      	b.n	8002a6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a54:	f7fe fb4a 	bl	80010ec <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d901      	bls.n	8002a6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e04f      	b.n	8002b0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a6a:	4b2b      	ldr	r3, [pc, #172]	; (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f003 020c 	and.w	r2, r3, #12
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d1eb      	bne.n	8002a54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a7c:	4b25      	ldr	r3, [pc, #148]	; (8002b14 <HAL_RCC_ClockConfig+0x1b8>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 030f 	and.w	r3, r3, #15
 8002a84:	683a      	ldr	r2, [r7, #0]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d20c      	bcs.n	8002aa4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a8a:	4b22      	ldr	r3, [pc, #136]	; (8002b14 <HAL_RCC_ClockConfig+0x1b8>)
 8002a8c:	683a      	ldr	r2, [r7, #0]
 8002a8e:	b2d2      	uxtb	r2, r2
 8002a90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a92:	4b20      	ldr	r3, [pc, #128]	; (8002b14 <HAL_RCC_ClockConfig+0x1b8>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 030f 	and.w	r3, r3, #15
 8002a9a:	683a      	ldr	r2, [r7, #0]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d001      	beq.n	8002aa4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e032      	b.n	8002b0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0304 	and.w	r3, r3, #4
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d008      	beq.n	8002ac2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ab0:	4b19      	ldr	r3, [pc, #100]	; (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	4916      	ldr	r1, [pc, #88]	; (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0308 	and.w	r3, r3, #8
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d009      	beq.n	8002ae2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ace:	4b12      	ldr	r3, [pc, #72]	; (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	00db      	lsls	r3, r3, #3
 8002adc:	490e      	ldr	r1, [pc, #56]	; (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ae2:	f000 f821 	bl	8002b28 <HAL_RCC_GetSysClockFreq>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	4b0b      	ldr	r3, [pc, #44]	; (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	091b      	lsrs	r3, r3, #4
 8002aee:	f003 030f 	and.w	r3, r3, #15
 8002af2:	490a      	ldr	r1, [pc, #40]	; (8002b1c <HAL_RCC_ClockConfig+0x1c0>)
 8002af4:	5ccb      	ldrb	r3, [r1, r3]
 8002af6:	fa22 f303 	lsr.w	r3, r2, r3
 8002afa:	4a09      	ldr	r2, [pc, #36]	; (8002b20 <HAL_RCC_ClockConfig+0x1c4>)
 8002afc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002afe:	4b09      	ldr	r3, [pc, #36]	; (8002b24 <HAL_RCC_ClockConfig+0x1c8>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7fe faae 	bl	8001064 <HAL_InitTick>

  return HAL_OK;
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3710      	adds	r7, #16
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	40023c00 	.word	0x40023c00
 8002b18:	40023800 	.word	0x40023800
 8002b1c:	080049e0 	.word	0x080049e0
 8002b20:	20000008 	.word	0x20000008
 8002b24:	2000000c 	.word	0x2000000c

08002b28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b2c:	b090      	sub	sp, #64	; 0x40
 8002b2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b30:	2300      	movs	r3, #0
 8002b32:	637b      	str	r3, [r7, #52]	; 0x34
 8002b34:	2300      	movs	r3, #0
 8002b36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b38:	2300      	movs	r3, #0
 8002b3a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b40:	4b59      	ldr	r3, [pc, #356]	; (8002ca8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f003 030c 	and.w	r3, r3, #12
 8002b48:	2b08      	cmp	r3, #8
 8002b4a:	d00d      	beq.n	8002b68 <HAL_RCC_GetSysClockFreq+0x40>
 8002b4c:	2b08      	cmp	r3, #8
 8002b4e:	f200 80a1 	bhi.w	8002c94 <HAL_RCC_GetSysClockFreq+0x16c>
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d002      	beq.n	8002b5c <HAL_RCC_GetSysClockFreq+0x34>
 8002b56:	2b04      	cmp	r3, #4
 8002b58:	d003      	beq.n	8002b62 <HAL_RCC_GetSysClockFreq+0x3a>
 8002b5a:	e09b      	b.n	8002c94 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b5c:	4b53      	ldr	r3, [pc, #332]	; (8002cac <HAL_RCC_GetSysClockFreq+0x184>)
 8002b5e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002b60:	e09b      	b.n	8002c9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b62:	4b53      	ldr	r3, [pc, #332]	; (8002cb0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b64:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002b66:	e098      	b.n	8002c9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b68:	4b4f      	ldr	r3, [pc, #316]	; (8002ca8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b70:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b72:	4b4d      	ldr	r3, [pc, #308]	; (8002ca8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d028      	beq.n	8002bd0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b7e:	4b4a      	ldr	r3, [pc, #296]	; (8002ca8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	099b      	lsrs	r3, r3, #6
 8002b84:	2200      	movs	r2, #0
 8002b86:	623b      	str	r3, [r7, #32]
 8002b88:	627a      	str	r2, [r7, #36]	; 0x24
 8002b8a:	6a3b      	ldr	r3, [r7, #32]
 8002b8c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002b90:	2100      	movs	r1, #0
 8002b92:	4b47      	ldr	r3, [pc, #284]	; (8002cb0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b94:	fb03 f201 	mul.w	r2, r3, r1
 8002b98:	2300      	movs	r3, #0
 8002b9a:	fb00 f303 	mul.w	r3, r0, r3
 8002b9e:	4413      	add	r3, r2
 8002ba0:	4a43      	ldr	r2, [pc, #268]	; (8002cb0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002ba2:	fba0 1202 	umull	r1, r2, r0, r2
 8002ba6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ba8:	460a      	mov	r2, r1
 8002baa:	62ba      	str	r2, [r7, #40]	; 0x28
 8002bac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bae:	4413      	add	r3, r2
 8002bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	61bb      	str	r3, [r7, #24]
 8002bb8:	61fa      	str	r2, [r7, #28]
 8002bba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bbe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002bc2:	f7fd fb65 	bl	8000290 <__aeabi_uldivmod>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	460b      	mov	r3, r1
 8002bca:	4613      	mov	r3, r2
 8002bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bce:	e053      	b.n	8002c78 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bd0:	4b35      	ldr	r3, [pc, #212]	; (8002ca8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	099b      	lsrs	r3, r3, #6
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	613b      	str	r3, [r7, #16]
 8002bda:	617a      	str	r2, [r7, #20]
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002be2:	f04f 0b00 	mov.w	fp, #0
 8002be6:	4652      	mov	r2, sl
 8002be8:	465b      	mov	r3, fp
 8002bea:	f04f 0000 	mov.w	r0, #0
 8002bee:	f04f 0100 	mov.w	r1, #0
 8002bf2:	0159      	lsls	r1, r3, #5
 8002bf4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bf8:	0150      	lsls	r0, r2, #5
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	ebb2 080a 	subs.w	r8, r2, sl
 8002c02:	eb63 090b 	sbc.w	r9, r3, fp
 8002c06:	f04f 0200 	mov.w	r2, #0
 8002c0a:	f04f 0300 	mov.w	r3, #0
 8002c0e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002c12:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002c16:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002c1a:	ebb2 0408 	subs.w	r4, r2, r8
 8002c1e:	eb63 0509 	sbc.w	r5, r3, r9
 8002c22:	f04f 0200 	mov.w	r2, #0
 8002c26:	f04f 0300 	mov.w	r3, #0
 8002c2a:	00eb      	lsls	r3, r5, #3
 8002c2c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c30:	00e2      	lsls	r2, r4, #3
 8002c32:	4614      	mov	r4, r2
 8002c34:	461d      	mov	r5, r3
 8002c36:	eb14 030a 	adds.w	r3, r4, sl
 8002c3a:	603b      	str	r3, [r7, #0]
 8002c3c:	eb45 030b 	adc.w	r3, r5, fp
 8002c40:	607b      	str	r3, [r7, #4]
 8002c42:	f04f 0200 	mov.w	r2, #0
 8002c46:	f04f 0300 	mov.w	r3, #0
 8002c4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c4e:	4629      	mov	r1, r5
 8002c50:	028b      	lsls	r3, r1, #10
 8002c52:	4621      	mov	r1, r4
 8002c54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c58:	4621      	mov	r1, r4
 8002c5a:	028a      	lsls	r2, r1, #10
 8002c5c:	4610      	mov	r0, r2
 8002c5e:	4619      	mov	r1, r3
 8002c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c62:	2200      	movs	r2, #0
 8002c64:	60bb      	str	r3, [r7, #8]
 8002c66:	60fa      	str	r2, [r7, #12]
 8002c68:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c6c:	f7fd fb10 	bl	8000290 <__aeabi_uldivmod>
 8002c70:	4602      	mov	r2, r0
 8002c72:	460b      	mov	r3, r1
 8002c74:	4613      	mov	r3, r2
 8002c76:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c78:	4b0b      	ldr	r3, [pc, #44]	; (8002ca8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	0c1b      	lsrs	r3, r3, #16
 8002c7e:	f003 0303 	and.w	r3, r3, #3
 8002c82:	3301      	adds	r3, #1
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002c88:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c90:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c92:	e002      	b.n	8002c9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c94:	4b05      	ldr	r3, [pc, #20]	; (8002cac <HAL_RCC_GetSysClockFreq+0x184>)
 8002c96:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3740      	adds	r7, #64	; 0x40
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ca6:	bf00      	nop
 8002ca8:	40023800 	.word	0x40023800
 8002cac:	00f42400 	.word	0x00f42400
 8002cb0:	017d7840 	.word	0x017d7840

08002cb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cb8:	4b03      	ldr	r3, [pc, #12]	; (8002cc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002cba:	681b      	ldr	r3, [r3, #0]
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	20000008 	.word	0x20000008

08002ccc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002cd0:	f7ff fff0 	bl	8002cb4 <HAL_RCC_GetHCLKFreq>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	4b05      	ldr	r3, [pc, #20]	; (8002cec <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	0a9b      	lsrs	r3, r3, #10
 8002cdc:	f003 0307 	and.w	r3, r3, #7
 8002ce0:	4903      	ldr	r1, [pc, #12]	; (8002cf0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ce2:	5ccb      	ldrb	r3, [r1, r3]
 8002ce4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	40023800 	.word	0x40023800
 8002cf0:	080049f0 	.word	0x080049f0

08002cf4 <sniprintf>:
 8002cf4:	b40c      	push	{r2, r3}
 8002cf6:	b530      	push	{r4, r5, lr}
 8002cf8:	4b17      	ldr	r3, [pc, #92]	; (8002d58 <sniprintf+0x64>)
 8002cfa:	1e0c      	subs	r4, r1, #0
 8002cfc:	681d      	ldr	r5, [r3, #0]
 8002cfe:	b09d      	sub	sp, #116	; 0x74
 8002d00:	da08      	bge.n	8002d14 <sniprintf+0x20>
 8002d02:	238b      	movs	r3, #139	; 0x8b
 8002d04:	602b      	str	r3, [r5, #0]
 8002d06:	f04f 30ff 	mov.w	r0, #4294967295
 8002d0a:	b01d      	add	sp, #116	; 0x74
 8002d0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002d10:	b002      	add	sp, #8
 8002d12:	4770      	bx	lr
 8002d14:	f44f 7302 	mov.w	r3, #520	; 0x208
 8002d18:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002d1c:	bf14      	ite	ne
 8002d1e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8002d22:	4623      	moveq	r3, r4
 8002d24:	9304      	str	r3, [sp, #16]
 8002d26:	9307      	str	r3, [sp, #28]
 8002d28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d2c:	9002      	str	r0, [sp, #8]
 8002d2e:	9006      	str	r0, [sp, #24]
 8002d30:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002d34:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002d36:	ab21      	add	r3, sp, #132	; 0x84
 8002d38:	a902      	add	r1, sp, #8
 8002d3a:	4628      	mov	r0, r5
 8002d3c:	9301      	str	r3, [sp, #4]
 8002d3e:	f000 f993 	bl	8003068 <_svfiprintf_r>
 8002d42:	1c43      	adds	r3, r0, #1
 8002d44:	bfbc      	itt	lt
 8002d46:	238b      	movlt	r3, #139	; 0x8b
 8002d48:	602b      	strlt	r3, [r5, #0]
 8002d4a:	2c00      	cmp	r4, #0
 8002d4c:	d0dd      	beq.n	8002d0a <sniprintf+0x16>
 8002d4e:	9b02      	ldr	r3, [sp, #8]
 8002d50:	2200      	movs	r2, #0
 8002d52:	701a      	strb	r2, [r3, #0]
 8002d54:	e7d9      	b.n	8002d0a <sniprintf+0x16>
 8002d56:	bf00      	nop
 8002d58:	20000060 	.word	0x20000060

08002d5c <memset>:
 8002d5c:	4402      	add	r2, r0
 8002d5e:	4603      	mov	r3, r0
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d100      	bne.n	8002d66 <memset+0xa>
 8002d64:	4770      	bx	lr
 8002d66:	f803 1b01 	strb.w	r1, [r3], #1
 8002d6a:	e7f9      	b.n	8002d60 <memset+0x4>

08002d6c <__errno>:
 8002d6c:	4b01      	ldr	r3, [pc, #4]	; (8002d74 <__errno+0x8>)
 8002d6e:	6818      	ldr	r0, [r3, #0]
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	20000060 	.word	0x20000060

08002d78 <__libc_init_array>:
 8002d78:	b570      	push	{r4, r5, r6, lr}
 8002d7a:	4d0d      	ldr	r5, [pc, #52]	; (8002db0 <__libc_init_array+0x38>)
 8002d7c:	4c0d      	ldr	r4, [pc, #52]	; (8002db4 <__libc_init_array+0x3c>)
 8002d7e:	1b64      	subs	r4, r4, r5
 8002d80:	10a4      	asrs	r4, r4, #2
 8002d82:	2600      	movs	r6, #0
 8002d84:	42a6      	cmp	r6, r4
 8002d86:	d109      	bne.n	8002d9c <__libc_init_array+0x24>
 8002d88:	4d0b      	ldr	r5, [pc, #44]	; (8002db8 <__libc_init_array+0x40>)
 8002d8a:	4c0c      	ldr	r4, [pc, #48]	; (8002dbc <__libc_init_array+0x44>)
 8002d8c:	f000 fc6a 	bl	8003664 <_init>
 8002d90:	1b64      	subs	r4, r4, r5
 8002d92:	10a4      	asrs	r4, r4, #2
 8002d94:	2600      	movs	r6, #0
 8002d96:	42a6      	cmp	r6, r4
 8002d98:	d105      	bne.n	8002da6 <__libc_init_array+0x2e>
 8002d9a:	bd70      	pop	{r4, r5, r6, pc}
 8002d9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002da0:	4798      	blx	r3
 8002da2:	3601      	adds	r6, #1
 8002da4:	e7ee      	b.n	8002d84 <__libc_init_array+0xc>
 8002da6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002daa:	4798      	blx	r3
 8002dac:	3601      	adds	r6, #1
 8002dae:	e7f2      	b.n	8002d96 <__libc_init_array+0x1e>
 8002db0:	08004a34 	.word	0x08004a34
 8002db4:	08004a34 	.word	0x08004a34
 8002db8:	08004a34 	.word	0x08004a34
 8002dbc:	08004a38 	.word	0x08004a38

08002dc0 <__retarget_lock_acquire_recursive>:
 8002dc0:	4770      	bx	lr

08002dc2 <__retarget_lock_release_recursive>:
 8002dc2:	4770      	bx	lr

08002dc4 <_free_r>:
 8002dc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002dc6:	2900      	cmp	r1, #0
 8002dc8:	d044      	beq.n	8002e54 <_free_r+0x90>
 8002dca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002dce:	9001      	str	r0, [sp, #4]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	f1a1 0404 	sub.w	r4, r1, #4
 8002dd6:	bfb8      	it	lt
 8002dd8:	18e4      	addlt	r4, r4, r3
 8002dda:	f000 f8df 	bl	8002f9c <__malloc_lock>
 8002dde:	4a1e      	ldr	r2, [pc, #120]	; (8002e58 <_free_r+0x94>)
 8002de0:	9801      	ldr	r0, [sp, #4]
 8002de2:	6813      	ldr	r3, [r2, #0]
 8002de4:	b933      	cbnz	r3, 8002df4 <_free_r+0x30>
 8002de6:	6063      	str	r3, [r4, #4]
 8002de8:	6014      	str	r4, [r2, #0]
 8002dea:	b003      	add	sp, #12
 8002dec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002df0:	f000 b8da 	b.w	8002fa8 <__malloc_unlock>
 8002df4:	42a3      	cmp	r3, r4
 8002df6:	d908      	bls.n	8002e0a <_free_r+0x46>
 8002df8:	6825      	ldr	r5, [r4, #0]
 8002dfa:	1961      	adds	r1, r4, r5
 8002dfc:	428b      	cmp	r3, r1
 8002dfe:	bf01      	itttt	eq
 8002e00:	6819      	ldreq	r1, [r3, #0]
 8002e02:	685b      	ldreq	r3, [r3, #4]
 8002e04:	1949      	addeq	r1, r1, r5
 8002e06:	6021      	streq	r1, [r4, #0]
 8002e08:	e7ed      	b.n	8002de6 <_free_r+0x22>
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	b10b      	cbz	r3, 8002e14 <_free_r+0x50>
 8002e10:	42a3      	cmp	r3, r4
 8002e12:	d9fa      	bls.n	8002e0a <_free_r+0x46>
 8002e14:	6811      	ldr	r1, [r2, #0]
 8002e16:	1855      	adds	r5, r2, r1
 8002e18:	42a5      	cmp	r5, r4
 8002e1a:	d10b      	bne.n	8002e34 <_free_r+0x70>
 8002e1c:	6824      	ldr	r4, [r4, #0]
 8002e1e:	4421      	add	r1, r4
 8002e20:	1854      	adds	r4, r2, r1
 8002e22:	42a3      	cmp	r3, r4
 8002e24:	6011      	str	r1, [r2, #0]
 8002e26:	d1e0      	bne.n	8002dea <_free_r+0x26>
 8002e28:	681c      	ldr	r4, [r3, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	6053      	str	r3, [r2, #4]
 8002e2e:	440c      	add	r4, r1
 8002e30:	6014      	str	r4, [r2, #0]
 8002e32:	e7da      	b.n	8002dea <_free_r+0x26>
 8002e34:	d902      	bls.n	8002e3c <_free_r+0x78>
 8002e36:	230c      	movs	r3, #12
 8002e38:	6003      	str	r3, [r0, #0]
 8002e3a:	e7d6      	b.n	8002dea <_free_r+0x26>
 8002e3c:	6825      	ldr	r5, [r4, #0]
 8002e3e:	1961      	adds	r1, r4, r5
 8002e40:	428b      	cmp	r3, r1
 8002e42:	bf04      	itt	eq
 8002e44:	6819      	ldreq	r1, [r3, #0]
 8002e46:	685b      	ldreq	r3, [r3, #4]
 8002e48:	6063      	str	r3, [r4, #4]
 8002e4a:	bf04      	itt	eq
 8002e4c:	1949      	addeq	r1, r1, r5
 8002e4e:	6021      	streq	r1, [r4, #0]
 8002e50:	6054      	str	r4, [r2, #4]
 8002e52:	e7ca      	b.n	8002dea <_free_r+0x26>
 8002e54:	b003      	add	sp, #12
 8002e56:	bd30      	pop	{r4, r5, pc}
 8002e58:	20000628 	.word	0x20000628

08002e5c <sbrk_aligned>:
 8002e5c:	b570      	push	{r4, r5, r6, lr}
 8002e5e:	4e0e      	ldr	r6, [pc, #56]	; (8002e98 <sbrk_aligned+0x3c>)
 8002e60:	460c      	mov	r4, r1
 8002e62:	6831      	ldr	r1, [r6, #0]
 8002e64:	4605      	mov	r5, r0
 8002e66:	b911      	cbnz	r1, 8002e6e <sbrk_aligned+0x12>
 8002e68:	f000 fba6 	bl	80035b8 <_sbrk_r>
 8002e6c:	6030      	str	r0, [r6, #0]
 8002e6e:	4621      	mov	r1, r4
 8002e70:	4628      	mov	r0, r5
 8002e72:	f000 fba1 	bl	80035b8 <_sbrk_r>
 8002e76:	1c43      	adds	r3, r0, #1
 8002e78:	d00a      	beq.n	8002e90 <sbrk_aligned+0x34>
 8002e7a:	1cc4      	adds	r4, r0, #3
 8002e7c:	f024 0403 	bic.w	r4, r4, #3
 8002e80:	42a0      	cmp	r0, r4
 8002e82:	d007      	beq.n	8002e94 <sbrk_aligned+0x38>
 8002e84:	1a21      	subs	r1, r4, r0
 8002e86:	4628      	mov	r0, r5
 8002e88:	f000 fb96 	bl	80035b8 <_sbrk_r>
 8002e8c:	3001      	adds	r0, #1
 8002e8e:	d101      	bne.n	8002e94 <sbrk_aligned+0x38>
 8002e90:	f04f 34ff 	mov.w	r4, #4294967295
 8002e94:	4620      	mov	r0, r4
 8002e96:	bd70      	pop	{r4, r5, r6, pc}
 8002e98:	2000062c 	.word	0x2000062c

08002e9c <_malloc_r>:
 8002e9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002ea0:	1ccd      	adds	r5, r1, #3
 8002ea2:	f025 0503 	bic.w	r5, r5, #3
 8002ea6:	3508      	adds	r5, #8
 8002ea8:	2d0c      	cmp	r5, #12
 8002eaa:	bf38      	it	cc
 8002eac:	250c      	movcc	r5, #12
 8002eae:	2d00      	cmp	r5, #0
 8002eb0:	4607      	mov	r7, r0
 8002eb2:	db01      	blt.n	8002eb8 <_malloc_r+0x1c>
 8002eb4:	42a9      	cmp	r1, r5
 8002eb6:	d905      	bls.n	8002ec4 <_malloc_r+0x28>
 8002eb8:	230c      	movs	r3, #12
 8002eba:	603b      	str	r3, [r7, #0]
 8002ebc:	2600      	movs	r6, #0
 8002ebe:	4630      	mov	r0, r6
 8002ec0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002ec4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002f98 <_malloc_r+0xfc>
 8002ec8:	f000 f868 	bl	8002f9c <__malloc_lock>
 8002ecc:	f8d8 3000 	ldr.w	r3, [r8]
 8002ed0:	461c      	mov	r4, r3
 8002ed2:	bb5c      	cbnz	r4, 8002f2c <_malloc_r+0x90>
 8002ed4:	4629      	mov	r1, r5
 8002ed6:	4638      	mov	r0, r7
 8002ed8:	f7ff ffc0 	bl	8002e5c <sbrk_aligned>
 8002edc:	1c43      	adds	r3, r0, #1
 8002ede:	4604      	mov	r4, r0
 8002ee0:	d155      	bne.n	8002f8e <_malloc_r+0xf2>
 8002ee2:	f8d8 4000 	ldr.w	r4, [r8]
 8002ee6:	4626      	mov	r6, r4
 8002ee8:	2e00      	cmp	r6, #0
 8002eea:	d145      	bne.n	8002f78 <_malloc_r+0xdc>
 8002eec:	2c00      	cmp	r4, #0
 8002eee:	d048      	beq.n	8002f82 <_malloc_r+0xe6>
 8002ef0:	6823      	ldr	r3, [r4, #0]
 8002ef2:	4631      	mov	r1, r6
 8002ef4:	4638      	mov	r0, r7
 8002ef6:	eb04 0903 	add.w	r9, r4, r3
 8002efa:	f000 fb5d 	bl	80035b8 <_sbrk_r>
 8002efe:	4581      	cmp	r9, r0
 8002f00:	d13f      	bne.n	8002f82 <_malloc_r+0xe6>
 8002f02:	6821      	ldr	r1, [r4, #0]
 8002f04:	1a6d      	subs	r5, r5, r1
 8002f06:	4629      	mov	r1, r5
 8002f08:	4638      	mov	r0, r7
 8002f0a:	f7ff ffa7 	bl	8002e5c <sbrk_aligned>
 8002f0e:	3001      	adds	r0, #1
 8002f10:	d037      	beq.n	8002f82 <_malloc_r+0xe6>
 8002f12:	6823      	ldr	r3, [r4, #0]
 8002f14:	442b      	add	r3, r5
 8002f16:	6023      	str	r3, [r4, #0]
 8002f18:	f8d8 3000 	ldr.w	r3, [r8]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d038      	beq.n	8002f92 <_malloc_r+0xf6>
 8002f20:	685a      	ldr	r2, [r3, #4]
 8002f22:	42a2      	cmp	r2, r4
 8002f24:	d12b      	bne.n	8002f7e <_malloc_r+0xe2>
 8002f26:	2200      	movs	r2, #0
 8002f28:	605a      	str	r2, [r3, #4]
 8002f2a:	e00f      	b.n	8002f4c <_malloc_r+0xb0>
 8002f2c:	6822      	ldr	r2, [r4, #0]
 8002f2e:	1b52      	subs	r2, r2, r5
 8002f30:	d41f      	bmi.n	8002f72 <_malloc_r+0xd6>
 8002f32:	2a0b      	cmp	r2, #11
 8002f34:	d917      	bls.n	8002f66 <_malloc_r+0xca>
 8002f36:	1961      	adds	r1, r4, r5
 8002f38:	42a3      	cmp	r3, r4
 8002f3a:	6025      	str	r5, [r4, #0]
 8002f3c:	bf18      	it	ne
 8002f3e:	6059      	strne	r1, [r3, #4]
 8002f40:	6863      	ldr	r3, [r4, #4]
 8002f42:	bf08      	it	eq
 8002f44:	f8c8 1000 	streq.w	r1, [r8]
 8002f48:	5162      	str	r2, [r4, r5]
 8002f4a:	604b      	str	r3, [r1, #4]
 8002f4c:	4638      	mov	r0, r7
 8002f4e:	f104 060b 	add.w	r6, r4, #11
 8002f52:	f000 f829 	bl	8002fa8 <__malloc_unlock>
 8002f56:	f026 0607 	bic.w	r6, r6, #7
 8002f5a:	1d23      	adds	r3, r4, #4
 8002f5c:	1af2      	subs	r2, r6, r3
 8002f5e:	d0ae      	beq.n	8002ebe <_malloc_r+0x22>
 8002f60:	1b9b      	subs	r3, r3, r6
 8002f62:	50a3      	str	r3, [r4, r2]
 8002f64:	e7ab      	b.n	8002ebe <_malloc_r+0x22>
 8002f66:	42a3      	cmp	r3, r4
 8002f68:	6862      	ldr	r2, [r4, #4]
 8002f6a:	d1dd      	bne.n	8002f28 <_malloc_r+0x8c>
 8002f6c:	f8c8 2000 	str.w	r2, [r8]
 8002f70:	e7ec      	b.n	8002f4c <_malloc_r+0xb0>
 8002f72:	4623      	mov	r3, r4
 8002f74:	6864      	ldr	r4, [r4, #4]
 8002f76:	e7ac      	b.n	8002ed2 <_malloc_r+0x36>
 8002f78:	4634      	mov	r4, r6
 8002f7a:	6876      	ldr	r6, [r6, #4]
 8002f7c:	e7b4      	b.n	8002ee8 <_malloc_r+0x4c>
 8002f7e:	4613      	mov	r3, r2
 8002f80:	e7cc      	b.n	8002f1c <_malloc_r+0x80>
 8002f82:	230c      	movs	r3, #12
 8002f84:	603b      	str	r3, [r7, #0]
 8002f86:	4638      	mov	r0, r7
 8002f88:	f000 f80e 	bl	8002fa8 <__malloc_unlock>
 8002f8c:	e797      	b.n	8002ebe <_malloc_r+0x22>
 8002f8e:	6025      	str	r5, [r4, #0]
 8002f90:	e7dc      	b.n	8002f4c <_malloc_r+0xb0>
 8002f92:	605b      	str	r3, [r3, #4]
 8002f94:	deff      	udf	#255	; 0xff
 8002f96:	bf00      	nop
 8002f98:	20000628 	.word	0x20000628

08002f9c <__malloc_lock>:
 8002f9c:	4801      	ldr	r0, [pc, #4]	; (8002fa4 <__malloc_lock+0x8>)
 8002f9e:	f7ff bf0f 	b.w	8002dc0 <__retarget_lock_acquire_recursive>
 8002fa2:	bf00      	nop
 8002fa4:	20000624 	.word	0x20000624

08002fa8 <__malloc_unlock>:
 8002fa8:	4801      	ldr	r0, [pc, #4]	; (8002fb0 <__malloc_unlock+0x8>)
 8002faa:	f7ff bf0a 	b.w	8002dc2 <__retarget_lock_release_recursive>
 8002fae:	bf00      	nop
 8002fb0:	20000624 	.word	0x20000624

08002fb4 <__ssputs_r>:
 8002fb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002fb8:	688e      	ldr	r6, [r1, #8]
 8002fba:	461f      	mov	r7, r3
 8002fbc:	42be      	cmp	r6, r7
 8002fbe:	680b      	ldr	r3, [r1, #0]
 8002fc0:	4682      	mov	sl, r0
 8002fc2:	460c      	mov	r4, r1
 8002fc4:	4690      	mov	r8, r2
 8002fc6:	d82c      	bhi.n	8003022 <__ssputs_r+0x6e>
 8002fc8:	898a      	ldrh	r2, [r1, #12]
 8002fca:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002fce:	d026      	beq.n	800301e <__ssputs_r+0x6a>
 8002fd0:	6965      	ldr	r5, [r4, #20]
 8002fd2:	6909      	ldr	r1, [r1, #16]
 8002fd4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002fd8:	eba3 0901 	sub.w	r9, r3, r1
 8002fdc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002fe0:	1c7b      	adds	r3, r7, #1
 8002fe2:	444b      	add	r3, r9
 8002fe4:	106d      	asrs	r5, r5, #1
 8002fe6:	429d      	cmp	r5, r3
 8002fe8:	bf38      	it	cc
 8002fea:	461d      	movcc	r5, r3
 8002fec:	0553      	lsls	r3, r2, #21
 8002fee:	d527      	bpl.n	8003040 <__ssputs_r+0x8c>
 8002ff0:	4629      	mov	r1, r5
 8002ff2:	f7ff ff53 	bl	8002e9c <_malloc_r>
 8002ff6:	4606      	mov	r6, r0
 8002ff8:	b360      	cbz	r0, 8003054 <__ssputs_r+0xa0>
 8002ffa:	6921      	ldr	r1, [r4, #16]
 8002ffc:	464a      	mov	r2, r9
 8002ffe:	f000 faeb 	bl	80035d8 <memcpy>
 8003002:	89a3      	ldrh	r3, [r4, #12]
 8003004:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003008:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800300c:	81a3      	strh	r3, [r4, #12]
 800300e:	6126      	str	r6, [r4, #16]
 8003010:	6165      	str	r5, [r4, #20]
 8003012:	444e      	add	r6, r9
 8003014:	eba5 0509 	sub.w	r5, r5, r9
 8003018:	6026      	str	r6, [r4, #0]
 800301a:	60a5      	str	r5, [r4, #8]
 800301c:	463e      	mov	r6, r7
 800301e:	42be      	cmp	r6, r7
 8003020:	d900      	bls.n	8003024 <__ssputs_r+0x70>
 8003022:	463e      	mov	r6, r7
 8003024:	6820      	ldr	r0, [r4, #0]
 8003026:	4632      	mov	r2, r6
 8003028:	4641      	mov	r1, r8
 800302a:	f000 faab 	bl	8003584 <memmove>
 800302e:	68a3      	ldr	r3, [r4, #8]
 8003030:	1b9b      	subs	r3, r3, r6
 8003032:	60a3      	str	r3, [r4, #8]
 8003034:	6823      	ldr	r3, [r4, #0]
 8003036:	4433      	add	r3, r6
 8003038:	6023      	str	r3, [r4, #0]
 800303a:	2000      	movs	r0, #0
 800303c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003040:	462a      	mov	r2, r5
 8003042:	f000 fad7 	bl	80035f4 <_realloc_r>
 8003046:	4606      	mov	r6, r0
 8003048:	2800      	cmp	r0, #0
 800304a:	d1e0      	bne.n	800300e <__ssputs_r+0x5a>
 800304c:	6921      	ldr	r1, [r4, #16]
 800304e:	4650      	mov	r0, sl
 8003050:	f7ff feb8 	bl	8002dc4 <_free_r>
 8003054:	230c      	movs	r3, #12
 8003056:	f8ca 3000 	str.w	r3, [sl]
 800305a:	89a3      	ldrh	r3, [r4, #12]
 800305c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003060:	81a3      	strh	r3, [r4, #12]
 8003062:	f04f 30ff 	mov.w	r0, #4294967295
 8003066:	e7e9      	b.n	800303c <__ssputs_r+0x88>

08003068 <_svfiprintf_r>:
 8003068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800306c:	4698      	mov	r8, r3
 800306e:	898b      	ldrh	r3, [r1, #12]
 8003070:	061b      	lsls	r3, r3, #24
 8003072:	b09d      	sub	sp, #116	; 0x74
 8003074:	4607      	mov	r7, r0
 8003076:	460d      	mov	r5, r1
 8003078:	4614      	mov	r4, r2
 800307a:	d50e      	bpl.n	800309a <_svfiprintf_r+0x32>
 800307c:	690b      	ldr	r3, [r1, #16]
 800307e:	b963      	cbnz	r3, 800309a <_svfiprintf_r+0x32>
 8003080:	2140      	movs	r1, #64	; 0x40
 8003082:	f7ff ff0b 	bl	8002e9c <_malloc_r>
 8003086:	6028      	str	r0, [r5, #0]
 8003088:	6128      	str	r0, [r5, #16]
 800308a:	b920      	cbnz	r0, 8003096 <_svfiprintf_r+0x2e>
 800308c:	230c      	movs	r3, #12
 800308e:	603b      	str	r3, [r7, #0]
 8003090:	f04f 30ff 	mov.w	r0, #4294967295
 8003094:	e0d0      	b.n	8003238 <_svfiprintf_r+0x1d0>
 8003096:	2340      	movs	r3, #64	; 0x40
 8003098:	616b      	str	r3, [r5, #20]
 800309a:	2300      	movs	r3, #0
 800309c:	9309      	str	r3, [sp, #36]	; 0x24
 800309e:	2320      	movs	r3, #32
 80030a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80030a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80030a8:	2330      	movs	r3, #48	; 0x30
 80030aa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003250 <_svfiprintf_r+0x1e8>
 80030ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80030b2:	f04f 0901 	mov.w	r9, #1
 80030b6:	4623      	mov	r3, r4
 80030b8:	469a      	mov	sl, r3
 80030ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80030be:	b10a      	cbz	r2, 80030c4 <_svfiprintf_r+0x5c>
 80030c0:	2a25      	cmp	r2, #37	; 0x25
 80030c2:	d1f9      	bne.n	80030b8 <_svfiprintf_r+0x50>
 80030c4:	ebba 0b04 	subs.w	fp, sl, r4
 80030c8:	d00b      	beq.n	80030e2 <_svfiprintf_r+0x7a>
 80030ca:	465b      	mov	r3, fp
 80030cc:	4622      	mov	r2, r4
 80030ce:	4629      	mov	r1, r5
 80030d0:	4638      	mov	r0, r7
 80030d2:	f7ff ff6f 	bl	8002fb4 <__ssputs_r>
 80030d6:	3001      	adds	r0, #1
 80030d8:	f000 80a9 	beq.w	800322e <_svfiprintf_r+0x1c6>
 80030dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80030de:	445a      	add	r2, fp
 80030e0:	9209      	str	r2, [sp, #36]	; 0x24
 80030e2:	f89a 3000 	ldrb.w	r3, [sl]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	f000 80a1 	beq.w	800322e <_svfiprintf_r+0x1c6>
 80030ec:	2300      	movs	r3, #0
 80030ee:	f04f 32ff 	mov.w	r2, #4294967295
 80030f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80030f6:	f10a 0a01 	add.w	sl, sl, #1
 80030fa:	9304      	str	r3, [sp, #16]
 80030fc:	9307      	str	r3, [sp, #28]
 80030fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003102:	931a      	str	r3, [sp, #104]	; 0x68
 8003104:	4654      	mov	r4, sl
 8003106:	2205      	movs	r2, #5
 8003108:	f814 1b01 	ldrb.w	r1, [r4], #1
 800310c:	4850      	ldr	r0, [pc, #320]	; (8003250 <_svfiprintf_r+0x1e8>)
 800310e:	f7fd f86f 	bl	80001f0 <memchr>
 8003112:	9a04      	ldr	r2, [sp, #16]
 8003114:	b9d8      	cbnz	r0, 800314e <_svfiprintf_r+0xe6>
 8003116:	06d0      	lsls	r0, r2, #27
 8003118:	bf44      	itt	mi
 800311a:	2320      	movmi	r3, #32
 800311c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003120:	0711      	lsls	r1, r2, #28
 8003122:	bf44      	itt	mi
 8003124:	232b      	movmi	r3, #43	; 0x2b
 8003126:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800312a:	f89a 3000 	ldrb.w	r3, [sl]
 800312e:	2b2a      	cmp	r3, #42	; 0x2a
 8003130:	d015      	beq.n	800315e <_svfiprintf_r+0xf6>
 8003132:	9a07      	ldr	r2, [sp, #28]
 8003134:	4654      	mov	r4, sl
 8003136:	2000      	movs	r0, #0
 8003138:	f04f 0c0a 	mov.w	ip, #10
 800313c:	4621      	mov	r1, r4
 800313e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003142:	3b30      	subs	r3, #48	; 0x30
 8003144:	2b09      	cmp	r3, #9
 8003146:	d94d      	bls.n	80031e4 <_svfiprintf_r+0x17c>
 8003148:	b1b0      	cbz	r0, 8003178 <_svfiprintf_r+0x110>
 800314a:	9207      	str	r2, [sp, #28]
 800314c:	e014      	b.n	8003178 <_svfiprintf_r+0x110>
 800314e:	eba0 0308 	sub.w	r3, r0, r8
 8003152:	fa09 f303 	lsl.w	r3, r9, r3
 8003156:	4313      	orrs	r3, r2
 8003158:	9304      	str	r3, [sp, #16]
 800315a:	46a2      	mov	sl, r4
 800315c:	e7d2      	b.n	8003104 <_svfiprintf_r+0x9c>
 800315e:	9b03      	ldr	r3, [sp, #12]
 8003160:	1d19      	adds	r1, r3, #4
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	9103      	str	r1, [sp, #12]
 8003166:	2b00      	cmp	r3, #0
 8003168:	bfbb      	ittet	lt
 800316a:	425b      	neglt	r3, r3
 800316c:	f042 0202 	orrlt.w	r2, r2, #2
 8003170:	9307      	strge	r3, [sp, #28]
 8003172:	9307      	strlt	r3, [sp, #28]
 8003174:	bfb8      	it	lt
 8003176:	9204      	strlt	r2, [sp, #16]
 8003178:	7823      	ldrb	r3, [r4, #0]
 800317a:	2b2e      	cmp	r3, #46	; 0x2e
 800317c:	d10c      	bne.n	8003198 <_svfiprintf_r+0x130>
 800317e:	7863      	ldrb	r3, [r4, #1]
 8003180:	2b2a      	cmp	r3, #42	; 0x2a
 8003182:	d134      	bne.n	80031ee <_svfiprintf_r+0x186>
 8003184:	9b03      	ldr	r3, [sp, #12]
 8003186:	1d1a      	adds	r2, r3, #4
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	9203      	str	r2, [sp, #12]
 800318c:	2b00      	cmp	r3, #0
 800318e:	bfb8      	it	lt
 8003190:	f04f 33ff 	movlt.w	r3, #4294967295
 8003194:	3402      	adds	r4, #2
 8003196:	9305      	str	r3, [sp, #20]
 8003198:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003260 <_svfiprintf_r+0x1f8>
 800319c:	7821      	ldrb	r1, [r4, #0]
 800319e:	2203      	movs	r2, #3
 80031a0:	4650      	mov	r0, sl
 80031a2:	f7fd f825 	bl	80001f0 <memchr>
 80031a6:	b138      	cbz	r0, 80031b8 <_svfiprintf_r+0x150>
 80031a8:	9b04      	ldr	r3, [sp, #16]
 80031aa:	eba0 000a 	sub.w	r0, r0, sl
 80031ae:	2240      	movs	r2, #64	; 0x40
 80031b0:	4082      	lsls	r2, r0
 80031b2:	4313      	orrs	r3, r2
 80031b4:	3401      	adds	r4, #1
 80031b6:	9304      	str	r3, [sp, #16]
 80031b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031bc:	4825      	ldr	r0, [pc, #148]	; (8003254 <_svfiprintf_r+0x1ec>)
 80031be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80031c2:	2206      	movs	r2, #6
 80031c4:	f7fd f814 	bl	80001f0 <memchr>
 80031c8:	2800      	cmp	r0, #0
 80031ca:	d038      	beq.n	800323e <_svfiprintf_r+0x1d6>
 80031cc:	4b22      	ldr	r3, [pc, #136]	; (8003258 <_svfiprintf_r+0x1f0>)
 80031ce:	bb1b      	cbnz	r3, 8003218 <_svfiprintf_r+0x1b0>
 80031d0:	9b03      	ldr	r3, [sp, #12]
 80031d2:	3307      	adds	r3, #7
 80031d4:	f023 0307 	bic.w	r3, r3, #7
 80031d8:	3308      	adds	r3, #8
 80031da:	9303      	str	r3, [sp, #12]
 80031dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80031de:	4433      	add	r3, r6
 80031e0:	9309      	str	r3, [sp, #36]	; 0x24
 80031e2:	e768      	b.n	80030b6 <_svfiprintf_r+0x4e>
 80031e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80031e8:	460c      	mov	r4, r1
 80031ea:	2001      	movs	r0, #1
 80031ec:	e7a6      	b.n	800313c <_svfiprintf_r+0xd4>
 80031ee:	2300      	movs	r3, #0
 80031f0:	3401      	adds	r4, #1
 80031f2:	9305      	str	r3, [sp, #20]
 80031f4:	4619      	mov	r1, r3
 80031f6:	f04f 0c0a 	mov.w	ip, #10
 80031fa:	4620      	mov	r0, r4
 80031fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003200:	3a30      	subs	r2, #48	; 0x30
 8003202:	2a09      	cmp	r2, #9
 8003204:	d903      	bls.n	800320e <_svfiprintf_r+0x1a6>
 8003206:	2b00      	cmp	r3, #0
 8003208:	d0c6      	beq.n	8003198 <_svfiprintf_r+0x130>
 800320a:	9105      	str	r1, [sp, #20]
 800320c:	e7c4      	b.n	8003198 <_svfiprintf_r+0x130>
 800320e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003212:	4604      	mov	r4, r0
 8003214:	2301      	movs	r3, #1
 8003216:	e7f0      	b.n	80031fa <_svfiprintf_r+0x192>
 8003218:	ab03      	add	r3, sp, #12
 800321a:	9300      	str	r3, [sp, #0]
 800321c:	462a      	mov	r2, r5
 800321e:	4b0f      	ldr	r3, [pc, #60]	; (800325c <_svfiprintf_r+0x1f4>)
 8003220:	a904      	add	r1, sp, #16
 8003222:	4638      	mov	r0, r7
 8003224:	f3af 8000 	nop.w
 8003228:	1c42      	adds	r2, r0, #1
 800322a:	4606      	mov	r6, r0
 800322c:	d1d6      	bne.n	80031dc <_svfiprintf_r+0x174>
 800322e:	89ab      	ldrh	r3, [r5, #12]
 8003230:	065b      	lsls	r3, r3, #25
 8003232:	f53f af2d 	bmi.w	8003090 <_svfiprintf_r+0x28>
 8003236:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003238:	b01d      	add	sp, #116	; 0x74
 800323a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800323e:	ab03      	add	r3, sp, #12
 8003240:	9300      	str	r3, [sp, #0]
 8003242:	462a      	mov	r2, r5
 8003244:	4b05      	ldr	r3, [pc, #20]	; (800325c <_svfiprintf_r+0x1f4>)
 8003246:	a904      	add	r1, sp, #16
 8003248:	4638      	mov	r0, r7
 800324a:	f000 f879 	bl	8003340 <_printf_i>
 800324e:	e7eb      	b.n	8003228 <_svfiprintf_r+0x1c0>
 8003250:	080049f8 	.word	0x080049f8
 8003254:	08004a02 	.word	0x08004a02
 8003258:	00000000 	.word	0x00000000
 800325c:	08002fb5 	.word	0x08002fb5
 8003260:	080049fe 	.word	0x080049fe

08003264 <_printf_common>:
 8003264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003268:	4616      	mov	r6, r2
 800326a:	4699      	mov	r9, r3
 800326c:	688a      	ldr	r2, [r1, #8]
 800326e:	690b      	ldr	r3, [r1, #16]
 8003270:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003274:	4293      	cmp	r3, r2
 8003276:	bfb8      	it	lt
 8003278:	4613      	movlt	r3, r2
 800327a:	6033      	str	r3, [r6, #0]
 800327c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003280:	4607      	mov	r7, r0
 8003282:	460c      	mov	r4, r1
 8003284:	b10a      	cbz	r2, 800328a <_printf_common+0x26>
 8003286:	3301      	adds	r3, #1
 8003288:	6033      	str	r3, [r6, #0]
 800328a:	6823      	ldr	r3, [r4, #0]
 800328c:	0699      	lsls	r1, r3, #26
 800328e:	bf42      	ittt	mi
 8003290:	6833      	ldrmi	r3, [r6, #0]
 8003292:	3302      	addmi	r3, #2
 8003294:	6033      	strmi	r3, [r6, #0]
 8003296:	6825      	ldr	r5, [r4, #0]
 8003298:	f015 0506 	ands.w	r5, r5, #6
 800329c:	d106      	bne.n	80032ac <_printf_common+0x48>
 800329e:	f104 0a19 	add.w	sl, r4, #25
 80032a2:	68e3      	ldr	r3, [r4, #12]
 80032a4:	6832      	ldr	r2, [r6, #0]
 80032a6:	1a9b      	subs	r3, r3, r2
 80032a8:	42ab      	cmp	r3, r5
 80032aa:	dc26      	bgt.n	80032fa <_printf_common+0x96>
 80032ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80032b0:	1e13      	subs	r3, r2, #0
 80032b2:	6822      	ldr	r2, [r4, #0]
 80032b4:	bf18      	it	ne
 80032b6:	2301      	movne	r3, #1
 80032b8:	0692      	lsls	r2, r2, #26
 80032ba:	d42b      	bmi.n	8003314 <_printf_common+0xb0>
 80032bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80032c0:	4649      	mov	r1, r9
 80032c2:	4638      	mov	r0, r7
 80032c4:	47c0      	blx	r8
 80032c6:	3001      	adds	r0, #1
 80032c8:	d01e      	beq.n	8003308 <_printf_common+0xa4>
 80032ca:	6823      	ldr	r3, [r4, #0]
 80032cc:	6922      	ldr	r2, [r4, #16]
 80032ce:	f003 0306 	and.w	r3, r3, #6
 80032d2:	2b04      	cmp	r3, #4
 80032d4:	bf02      	ittt	eq
 80032d6:	68e5      	ldreq	r5, [r4, #12]
 80032d8:	6833      	ldreq	r3, [r6, #0]
 80032da:	1aed      	subeq	r5, r5, r3
 80032dc:	68a3      	ldr	r3, [r4, #8]
 80032de:	bf0c      	ite	eq
 80032e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80032e4:	2500      	movne	r5, #0
 80032e6:	4293      	cmp	r3, r2
 80032e8:	bfc4      	itt	gt
 80032ea:	1a9b      	subgt	r3, r3, r2
 80032ec:	18ed      	addgt	r5, r5, r3
 80032ee:	2600      	movs	r6, #0
 80032f0:	341a      	adds	r4, #26
 80032f2:	42b5      	cmp	r5, r6
 80032f4:	d11a      	bne.n	800332c <_printf_common+0xc8>
 80032f6:	2000      	movs	r0, #0
 80032f8:	e008      	b.n	800330c <_printf_common+0xa8>
 80032fa:	2301      	movs	r3, #1
 80032fc:	4652      	mov	r2, sl
 80032fe:	4649      	mov	r1, r9
 8003300:	4638      	mov	r0, r7
 8003302:	47c0      	blx	r8
 8003304:	3001      	adds	r0, #1
 8003306:	d103      	bne.n	8003310 <_printf_common+0xac>
 8003308:	f04f 30ff 	mov.w	r0, #4294967295
 800330c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003310:	3501      	adds	r5, #1
 8003312:	e7c6      	b.n	80032a2 <_printf_common+0x3e>
 8003314:	18e1      	adds	r1, r4, r3
 8003316:	1c5a      	adds	r2, r3, #1
 8003318:	2030      	movs	r0, #48	; 0x30
 800331a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800331e:	4422      	add	r2, r4
 8003320:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003324:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003328:	3302      	adds	r3, #2
 800332a:	e7c7      	b.n	80032bc <_printf_common+0x58>
 800332c:	2301      	movs	r3, #1
 800332e:	4622      	mov	r2, r4
 8003330:	4649      	mov	r1, r9
 8003332:	4638      	mov	r0, r7
 8003334:	47c0      	blx	r8
 8003336:	3001      	adds	r0, #1
 8003338:	d0e6      	beq.n	8003308 <_printf_common+0xa4>
 800333a:	3601      	adds	r6, #1
 800333c:	e7d9      	b.n	80032f2 <_printf_common+0x8e>
	...

08003340 <_printf_i>:
 8003340:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003344:	7e0f      	ldrb	r7, [r1, #24]
 8003346:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003348:	2f78      	cmp	r7, #120	; 0x78
 800334a:	4691      	mov	r9, r2
 800334c:	4680      	mov	r8, r0
 800334e:	460c      	mov	r4, r1
 8003350:	469a      	mov	sl, r3
 8003352:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003356:	d807      	bhi.n	8003368 <_printf_i+0x28>
 8003358:	2f62      	cmp	r7, #98	; 0x62
 800335a:	d80a      	bhi.n	8003372 <_printf_i+0x32>
 800335c:	2f00      	cmp	r7, #0
 800335e:	f000 80d4 	beq.w	800350a <_printf_i+0x1ca>
 8003362:	2f58      	cmp	r7, #88	; 0x58
 8003364:	f000 80c0 	beq.w	80034e8 <_printf_i+0x1a8>
 8003368:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800336c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003370:	e03a      	b.n	80033e8 <_printf_i+0xa8>
 8003372:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003376:	2b15      	cmp	r3, #21
 8003378:	d8f6      	bhi.n	8003368 <_printf_i+0x28>
 800337a:	a101      	add	r1, pc, #4	; (adr r1, 8003380 <_printf_i+0x40>)
 800337c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003380:	080033d9 	.word	0x080033d9
 8003384:	080033ed 	.word	0x080033ed
 8003388:	08003369 	.word	0x08003369
 800338c:	08003369 	.word	0x08003369
 8003390:	08003369 	.word	0x08003369
 8003394:	08003369 	.word	0x08003369
 8003398:	080033ed 	.word	0x080033ed
 800339c:	08003369 	.word	0x08003369
 80033a0:	08003369 	.word	0x08003369
 80033a4:	08003369 	.word	0x08003369
 80033a8:	08003369 	.word	0x08003369
 80033ac:	080034f1 	.word	0x080034f1
 80033b0:	08003419 	.word	0x08003419
 80033b4:	080034ab 	.word	0x080034ab
 80033b8:	08003369 	.word	0x08003369
 80033bc:	08003369 	.word	0x08003369
 80033c0:	08003513 	.word	0x08003513
 80033c4:	08003369 	.word	0x08003369
 80033c8:	08003419 	.word	0x08003419
 80033cc:	08003369 	.word	0x08003369
 80033d0:	08003369 	.word	0x08003369
 80033d4:	080034b3 	.word	0x080034b3
 80033d8:	682b      	ldr	r3, [r5, #0]
 80033da:	1d1a      	adds	r2, r3, #4
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	602a      	str	r2, [r5, #0]
 80033e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80033e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80033e8:	2301      	movs	r3, #1
 80033ea:	e09f      	b.n	800352c <_printf_i+0x1ec>
 80033ec:	6820      	ldr	r0, [r4, #0]
 80033ee:	682b      	ldr	r3, [r5, #0]
 80033f0:	0607      	lsls	r7, r0, #24
 80033f2:	f103 0104 	add.w	r1, r3, #4
 80033f6:	6029      	str	r1, [r5, #0]
 80033f8:	d501      	bpl.n	80033fe <_printf_i+0xbe>
 80033fa:	681e      	ldr	r6, [r3, #0]
 80033fc:	e003      	b.n	8003406 <_printf_i+0xc6>
 80033fe:	0646      	lsls	r6, r0, #25
 8003400:	d5fb      	bpl.n	80033fa <_printf_i+0xba>
 8003402:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003406:	2e00      	cmp	r6, #0
 8003408:	da03      	bge.n	8003412 <_printf_i+0xd2>
 800340a:	232d      	movs	r3, #45	; 0x2d
 800340c:	4276      	negs	r6, r6
 800340e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003412:	485a      	ldr	r0, [pc, #360]	; (800357c <_printf_i+0x23c>)
 8003414:	230a      	movs	r3, #10
 8003416:	e012      	b.n	800343e <_printf_i+0xfe>
 8003418:	682b      	ldr	r3, [r5, #0]
 800341a:	6820      	ldr	r0, [r4, #0]
 800341c:	1d19      	adds	r1, r3, #4
 800341e:	6029      	str	r1, [r5, #0]
 8003420:	0605      	lsls	r5, r0, #24
 8003422:	d501      	bpl.n	8003428 <_printf_i+0xe8>
 8003424:	681e      	ldr	r6, [r3, #0]
 8003426:	e002      	b.n	800342e <_printf_i+0xee>
 8003428:	0641      	lsls	r1, r0, #25
 800342a:	d5fb      	bpl.n	8003424 <_printf_i+0xe4>
 800342c:	881e      	ldrh	r6, [r3, #0]
 800342e:	4853      	ldr	r0, [pc, #332]	; (800357c <_printf_i+0x23c>)
 8003430:	2f6f      	cmp	r7, #111	; 0x6f
 8003432:	bf0c      	ite	eq
 8003434:	2308      	moveq	r3, #8
 8003436:	230a      	movne	r3, #10
 8003438:	2100      	movs	r1, #0
 800343a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800343e:	6865      	ldr	r5, [r4, #4]
 8003440:	60a5      	str	r5, [r4, #8]
 8003442:	2d00      	cmp	r5, #0
 8003444:	bfa2      	ittt	ge
 8003446:	6821      	ldrge	r1, [r4, #0]
 8003448:	f021 0104 	bicge.w	r1, r1, #4
 800344c:	6021      	strge	r1, [r4, #0]
 800344e:	b90e      	cbnz	r6, 8003454 <_printf_i+0x114>
 8003450:	2d00      	cmp	r5, #0
 8003452:	d04b      	beq.n	80034ec <_printf_i+0x1ac>
 8003454:	4615      	mov	r5, r2
 8003456:	fbb6 f1f3 	udiv	r1, r6, r3
 800345a:	fb03 6711 	mls	r7, r3, r1, r6
 800345e:	5dc7      	ldrb	r7, [r0, r7]
 8003460:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003464:	4637      	mov	r7, r6
 8003466:	42bb      	cmp	r3, r7
 8003468:	460e      	mov	r6, r1
 800346a:	d9f4      	bls.n	8003456 <_printf_i+0x116>
 800346c:	2b08      	cmp	r3, #8
 800346e:	d10b      	bne.n	8003488 <_printf_i+0x148>
 8003470:	6823      	ldr	r3, [r4, #0]
 8003472:	07de      	lsls	r6, r3, #31
 8003474:	d508      	bpl.n	8003488 <_printf_i+0x148>
 8003476:	6923      	ldr	r3, [r4, #16]
 8003478:	6861      	ldr	r1, [r4, #4]
 800347a:	4299      	cmp	r1, r3
 800347c:	bfde      	ittt	le
 800347e:	2330      	movle	r3, #48	; 0x30
 8003480:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003484:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003488:	1b52      	subs	r2, r2, r5
 800348a:	6122      	str	r2, [r4, #16]
 800348c:	f8cd a000 	str.w	sl, [sp]
 8003490:	464b      	mov	r3, r9
 8003492:	aa03      	add	r2, sp, #12
 8003494:	4621      	mov	r1, r4
 8003496:	4640      	mov	r0, r8
 8003498:	f7ff fee4 	bl	8003264 <_printf_common>
 800349c:	3001      	adds	r0, #1
 800349e:	d14a      	bne.n	8003536 <_printf_i+0x1f6>
 80034a0:	f04f 30ff 	mov.w	r0, #4294967295
 80034a4:	b004      	add	sp, #16
 80034a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034aa:	6823      	ldr	r3, [r4, #0]
 80034ac:	f043 0320 	orr.w	r3, r3, #32
 80034b0:	6023      	str	r3, [r4, #0]
 80034b2:	4833      	ldr	r0, [pc, #204]	; (8003580 <_printf_i+0x240>)
 80034b4:	2778      	movs	r7, #120	; 0x78
 80034b6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80034ba:	6823      	ldr	r3, [r4, #0]
 80034bc:	6829      	ldr	r1, [r5, #0]
 80034be:	061f      	lsls	r7, r3, #24
 80034c0:	f851 6b04 	ldr.w	r6, [r1], #4
 80034c4:	d402      	bmi.n	80034cc <_printf_i+0x18c>
 80034c6:	065f      	lsls	r7, r3, #25
 80034c8:	bf48      	it	mi
 80034ca:	b2b6      	uxthmi	r6, r6
 80034cc:	07df      	lsls	r7, r3, #31
 80034ce:	bf48      	it	mi
 80034d0:	f043 0320 	orrmi.w	r3, r3, #32
 80034d4:	6029      	str	r1, [r5, #0]
 80034d6:	bf48      	it	mi
 80034d8:	6023      	strmi	r3, [r4, #0]
 80034da:	b91e      	cbnz	r6, 80034e4 <_printf_i+0x1a4>
 80034dc:	6823      	ldr	r3, [r4, #0]
 80034de:	f023 0320 	bic.w	r3, r3, #32
 80034e2:	6023      	str	r3, [r4, #0]
 80034e4:	2310      	movs	r3, #16
 80034e6:	e7a7      	b.n	8003438 <_printf_i+0xf8>
 80034e8:	4824      	ldr	r0, [pc, #144]	; (800357c <_printf_i+0x23c>)
 80034ea:	e7e4      	b.n	80034b6 <_printf_i+0x176>
 80034ec:	4615      	mov	r5, r2
 80034ee:	e7bd      	b.n	800346c <_printf_i+0x12c>
 80034f0:	682b      	ldr	r3, [r5, #0]
 80034f2:	6826      	ldr	r6, [r4, #0]
 80034f4:	6961      	ldr	r1, [r4, #20]
 80034f6:	1d18      	adds	r0, r3, #4
 80034f8:	6028      	str	r0, [r5, #0]
 80034fa:	0635      	lsls	r5, r6, #24
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	d501      	bpl.n	8003504 <_printf_i+0x1c4>
 8003500:	6019      	str	r1, [r3, #0]
 8003502:	e002      	b.n	800350a <_printf_i+0x1ca>
 8003504:	0670      	lsls	r0, r6, #25
 8003506:	d5fb      	bpl.n	8003500 <_printf_i+0x1c0>
 8003508:	8019      	strh	r1, [r3, #0]
 800350a:	2300      	movs	r3, #0
 800350c:	6123      	str	r3, [r4, #16]
 800350e:	4615      	mov	r5, r2
 8003510:	e7bc      	b.n	800348c <_printf_i+0x14c>
 8003512:	682b      	ldr	r3, [r5, #0]
 8003514:	1d1a      	adds	r2, r3, #4
 8003516:	602a      	str	r2, [r5, #0]
 8003518:	681d      	ldr	r5, [r3, #0]
 800351a:	6862      	ldr	r2, [r4, #4]
 800351c:	2100      	movs	r1, #0
 800351e:	4628      	mov	r0, r5
 8003520:	f7fc fe66 	bl	80001f0 <memchr>
 8003524:	b108      	cbz	r0, 800352a <_printf_i+0x1ea>
 8003526:	1b40      	subs	r0, r0, r5
 8003528:	6060      	str	r0, [r4, #4]
 800352a:	6863      	ldr	r3, [r4, #4]
 800352c:	6123      	str	r3, [r4, #16]
 800352e:	2300      	movs	r3, #0
 8003530:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003534:	e7aa      	b.n	800348c <_printf_i+0x14c>
 8003536:	6923      	ldr	r3, [r4, #16]
 8003538:	462a      	mov	r2, r5
 800353a:	4649      	mov	r1, r9
 800353c:	4640      	mov	r0, r8
 800353e:	47d0      	blx	sl
 8003540:	3001      	adds	r0, #1
 8003542:	d0ad      	beq.n	80034a0 <_printf_i+0x160>
 8003544:	6823      	ldr	r3, [r4, #0]
 8003546:	079b      	lsls	r3, r3, #30
 8003548:	d413      	bmi.n	8003572 <_printf_i+0x232>
 800354a:	68e0      	ldr	r0, [r4, #12]
 800354c:	9b03      	ldr	r3, [sp, #12]
 800354e:	4298      	cmp	r0, r3
 8003550:	bfb8      	it	lt
 8003552:	4618      	movlt	r0, r3
 8003554:	e7a6      	b.n	80034a4 <_printf_i+0x164>
 8003556:	2301      	movs	r3, #1
 8003558:	4632      	mov	r2, r6
 800355a:	4649      	mov	r1, r9
 800355c:	4640      	mov	r0, r8
 800355e:	47d0      	blx	sl
 8003560:	3001      	adds	r0, #1
 8003562:	d09d      	beq.n	80034a0 <_printf_i+0x160>
 8003564:	3501      	adds	r5, #1
 8003566:	68e3      	ldr	r3, [r4, #12]
 8003568:	9903      	ldr	r1, [sp, #12]
 800356a:	1a5b      	subs	r3, r3, r1
 800356c:	42ab      	cmp	r3, r5
 800356e:	dcf2      	bgt.n	8003556 <_printf_i+0x216>
 8003570:	e7eb      	b.n	800354a <_printf_i+0x20a>
 8003572:	2500      	movs	r5, #0
 8003574:	f104 0619 	add.w	r6, r4, #25
 8003578:	e7f5      	b.n	8003566 <_printf_i+0x226>
 800357a:	bf00      	nop
 800357c:	08004a09 	.word	0x08004a09
 8003580:	08004a1a 	.word	0x08004a1a

08003584 <memmove>:
 8003584:	4288      	cmp	r0, r1
 8003586:	b510      	push	{r4, lr}
 8003588:	eb01 0402 	add.w	r4, r1, r2
 800358c:	d902      	bls.n	8003594 <memmove+0x10>
 800358e:	4284      	cmp	r4, r0
 8003590:	4623      	mov	r3, r4
 8003592:	d807      	bhi.n	80035a4 <memmove+0x20>
 8003594:	1e43      	subs	r3, r0, #1
 8003596:	42a1      	cmp	r1, r4
 8003598:	d008      	beq.n	80035ac <memmove+0x28>
 800359a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800359e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80035a2:	e7f8      	b.n	8003596 <memmove+0x12>
 80035a4:	4402      	add	r2, r0
 80035a6:	4601      	mov	r1, r0
 80035a8:	428a      	cmp	r2, r1
 80035aa:	d100      	bne.n	80035ae <memmove+0x2a>
 80035ac:	bd10      	pop	{r4, pc}
 80035ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80035b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80035b6:	e7f7      	b.n	80035a8 <memmove+0x24>

080035b8 <_sbrk_r>:
 80035b8:	b538      	push	{r3, r4, r5, lr}
 80035ba:	4d06      	ldr	r5, [pc, #24]	; (80035d4 <_sbrk_r+0x1c>)
 80035bc:	2300      	movs	r3, #0
 80035be:	4604      	mov	r4, r0
 80035c0:	4608      	mov	r0, r1
 80035c2:	602b      	str	r3, [r5, #0]
 80035c4:	f7fd fcba 	bl	8000f3c <_sbrk>
 80035c8:	1c43      	adds	r3, r0, #1
 80035ca:	d102      	bne.n	80035d2 <_sbrk_r+0x1a>
 80035cc:	682b      	ldr	r3, [r5, #0]
 80035ce:	b103      	cbz	r3, 80035d2 <_sbrk_r+0x1a>
 80035d0:	6023      	str	r3, [r4, #0]
 80035d2:	bd38      	pop	{r3, r4, r5, pc}
 80035d4:	20000620 	.word	0x20000620

080035d8 <memcpy>:
 80035d8:	440a      	add	r2, r1
 80035da:	4291      	cmp	r1, r2
 80035dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80035e0:	d100      	bne.n	80035e4 <memcpy+0xc>
 80035e2:	4770      	bx	lr
 80035e4:	b510      	push	{r4, lr}
 80035e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80035ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80035ee:	4291      	cmp	r1, r2
 80035f0:	d1f9      	bne.n	80035e6 <memcpy+0xe>
 80035f2:	bd10      	pop	{r4, pc}

080035f4 <_realloc_r>:
 80035f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035f8:	4680      	mov	r8, r0
 80035fa:	4614      	mov	r4, r2
 80035fc:	460e      	mov	r6, r1
 80035fe:	b921      	cbnz	r1, 800360a <_realloc_r+0x16>
 8003600:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003604:	4611      	mov	r1, r2
 8003606:	f7ff bc49 	b.w	8002e9c <_malloc_r>
 800360a:	b92a      	cbnz	r2, 8003618 <_realloc_r+0x24>
 800360c:	f7ff fbda 	bl	8002dc4 <_free_r>
 8003610:	4625      	mov	r5, r4
 8003612:	4628      	mov	r0, r5
 8003614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003618:	f000 f81b 	bl	8003652 <_malloc_usable_size_r>
 800361c:	4284      	cmp	r4, r0
 800361e:	4607      	mov	r7, r0
 8003620:	d802      	bhi.n	8003628 <_realloc_r+0x34>
 8003622:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003626:	d812      	bhi.n	800364e <_realloc_r+0x5a>
 8003628:	4621      	mov	r1, r4
 800362a:	4640      	mov	r0, r8
 800362c:	f7ff fc36 	bl	8002e9c <_malloc_r>
 8003630:	4605      	mov	r5, r0
 8003632:	2800      	cmp	r0, #0
 8003634:	d0ed      	beq.n	8003612 <_realloc_r+0x1e>
 8003636:	42bc      	cmp	r4, r7
 8003638:	4622      	mov	r2, r4
 800363a:	4631      	mov	r1, r6
 800363c:	bf28      	it	cs
 800363e:	463a      	movcs	r2, r7
 8003640:	f7ff ffca 	bl	80035d8 <memcpy>
 8003644:	4631      	mov	r1, r6
 8003646:	4640      	mov	r0, r8
 8003648:	f7ff fbbc 	bl	8002dc4 <_free_r>
 800364c:	e7e1      	b.n	8003612 <_realloc_r+0x1e>
 800364e:	4635      	mov	r5, r6
 8003650:	e7df      	b.n	8003612 <_realloc_r+0x1e>

08003652 <_malloc_usable_size_r>:
 8003652:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003656:	1f18      	subs	r0, r3, #4
 8003658:	2b00      	cmp	r3, #0
 800365a:	bfbc      	itt	lt
 800365c:	580b      	ldrlt	r3, [r1, r0]
 800365e:	18c0      	addlt	r0, r0, r3
 8003660:	4770      	bx	lr
	...

08003664 <_init>:
 8003664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003666:	bf00      	nop
 8003668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800366a:	bc08      	pop	{r3}
 800366c:	469e      	mov	lr, r3
 800366e:	4770      	bx	lr

08003670 <_fini>:
 8003670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003672:	bf00      	nop
 8003674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003676:	bc08      	pop	{r3}
 8003678:	469e      	mov	lr, r3
 800367a:	4770      	bx	lr
